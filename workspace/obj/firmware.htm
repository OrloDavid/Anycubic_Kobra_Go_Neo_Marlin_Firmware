<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\firmware.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\firmware.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Nov 26 09:54:15 2023
<BR><P>
<H3>Maximum Stack Usage =       1312 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
lcd_move_x() &rArr; _lcd_move_xyz(const char*, AxisEnum) &rArr; GcodeSuite::process_subcommands_now_P(const char*) &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NMI_Handler</a><BR>
 <LI><a href="#[d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">HardFault_Handler</a><BR>
 <LI><a href="#[e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BusFault_Handler</a><BR>
 <LI><a href="#[10]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">UsageFault_Handler</a><BR>
 <LI><a href="#[11]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">SVC_Handler</a><BR>
 <LI><a href="#[12]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">DebugMon_Handler</a><BR>
 <LI><a href="#[13]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">PendSV_Handler</a><BR>
 <LI><a href="#[79]">IRQ100_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[79]">IRQ100_Handler</a><BR>
 <LI><a href="#[39e]">TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[244]">Planner::synchronize()</a><BR>
 <LI><a href="#[315]">quickstop_stepper()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[244]">Planner::synchronize()</a><BR>
 <LI><a href="#[5ff]">Stepper::set_position(const int&, const int&, const int&, const int&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[244]">Planner::synchronize()</a><BR>
 <LI><a href="#[5f6]">Planner::buffer_sync_block()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a9]">idle(bool)</a><BR>
 <LI><a href="#[3bc]">Buzzer::tone(unsigned short, unsigned short)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[238]">Temperature::manage_heater()</a><BR>
 <LI><a href="#[3ea]">CardReader::fileHasFinished()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[244]">Planner::synchronize()</a><BR>
 <LI><a href="#[5e9]">Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a9]">idle(bool)</a><BR>
 <LI><a href="#[3d5]">PrintJobRecovery::check()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[290]">GcodeSuite::process_subcommands_now_P(const char*)</a><BR>
 <LI><a href="#[470]">GcodeSuite::M1001()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[290]">GcodeSuite::process_subcommands_now_P(const char*)</a><BR>
 <LI><a href="#[4cb]">PrintJobRecovery::resume()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[290]">GcodeSuite::process_subcommands_now_P(const char*)</a><BR>
 <LI><a href="#[471]">GcodeSuite::process_subcommands_now(char*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40a]">GcodeSuite::process_parsed_command(bool)</a><BR>
 <LI><a href="#[34f]">bed_level_virt_coord(unsigned char, unsigned char)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34f]">bed_level_virt_coord(unsigned char, unsigned char)</a><BR>
 <LI><a href="#[3da]">CardReader::printListing(SdFile, const char*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3da]">CardReader::printListing(SdFile, const char*)</a><BR>
 <LI><a href="#[414]">GcodeSuite::G29()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[290]">GcodeSuite::process_subcommands_now_P(const char*)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[129]">&lang;Func69&rang;</a> from cardreader.o(i.<Func69>) referenced from cardreader.o(i.__sti___14_cardreader_cpp_29701c05)
 <LI><a href="#[12c]">BSP_USART1_EIIrqHander</a> from bsp_irq.o(i.BSP_USART1_EIIrqHander) referenced from bsp_init.o(i.uart1_init)
 <LI><a href="#[12b]">BSP_USART1_RIIrqHander</a> from bsp_irq.o(i.BSP_USART1_RIIrqHander) referenced from bsp_init.o(i.uart1_init)
 <LI><a href="#[12e]">BSP_USART1_TCIIrqHander</a> from bsp_irq.o(i.BSP_USART1_TCIIrqHander) referenced from bsp_init.o(i.uart1_init)
 <LI><a href="#[12d]">BSP_USART1_TIrqHander</a> from bsp_irq.o(i.BSP_USART1_TIrqHander) referenced from bsp_init.o(i.uart1_init)
 <LI><a href="#[130]">BSP_USART2_EIIrqHander</a> from bsp_irq.o(i.BSP_USART2_EIIrqHander) referenced from bsp_init.o(i.uart2_init)
 <LI><a href="#[12f]">BSP_USART2_RIIrqHander</a> from bsp_irq.o(i.BSP_USART2_RIIrqHander) referenced from bsp_init.o(i.uart2_init)
 <LI><a href="#[132]">BSP_USART2_TCIIrqHander</a> from bsp_irq.o(i.BSP_USART2_TCIIrqHander) referenced from bsp_init.o(i.uart2_init)
 <LI><a href="#[131]">BSP_USART2_TIrqHander</a> from bsp_irq.o(i.BSP_USART2_TIrqHander) referenced from bsp_init.o(i.uart2_init)
 <LI><a href="#[134]">BSP_USART4_EIIrqHander</a> from bsp_irq.o(i.BSP_USART4_EIIrqHander) referenced from bsp_init.o(i.uart4_init)
 <LI><a href="#[133]">BSP_USART4_RIIrqHander</a> from bsp_irq.o(i.BSP_USART4_RIIrqHander) referenced from bsp_init.o(i.uart4_init)
 <LI><a href="#[136]">BSP_USART4_TCIIrqHander</a> from bsp_irq.o(i.BSP_USART4_TCIIrqHander) referenced from bsp_init.o(i.uart4_init)
 <LI><a href="#[135]">BSP_USART4_TIrqHander</a> from bsp_irq.o(i.BSP_USART4_TIrqHander) referenced from bsp_init.o(i.uart4_init)
 <LI><a href="#[f]">BusFault_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[15]">IRQ000_Handler</a> from hc32f46x_interrupts.o(i.IRQ000_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[16]">IRQ001_Handler</a> from hc32f46x_interrupts.o(i.IRQ001_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[17]">IRQ002_Handler</a> from hc32f46x_interrupts.o(i.IRQ002_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[18]">IRQ003_Handler</a> from hc32f46x_interrupts.o(i.IRQ003_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[19]">IRQ004_Handler</a> from hc32f46x_interrupts.o(i.IRQ004_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1a]">IRQ005_Handler</a> from hc32f46x_interrupts.o(i.IRQ005_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1b]">IRQ006_Handler</a> from hc32f46x_interrupts.o(i.IRQ006_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1c]">IRQ007_Handler</a> from hc32f46x_interrupts.o(i.IRQ007_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1d]">IRQ008_Handler</a> from hc32f46x_interrupts.o(i.IRQ008_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1e]">IRQ009_Handler</a> from hc32f46x_interrupts.o(i.IRQ009_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1f]">IRQ010_Handler</a> from hc32f46x_interrupts.o(i.IRQ010_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[20]">IRQ011_Handler</a> from hc32f46x_interrupts.o(i.IRQ011_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[21]">IRQ012_Handler</a> from hc32f46x_interrupts.o(i.IRQ012_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[22]">IRQ013_Handler</a> from hc32f46x_interrupts.o(i.IRQ013_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[23]">IRQ014_Handler</a> from hc32f46x_interrupts.o(i.IRQ014_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[24]">IRQ015_Handler</a> from hc32f46x_interrupts.o(i.IRQ015_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[25]">IRQ016_Handler</a> from hc32f46x_interrupts.o(i.IRQ016_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[26]">IRQ017_Handler</a> from hc32f46x_interrupts.o(i.IRQ017_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[27]">IRQ018_Handler</a> from hc32f46x_interrupts.o(i.IRQ018_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[28]">IRQ019_Handler</a> from hc32f46x_interrupts.o(i.IRQ019_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[29]">IRQ020_Handler</a> from hc32f46x_interrupts.o(i.IRQ020_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2a]">IRQ021_Handler</a> from hc32f46x_interrupts.o(i.IRQ021_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2b]">IRQ022_Handler</a> from hc32f46x_interrupts.o(i.IRQ022_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2c]">IRQ023_Handler</a> from hc32f46x_interrupts.o(i.IRQ023_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2d]">IRQ024_Handler</a> from hc32f46x_interrupts.o(i.IRQ024_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2e]">IRQ025_Handler</a> from hc32f46x_interrupts.o(i.IRQ025_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2f]">IRQ026_Handler</a> from hc32f46x_interrupts.o(i.IRQ026_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[30]">IRQ027_Handler</a> from hc32f46x_interrupts.o(i.IRQ027_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[31]">IRQ028_Handler</a> from hc32f46x_interrupts.o(i.IRQ028_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[32]">IRQ029_Handler</a> from hc32f46x_interrupts.o(i.IRQ029_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[33]">IRQ030_Handler</a> from hc32f46x_interrupts.o(i.IRQ030_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[34]">IRQ031_Handler</a> from hc32f46x_interrupts.o(i.IRQ031_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[35]">IRQ032_Handler</a> from hc32f46x_interrupts.o(i.IRQ032_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[36]">IRQ033_Handler</a> from hc32f46x_interrupts.o(i.IRQ033_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[37]">IRQ034_Handler</a> from hc32f46x_interrupts.o(i.IRQ034_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[38]">IRQ035_Handler</a> from hc32f46x_interrupts.o(i.IRQ035_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[39]">IRQ036_Handler</a> from hc32f46x_interrupts.o(i.IRQ036_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3a]">IRQ037_Handler</a> from hc32f46x_interrupts.o(i.IRQ037_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3b]">IRQ038_Handler</a> from hc32f46x_interrupts.o(i.IRQ038_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3c]">IRQ039_Handler</a> from hc32f46x_interrupts.o(i.IRQ039_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3d]">IRQ040_Handler</a> from hc32f46x_interrupts.o(i.IRQ040_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3e]">IRQ041_Handler</a> from hc32f46x_interrupts.o(i.IRQ041_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3f]">IRQ042_Handler</a> from hc32f46x_interrupts.o(i.IRQ042_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[40]">IRQ043_Handler</a> from hc32f46x_interrupts.o(i.IRQ043_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[41]">IRQ044_Handler</a> from hc32f46x_interrupts.o(i.IRQ044_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[42]">IRQ045_Handler</a> from hc32f46x_interrupts.o(i.IRQ045_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[43]">IRQ046_Handler</a> from hc32f46x_interrupts.o(i.IRQ046_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[44]">IRQ047_Handler</a> from hc32f46x_interrupts.o(i.IRQ047_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[45]">IRQ048_Handler</a> from hc32f46x_interrupts.o(i.IRQ048_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[46]">IRQ049_Handler</a> from hc32f46x_interrupts.o(i.IRQ049_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[47]">IRQ050_Handler</a> from hc32f46x_interrupts.o(i.IRQ050_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[48]">IRQ051_Handler</a> from hc32f46x_interrupts.o(i.IRQ051_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[49]">IRQ052_Handler</a> from hc32f46x_interrupts.o(i.IRQ052_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4a]">IRQ053_Handler</a> from hc32f46x_interrupts.o(i.IRQ053_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4b]">IRQ054_Handler</a> from hc32f46x_interrupts.o(i.IRQ054_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4c]">IRQ055_Handler</a> from hc32f46x_interrupts.o(i.IRQ055_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4d]">IRQ056_Handler</a> from hc32f46x_interrupts.o(i.IRQ056_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4e]">IRQ057_Handler</a> from hc32f46x_interrupts.o(i.IRQ057_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4f]">IRQ058_Handler</a> from hc32f46x_interrupts.o(i.IRQ058_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[50]">IRQ059_Handler</a> from hc32f46x_interrupts.o(i.IRQ059_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[51]">IRQ060_Handler</a> from hc32f46x_interrupts.o(i.IRQ060_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[52]">IRQ061_Handler</a> from hc32f46x_interrupts.o(i.IRQ061_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[53]">IRQ062_Handler</a> from hc32f46x_interrupts.o(i.IRQ062_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[54]">IRQ063_Handler</a> from hc32f46x_interrupts.o(i.IRQ063_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[55]">IRQ064_Handler</a> from hc32f46x_interrupts.o(i.IRQ064_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[56]">IRQ065_Handler</a> from hc32f46x_interrupts.o(i.IRQ065_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[57]">IRQ066_Handler</a> from hc32f46x_interrupts.o(i.IRQ066_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[58]">IRQ067_Handler</a> from hc32f46x_interrupts.o(i.IRQ067_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[59]">IRQ068_Handler</a> from hc32f46x_interrupts.o(i.IRQ068_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5a]">IRQ069_Handler</a> from hc32f46x_interrupts.o(i.IRQ069_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5b]">IRQ070_Handler</a> from hc32f46x_interrupts.o(i.IRQ070_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5c]">IRQ071_Handler</a> from hc32f46x_interrupts.o(i.IRQ071_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5d]">IRQ072_Handler</a> from hc32f46x_interrupts.o(i.IRQ072_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5e]">IRQ073_Handler</a> from hc32f46x_interrupts.o(i.IRQ073_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5f]">IRQ074_Handler</a> from hc32f46x_interrupts.o(i.IRQ074_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[60]">IRQ075_Handler</a> from hc32f46x_interrupts.o(i.IRQ075_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[61]">IRQ076_Handler</a> from hc32f46x_interrupts.o(i.IRQ076_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[62]">IRQ077_Handler</a> from hc32f46x_interrupts.o(i.IRQ077_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[63]">IRQ078_Handler</a> from hc32f46x_interrupts.o(i.IRQ078_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[64]">IRQ079_Handler</a> from hc32f46x_interrupts.o(i.IRQ079_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[65]">IRQ080_Handler</a> from hc32f46x_interrupts.o(i.IRQ080_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[66]">IRQ081_Handler</a> from hc32f46x_interrupts.o(i.IRQ081_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[67]">IRQ082_Handler</a> from hc32f46x_interrupts.o(i.IRQ082_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[68]">IRQ083_Handler</a> from hc32f46x_interrupts.o(i.IRQ083_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[69]">IRQ084_Handler</a> from hc32f46x_interrupts.o(i.IRQ084_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6a]">IRQ085_Handler</a> from hc32f46x_interrupts.o(i.IRQ085_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6b]">IRQ086_Handler</a> from hc32f46x_interrupts.o(i.IRQ086_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6c]">IRQ087_Handler</a> from hc32f46x_interrupts.o(i.IRQ087_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6d]">IRQ088_Handler</a> from hc32f46x_interrupts.o(i.IRQ088_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6e]">IRQ089_Handler</a> from hc32f46x_interrupts.o(i.IRQ089_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6f]">IRQ090_Handler</a> from hc32f46x_interrupts.o(i.IRQ090_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[70]">IRQ091_Handler</a> from hc32f46x_interrupts.o(i.IRQ091_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[71]">IRQ092_Handler</a> from hc32f46x_interrupts.o(i.IRQ092_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[72]">IRQ093_Handler</a> from hc32f46x_interrupts.o(i.IRQ093_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[73]">IRQ094_Handler</a> from hc32f46x_interrupts.o(i.IRQ094_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[74]">IRQ095_Handler</a> from hc32f46x_interrupts.o(i.IRQ095_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[75]">IRQ096_Handler</a> from hc32f46x_interrupts.o(i.IRQ096_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[76]">IRQ097_Handler</a> from hc32f46x_interrupts.o(i.IRQ097_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[77]">IRQ098_Handler</a> from hc32f46x_interrupts.o(i.IRQ098_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[78]">IRQ099_Handler</a> from hc32f46x_interrupts.o(i.IRQ099_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[79]">IRQ100_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7a]">IRQ101_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7b]">IRQ102_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7c]">IRQ103_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7d]">IRQ104_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7e]">IRQ105_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7f]">IRQ106_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[80]">IRQ107_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[81]">IRQ108_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[82]">IRQ109_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[83]">IRQ110_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[84]">IRQ111_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[85]">IRQ112_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[86]">IRQ113_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[87]">IRQ114_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[88]">IRQ115_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[89]">IRQ116_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8a]">IRQ117_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8b]">IRQ118_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8c]">IRQ119_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8d]">IRQ120_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8e]">IRQ121_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8f]">IRQ122_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[90]">IRQ123_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[91]">IRQ124_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[92]">IRQ125_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[93]">IRQ126_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[94]">IRQ127_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[95]">IRQ128_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[96]">IRQ129_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[97]">IRQ130_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[98]">IRQ131_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[99]">IRQ132_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9a]">IRQ133_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9b]">IRQ134_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9c]">IRQ135_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9d]">IRQ136_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9e]">IRQ137_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9f]">IRQ138_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a0]">IRQ139_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a1]">IRQ140_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a2]">IRQ141_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a3]">IRQ142_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a4]">IRQ143_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[b]">Reset_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from hc32f46x_interrupts.o(i.SysTick_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a6]">SystemInit</a> from system_hc32f46x.o(i.SystemInit) referenced from startup_hc32f46x.o(.text)
 <LI><a href="#[10]">UsageFault_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[db]">lcd_move_x()</a> from menu_motion.o(i._Z10lcd_move_xv) referenced from menu_motion.o(i._Z20LCD_goto_manual_movef8AxisEnum)
 <LI><a href="#[dc]">lcd_move_y()</a> from menu_motion.o(i._Z10lcd_move_yv) referenced from menu_motion.o(i._Z20LCD_goto_manual_movef8AxisEnum)
 <LI><a href="#[dd]">lcd_move_z()</a> from menu_motion.o(i._Z10lcd_move_zv) referenced from menu_motion.o(i._Z20LCD_goto_manual_movef8AxisEnum)
 <LI><a href="#[fd]">menu_media()</a> from menu_media.o(i._Z10menu_mediav) referenced 2 times from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[fd]">menu_media()</a> from menu_media.o(i._Z10menu_mediav) referenced from marlinui.o(i._ZN8MarlinUI13media_changedEhh)
 <LI><a href="#[fd]">menu_media()</a> from menu_media.o(i._Z10menu_mediav) referenced from marlinui.o(i._ZN8MarlinUI6updateEv)
 <LI><a href="#[101]">menu_ready()</a> from menu_main.o(i._Z10menu_readyv) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[ae]">preheat_ABS()</a> from menu_main.o(i._Z11preheat_ABSv) referenced from menu_main.o(i._Z10menu_readyv)
 <LI><a href="#[ad]">preheat_pla()</a> from menu_main.o(i._Z11preheat_plav) referenced from menu_main.o(i._Z10menu_readyv)
 <LI><a href="#[112]">Lcd_set_Fan0()</a> from menu_tune.o(i._Z12Lcd_set_Fan0v) referenced from marlinui.o(i._ZN8MarlinUI13status_screenEv)
 <LI><a href="#[c2]">lcd_cooldown()</a> from menu_temperature.o(i._Z12lcd_cooldownv) referenced from menu_temperature.o(i._Z16menu_temperaturev)
 <LI><a href="#[d9]">lcd_sd_updir()</a> from menu_media.o(i._Z12lcd_sd_updirv) referenced from menu_media.o(i._Z19menu_media_filelistv)
 <LI><a href="#[103]">menu_language()</a> from menu_language.o(i._Z13menu_languagev) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[108]">menu_xyz_home()</a> from menu_motion.o(i._Z13menu_xyz_homev) referenced from menu_motion.o(i._Z9menu_movev)
 <LI><a href="#[c0]">on_fan_update()</a> from menu_temperature.o(i._Z13on_fan_updatev) referenced from menu_temperature.o(i._Z16menu_temperaturev)
 <LI><a href="#[c0]">on_fan_update()</a> from menu_temperature.o(i._Z13on_fan_updatev) referenced from menu_tune.o(i._Z9menu_tunev)
 <LI><a href="#[c7]">menu_edit_mesh()</a> from menu_bed_leveling.o(i._Z14menu_edit_meshv) referenced from menu_bed_leveling.o(i._Z17menu_bed_levelingv)
 <LI><a href="#[c1]">menu_preheat_m()</a> from menu_temperature.o(i._Z14menu_preheat_mv) referenced from menu_temperature.o(i._Z16menu_temperaturev)
 <LI><a href="#[114]">LCD_abort_pring()</a> from menu.o(i._Z15LCD_abort_pringv) referenced from marlinui.o(i._ZN8MarlinUI13status_screenEv)
 <LI><a href="#[b8]">refresh_planner()</a> from menu_bed_leveling.o(i._Z15refresh_plannerv) referenced from menu_bed_leveling.o(i._Z14menu_edit_meshv)
 <LI><a href="#[104]">version_message()</a> from menu_main.o(i._Z15version_messagev) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[113]">Lcd_set_feedrate()</a> from menu_tune.o(i._Z16Lcd_set_feedratev) referenced from marlinui.o(i._ZN8MarlinUI13status_screenEv)
 <LI><a href="#[ba]">do_preheat_end_m()</a> from menu_temperature.o(i._Z16do_preheat_end_mv) referenced from menu_temperature.o(i._Z14menu_preheat_mv)
 <LI><a href="#[111]">lcd_setTargetBED()</a> from menu_temperature.o(i._Z16lcd_setTargetBEDv) referenced from marlinui.o(i._ZN8MarlinUI13status_screenEv)
 <LI><a href="#[d3]">menu_temperature()</a> from menu_temperature.o(i._Z16menu_temperaturev) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[f7]">menu_tmc_current()</a> from menu_tmc.o(i._Z16menu_tmc_currentv) referenced from menu_tmc.o(i._Z8menu_tmcv)
 <LI><a href="#[b5]">Timer01B_CallBack()</a> from tone.o(i._Z17Timer01B_CallBackv) referenced from bsp_timer.o(i._Z13timer01B_initv)
 <LI><a href="#[b6]">Timer02A_CallBack()</a> from bsp_timer.o(i._Z17Timer02A_CallBackv) referenced from bsp_timer.o(i._Z13timer02A_initv)
 <LI><a href="#[b7]">Timer02B_CallBack()</a> from softwareserial.o(i._Z17Timer02B_CallBackv) referenced from bsp_timer.o(i._Z13timer02B_initv)
 <LI><a href="#[100]">menu_bed_leveling()</a> from menu_bed_leveling.o(i._Z17menu_bed_levelingv) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[10b]">menu_job_recovery()</a> from menu_job_recovery.o(i._Z17menu_job_recoveryv) referenced from m1000.o(i._ZN10GcodeSuite5M1000Ev)
 <LI><a href="#[11f]">menu_pause_option()</a> from menu_filament.o(i._Z17menu_pause_optionv) referenced from menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
 <LI><a href="#[123]">preheat_to_move_E()</a> from menu_motion.o(i._Z17preheat_to_move_Ev) referenced from menu_motion.o(i._ZZZ27_menu_move_distance_e_maybevENKUlvE_clEvENUlvE_4_FUNEv)
 <LI><a href="#[e3]">menu_advanced_jerk()</a> from menu_advanced.o(i._Z18menu_advanced_jerkv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[102]">menu_configuration()</a> from menu_configuration.o(i._Z18menu_configurationv) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[e4]">menu_probe_offsets()</a> from menu_advanced.o(i._Z18menu_probe_offsetsv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[f8]">menu_tmc_step_mode()</a> from menu_tmc.o(i._Z18menu_tmc_step_modev) referenced from menu_tmc.o(i._Z8menu_tmcv)
 <LI><a href="#[110]">lcd_setTargetHotend()</a> from menu_temperature.o(i._Z19lcd_setTargetHotendv) referenced from marlinui.o(i._ZN8MarlinUI13status_screenEv)
 <LI><a href="#[d5]">menu_controller_fan()</a> from menu_configuration.o(i._Z19menu_controller_fanv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[ca]">lcd_babystep_zoffset()</a> from menu.o(i._Z20lcd_babystep_zoffsetv) referenced from menu_bed_leveling.o(i._Z17menu_bed_levelingv)
 <LI><a href="#[ca]">lcd_babystep_zoffset()</a> from menu.o(i._Z20lcd_babystep_zoffsetv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[ca]">lcd_babystep_zoffset()</a> from menu.o(i._Z20lcd_babystep_zoffsetv) referenced from menu_tune.o(i._Z9menu_tunev)
 <LI><a href="#[ca]">lcd_babystep_zoffset()</a> from menu.o(i._Z20lcd_babystep_zoffsetv) referenced from marlinui.o(i._ZN8MarlinUI13status_screenEv)
 <LI><a href="#[124]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[11d]">lcd_pause_heat_message()</a> from menu_filament.o(i._Z22lcd_pause_heat_messagev) referenced from menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
 <LI><a href="#[11a]">lcd_pause_load_message()</a> from menu_filament.o(i._Z22lcd_pause_load_messagev) referenced from menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
 <LI><a href="#[d4]">menu_advanced_settings()</a> from menu_advanced.o(i._Z22menu_advanced_settingsv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[e1]">menu_advanced_velocity()</a> from menu_advanced.o(i._Z22menu_advanced_velocityv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[11b]">lcd_pause_purge_message()</a> from menu_filament.o(i._Z23lcd_pause_purge_messagev) referenced from menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
 <LI><a href="#[c8]">_lcd_toggle_bed_leveling()</a> from menu.o(i._Z24_lcd_toggle_bed_levelingv) referenced from menu_bed_leveling.o(i._Z17menu_bed_levelingv)
 <LI><a href="#[119]">lcd_pause_insert_message()</a> from menu_filament.o(i._Z24lcd_pause_insert_messagev) referenced from menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
 <LI><a href="#[11c]">lcd_pause_resume_message()</a> from menu_filament.o(i._Z24lcd_pause_resume_messagev) referenced from menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
 <LI><a href="#[117]">lcd_pause_unload_message()</a> from menu_filament.o(i._Z24lcd_pause_unload_messagev) referenced from menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
 <LI><a href="#[d2]">draw_unload_load_filament()</a> from menu.o(i._Z25draw_unload_load_filamentv) referenced from menu_motion.o(i._Z17preheat_to_move_Ev)
 <LI><a href="#[d2]">draw_unload_load_filament()</a> from menu.o(i._Z25draw_unload_load_filamentv) referenced from menu_motion.o(i._Z27_menu_move_distance_e_maybev)
 <LI><a href="#[11e]">lcd_pause_heating_message()</a> from menu_filament.o(i._Z25lcd_pause_heating_messagev) referenced from menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
 <LI><a href="#[115]">lcd_pause_parking_message()</a> from menu_filament.o(i._Z25lcd_pause_parking_messagev) referenced from menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
 <LI><a href="#[118]">lcd_pause_waiting_message()</a> from menu_filament.o(i._Z25lcd_pause_waiting_messagev) referenced from menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
 <LI><a href="#[b1]">timer41_zero_match_irq_cb()</a> from temperature.o(i._Z25timer41_zero_match_irq_cbv) referenced from bsp_timer.o(i._Z12timer41_initv)
 <LI><a href="#[b2]">timer42_zero_match_irq_cb()</a> from stepper.o(i._Z25timer42_zero_match_irq_cbv) referenced from bsp_timer.o(i._Z12timer42_initv)
 <LI><a href="#[116]">lcd_pause_changing_message()</a> from menu_filament.o(i._Z26lcd_pause_changing_messagev) referenced from menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
 <LI><a href="#[e2]">menu_advanced_acceleration()</a> from menu_advanced.o(i._Z26menu_advanced_accelerationv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[e5]">menu_advanced_steps_per_mm()</a> from menu_advanced.o(i._Z26menu_advanced_steps_per_mmv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[122]">sdcard_start_selected_file()</a> from menu_media.o(i._Z26sdcard_start_selected_filev) referenced from menu_media.o(i._ZZN15MenuItem_sdfile6actionEPKcR10CardReaderENKUlvE_clEv)
 <LI><a href="#[ce]">lcd_power_loss_recovery_cancel()</a> from menu_job_recovery.o(i._Z30lcd_power_loss_recovery_cancelv) referenced from menu_job_recovery.o(i._Z17menu_job_recoveryv)
 <LI><a href="#[d7]">_menu_configuration_preheat_settings()</a> from menu_configuration.o(i._Z36_menu_configuration_preheat_settingsv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[e6]">menu_tmc()</a> from menu_tmc.o(i._Z8menu_tmcv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[10f]">menu_main()</a> from menu_main.o(i._Z9menu_mainv) referenced from marlinui.o(i._ZN8MarlinUI13status_screenEv)
 <LI><a href="#[10f]">menu_main()</a> from menu_main.o(i._Z9menu_mainv) referenced from marlinui.o(i._ZN8MarlinUI6updateEv)
 <LI><a href="#[fe]">menu_move()</a> from menu_motion.o(i._Z9menu_movev) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[fc]">menu_tune()</a> from menu_tune.o(i._Z9menu_tunev) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[fc]">menu_tune()</a> from menu_tune.o(i._Z9menu_tunev) referenced from marlinui.o(i._ZN8MarlinUI13status_screenEv)
 <LI><a href="#[10c]">read_byte(unsigned char*)</a> from tft_string.o(i._Z9read_bytePh) referenced from tft_string.o(i._ZN10TFT_String3addEPhaS0_)
 <LI><a href="#[10c]">read_byte(unsigned char*)</a> from tft_string.o(i._Z9read_bytePh) referenced from tft_string.o(i._ZN10TFT_String3addEPhh)
 <LI><a href="#[bf]">Temperature::start_watching_bed()</a> from temperature.o(i._ZN11Temperature18start_watching_bedEv) referenced from menu_temperature.o(i._Z16menu_temperaturev)
 <LI><a href="#[bf]">Temperature::start_watching_bed()</a> from temperature.o(i._ZN11Temperature18start_watching_bedEv) referenced from menu_tune.o(i._Z9menu_tunev)
 <LI><a href="#[12a]">Temperature::tr_state_machine_t::tr_state_machine_t()</a> from temperature.o(i._ZN11Temperature18tr_state_machine_tC1Ev) referenced from temperature.o(i.__sti___15_temperature_cpp_2f7cf00e)
 <LI><a href="#[139]">TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E6actionEPKcPsssPFvvEb)
 <LI><a href="#[137]">TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E11edit_screenEv)
 <LI><a href="#[138]">TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E11edit_screenEv)
 <LI><a href="#[13c]">TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E6actionEPKcPaaaPFvvEb)
 <LI><a href="#[13a]">TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E11edit_screenEv)
 <LI><a href="#[13b]">TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E11edit_screenEv)
 <LI><a href="#[13f]">TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::edit_screen()</a> from menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E11edit_screenEv) referenced from menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E6actionEPKcPhhhPFvvEb)
 <LI><a href="#[13d]">TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::load(void*, int)</a> from menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E4loadEPvi) referenced from menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E11edit_screenEv)
 <LI><a href="#[13e]">TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::to_string(int)</a> from menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E9to_stringEi) referenced from menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E11edit_screenEv)
 <LI><a href="#[142]">TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E6actionEPKcPfffPFvvEb)
 <LI><a href="#[140]">TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E11edit_screenEv)
 <LI><a href="#[141]">TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E11edit_screenEv)
 <LI><a href="#[145]">TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E6actionEPKcPfffPFvvEb)
 <LI><a href="#[143]">TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E11edit_screenEv)
 <LI><a href="#[144]">TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E11edit_screenEv)
 <LI><a href="#[148]">TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E6actionEPKcPfffPFvvEb)
 <LI><a href="#[146]">TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E11edit_screenEv)
 <LI><a href="#[147]">TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E11edit_screenEv)
 <LI><a href="#[14b]">TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E6actionEPKcPfffPFvvEb)
 <LI><a href="#[149]">TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E11edit_screenEv)
 <LI><a href="#[14a]">TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E11edit_screenEv)
 <LI><a href="#[14e]">TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE6actionEPKcPhhhPFvvEb)
 <LI><a href="#[14c]">TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE11edit_screenEv)
 <LI><a href="#[14d]">TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE11edit_screenEv)
 <LI><a href="#[151]">TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E6actionEPKcPjjjPFvvEb)
 <LI><a href="#[14f]">TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E11edit_screenEv)
 <LI><a href="#[150]">TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E11edit_screenEv)
 <LI><a href="#[154]">TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::edit_screen()</a> from menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E11edit_screenEv) referenced from menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E6actionEPKcPtttPFvvEb)
 <LI><a href="#[152]">TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::load(void*, int)</a> from menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E4loadEPvi) referenced from menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E11edit_screenEv)
 <LI><a href="#[153]">TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::to_string(int)</a> from menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E9to_stringEi) referenced from menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E11edit_screenEv)
 <LI><a href="#[157]">TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E6actionEPKcPfffPFvvEb)
 <LI><a href="#[155]">TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E11edit_screenEv)
 <LI><a href="#[156]">TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E11edit_screenEv)
 <LI><a href="#[15a]">TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE6actionEPKcPfffPFvvEb)
 <LI><a href="#[158]">TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE11edit_screenEv)
 <LI><a href="#[159]">TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE11edit_screenEv)
 <LI><a href="#[15d]">TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::edit_screen()</a> from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE11edit_screenEv) referenced from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE6actionEPKcPfffPFvvEb)
 <LI><a href="#[15b]">TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::load(void*, int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE4loadEPvi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE11edit_screenEv)
 <LI><a href="#[15c]">TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::to_string(int)</a> from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE9to_stringEi) referenced from menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE11edit_screenEv)
 <LI><a href="#[163]">HardwareSerial::read()</a> from hardwareserial.o(i._ZN14HardwareSerial4readEv) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[161]">HardwareSerial::flush()</a> from hardwareserial.o(i._ZN14HardwareSerial5flushEv) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[15f]">HardwareSerial::write(unsigned char)</a> from hardwareserial.o(i._ZN14HardwareSerial5writeEh) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[162]">HardwareSerial::available()</a> from hardwareserial.o(i._ZN14HardwareSerial9availableEv) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[166]">SoftwareSerial::read()</a> from softwareserial.o(i._ZN14SoftwareSerial4readEv) referenced from softwareserial.o(.constdata__ZTV14SoftwareSerial)
 <LI><a href="#[164]">SoftwareSerial::write(unsigned char)</a> from softwareserial.o(i._ZN14SoftwareSerial5writeEh) referenced from softwareserial.o(.constdata__ZTV14SoftwareSerial)
 <LI><a href="#[165]">SoftwareSerial::available()</a> from softwareserial.o(i._ZN14SoftwareSerial9availableEv) referenced from softwareserial.o(.constdata__ZTV14SoftwareSerial)
 <LI><a href="#[16b]">TMC2208Stepper::DRV_STATUS()</a> from drv_status.o(i._ZN14TMC2208Stepper10DRV_STATUSEv) referenced from chopconf.o(.constdata__ZTV14TMC2208Stepper)
 <LI><a href="#[16b]">TMC2208Stepper::DRV_STATUS()</a> from drv_status.o(i._ZN14TMC2208Stepper10DRV_STATUSEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
 <LI><a href="#[16b]">TMC2208Stepper::DRV_STATUS()</a> from drv_status.o(i._ZN14TMC2208Stepper10DRV_STATUSEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
 <LI><a href="#[16b]">TMC2208Stepper::DRV_STATUS()</a> from drv_status.o(i._ZN14TMC2208Stepper10DRV_STATUSEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
 <LI><a href="#[16b]">TMC2208Stepper::DRV_STATUS()</a> from drv_status.o(i._ZN14TMC2208Stepper10DRV_STATUSEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
 <LI><a href="#[16f]">TMC2208Stepper::tbl()</a> from chopconf.o(i._ZN14TMC2208Stepper3tblEv) referenced from chopconf.o(.constdata__ZTV14TMC2208Stepper)
 <LI><a href="#[16f]">TMC2208Stepper::tbl()</a> from chopconf.o(i._ZN14TMC2208Stepper3tblEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
 <LI><a href="#[16f]">TMC2208Stepper::tbl()</a> from chopconf.o(i._ZN14TMC2208Stepper3tblEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
 <LI><a href="#[16f]">TMC2208Stepper::tbl()</a> from chopconf.o(i._ZN14TMC2208Stepper3tblEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
 <LI><a href="#[16f]">TMC2208Stepper::tbl()</a> from chopconf.o(i._ZN14TMC2208Stepper3tblEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
 <LI><a href="#[16c]">TMC2208Stepper::hend()</a> from chopconf.o(i._ZN14TMC2208Stepper4hendEv) referenced from chopconf.o(.constdata__ZTV14TMC2208Stepper)
 <LI><a href="#[16c]">TMC2208Stepper::hend()</a> from chopconf.o(i._ZN14TMC2208Stepper4hendEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
 <LI><a href="#[16c]">TMC2208Stepper::hend()</a> from chopconf.o(i._ZN14TMC2208Stepper4hendEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
 <LI><a href="#[16c]">TMC2208Stepper::hend()</a> from chopconf.o(i._ZN14TMC2208Stepper4hendEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
 <LI><a href="#[16c]">TMC2208Stepper::hend()</a> from chopconf.o(i._ZN14TMC2208Stepper4hendEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
 <LI><a href="#[16e]">TMC2208Stepper::mres()</a> from chopconf.o(i._ZN14TMC2208Stepper4mresEv) referenced from chopconf.o(.constdata__ZTV14TMC2208Stepper)
 <LI><a href="#[16e]">TMC2208Stepper::mres()</a> from chopconf.o(i._ZN14TMC2208Stepper4mresEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
 <LI><a href="#[16e]">TMC2208Stepper::mres()</a> from chopconf.o(i._ZN14TMC2208Stepper4mresEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
 <LI><a href="#[16e]">TMC2208Stepper::mres()</a> from chopconf.o(i._ZN14TMC2208Stepper4mresEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
 <LI><a href="#[16e]">TMC2208Stepper::mres()</a> from chopconf.o(i._ZN14TMC2208Stepper4mresEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
 <LI><a href="#[168]">TMC2208Stepper::read(unsigned char)</a> from tmc2208stepper.o(i._ZN14TMC2208Stepper4readEh) referenced from chopconf.o(.constdata__ZTV14TMC2208Stepper)
 <LI><a href="#[168]">TMC2208Stepper::read(unsigned char)</a> from tmc2208stepper.o(i._ZN14TMC2208Stepper4readEh) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
 <LI><a href="#[168]">TMC2208Stepper::read(unsigned char)</a> from tmc2208stepper.o(i._ZN14TMC2208Stepper4readEh) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
 <LI><a href="#[168]">TMC2208Stepper::read(unsigned char)</a> from tmc2208stepper.o(i._ZN14TMC2208Stepper4readEh) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
 <LI><a href="#[168]">TMC2208Stepper::read(unsigned char)</a> from tmc2208stepper.o(i._ZN14TMC2208Stepper4readEh) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
 <LI><a href="#[16d]">TMC2208Stepper::hstrt()</a> from chopconf.o(i._ZN14TMC2208Stepper5hstrtEv) referenced from chopconf.o(.constdata__ZTV14TMC2208Stepper)
 <LI><a href="#[16d]">TMC2208Stepper::hstrt()</a> from chopconf.o(i._ZN14TMC2208Stepper5hstrtEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
 <LI><a href="#[16d]">TMC2208Stepper::hstrt()</a> from chopconf.o(i._ZN14TMC2208Stepper5hstrtEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
 <LI><a href="#[16d]">TMC2208Stepper::hstrt()</a> from chopconf.o(i._ZN14TMC2208Stepper5hstrtEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
 <LI><a href="#[16d]">TMC2208Stepper::hstrt()</a> from chopconf.o(i._ZN14TMC2208Stepper5hstrtEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
 <LI><a href="#[167]">TMC2208Stepper::write(unsigned char, unsigned)</a> from tmc2208stepper.o(i._ZN14TMC2208Stepper5writeEhj) referenced from chopconf.o(.constdata__ZTV14TMC2208Stepper)
 <LI><a href="#[167]">TMC2208Stepper::write(unsigned char, unsigned)</a> from tmc2208stepper.o(i._ZN14TMC2208Stepper5writeEhj) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
 <LI><a href="#[167]">TMC2208Stepper::write(unsigned char, unsigned)</a> from tmc2208stepper.o(i._ZN14TMC2208Stepper5writeEhj) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
 <LI><a href="#[167]">TMC2208Stepper::write(unsigned char, unsigned)</a> from tmc2208stepper.o(i._ZN14TMC2208Stepper5writeEhj) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
 <LI><a href="#[167]">TMC2208Stepper::write(unsigned char, unsigned)</a> from tmc2208stepper.o(i._ZN14TMC2208Stepper5writeEhj) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
 <LI><a href="#[169]">TMC2208Stepper::vsense(bool)</a> from chopconf.o(i._ZN14TMC2208Stepper6vsenseEb) referenced from chopconf.o(.constdata__ZTV14TMC2208Stepper)
 <LI><a href="#[169]">TMC2208Stepper::vsense(bool)</a> from chopconf.o(i._ZN14TMC2208Stepper6vsenseEb) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
 <LI><a href="#[169]">TMC2208Stepper::vsense(bool)</a> from chopconf.o(i._ZN14TMC2208Stepper6vsenseEb) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
 <LI><a href="#[169]">TMC2208Stepper::vsense(bool)</a> from chopconf.o(i._ZN14TMC2208Stepper6vsenseEb) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
 <LI><a href="#[169]">TMC2208Stepper::vsense(bool)</a> from chopconf.o(i._ZN14TMC2208Stepper6vsenseEb) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
 <LI><a href="#[16a]">TMC2208Stepper::vsense()</a> from chopconf.o(i._ZN14TMC2208Stepper6vsenseEv) referenced from chopconf.o(.constdata__ZTV14TMC2208Stepper)
 <LI><a href="#[16a]">TMC2208Stepper::vsense()</a> from chopconf.o(i._ZN14TMC2208Stepper6vsenseEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
 <LI><a href="#[16a]">TMC2208Stepper::vsense()</a> from chopconf.o(i._ZN14TMC2208Stepper6vsenseEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
 <LI><a href="#[16a]">TMC2208Stepper::vsense()</a> from chopconf.o(i._ZN14TMC2208Stepper6vsenseEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
 <LI><a href="#[16a]">TMC2208Stepper::vsense()</a> from chopconf.o(i._ZN14TMC2208Stepper6vsenseEv) referenced from trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
 <LI><a href="#[d6]">PrintJobRecovery::changed()</a> from powerloss.o(i._ZN16PrintJobRecovery7changedEv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[d0]">TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::reset()</a> from menu_configuration.o(t._ZN16TFilamentMonitorI23RunoutResponseDebounced20FilamentSensorSwitchE5resetEv) referenced from menu_filament.o(i._Z17menu_pause_optionv)
 <LI><a href="#[d0]">TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::reset()</a> from menu_configuration.o(t._ZN16TFilamentMonitorI23RunoutResponseDebounced20FilamentSensorSwitchE5resetEv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[de]">[local to menu_motion_cpp]::lcd_move_e()</a> from menu_motion.o(i._ZN37_INTERNAL_15_menu_motion_cpp_1861504310lcd_move_eEv) referenced from menu_motion.o(i._Z20LCD_goto_manual_movef8AxisEnum)
 <LI><a href="#[ab]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[cd]">[local to menu_job_recovery_cpp]::lcd_power_loss_recovery_resume()</a> from menu_job_recovery.o(i._ZN43_INTERNAL_21_menu_job_recovery_cpp_ae259b3f30lcd_power_loss_recovery_resumeEv) referenced from menu_job_recovery.o(i._Z17menu_job_recoveryv)
 <LI><a href="#[160]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[160]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from softwareserial.o(.constdata__ZTV14SoftwareSerial)
 <LI><a href="#[160]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[160]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from stream.o(.constdata__ZTV6Stream)
 <LI><a href="#[fb]">Repeat::cancel()</a> from repeat.o(i._ZN6Repeat6cancelEv) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[128]">SdFile::SdFile()</a> from cardreader.o(i._ZN6SdFileC1Ev) referenced from cardreader.o(i.__sti___14_cardreader_cpp_29701c05)
 <LI><a href="#[ac]">SdFile::~SdFile()</a> from powerloss.o(i._ZN6SdFileD1Ev) referenced from cardreader.o(i.<Func69>)
 <LI><a href="#[ac]">SdFile::~SdFile()</a> from powerloss.o(i._ZN6SdFileD1Ev) referenced from cardreader.o(i._ZN10CardReader10diveToFileEbRP6SdFilePKcb)
 <LI><a href="#[ac]">SdFile::~SdFile()</a> from powerloss.o(i._ZN6SdFileD1Ev) referenced from powerloss.o(i.__sti___13_powerloss_cpp_1e506b3c)
 <LI><a href="#[ac]">SdFile::~SdFile()</a> from powerloss.o(i._ZN6SdFileD1Ev) referenced from cardreader.o(i.__sti___14_cardreader_cpp_29701c05)
 <LI><a href="#[ed]">Planner::refresh_frequency_limit()</a> from menu_advanced.o(i._ZN7Planner23refresh_frequency_limitEv) referenced 2 times from menu_advanced.o(i._Z26menu_advanced_accelerationv)
 <LI><a href="#[bc]">MarlinUI::abort_print()</a> from marlinui.o(i._ZN8MarlinUI11abort_printEv) referenced from menu.o(i._Z15LCD_abort_pringv)
 <LI><a href="#[bc]">MarlinUI::abort_print()</a> from marlinui.o(i._ZN8MarlinUI11abort_printEv) referenced from menu_main.o(i._ZZ9menu_mainvENKUlvE_clEv)
 <LI><a href="#[e8]">MarlinUI::init_eeprom()</a> from marlinui.o(i._ZN8MarlinUI11init_eepromEv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[e8]">MarlinUI::init_eeprom()</a> from marlinui.o(i._ZN8MarlinUI11init_eepromEv) referenced from menu_advanced.o(i._ZZ22menu_advanced_settingsvENKUlvE1_clEv)
 <LI><a href="#[f9]">MarlinUI::pause_print()</a> from marlinui.o(i._ZN8MarlinUI11pause_printEv) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[ff]">MarlinUI::resume_print()</a> from marlinui.o(i._ZN8MarlinUI12resume_printEv) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[cc]">MarlinUI::load_settings()</a> from marlinui.o(i._ZN8MarlinUI13load_settingsEv) referenced from menu_bed_leveling.o(i._Z17menu_bed_levelingv)
 <LI><a href="#[cc]">MarlinUI::load_settings()</a> from marlinui.o(i._ZN8MarlinUI13load_settingsEv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[10d]">MarlinUI::status_screen()</a> from marlinui.o(i._ZN8MarlinUI13status_screenEv) referenced from menu.o(i._ZN8MarlinUI11goto_screenEPFvvEthh)
 <LI><a href="#[10d]">MarlinUI::status_screen()</a> from marlinui.o(i._ZN8MarlinUI13status_screenEv) referenced from marlinui.o(i._ZN8MarlinUI14reset_settingsEv)
 <LI><a href="#[10d]">MarlinUI::status_screen()</a> from marlinui.o(i._ZN8MarlinUI13status_screenEv) referenced from marlinui.o(i._ZN8MarlinUI16on_status_screenEv)
 <LI><a href="#[10d]">MarlinUI::status_screen()</a> from marlinui.o(i._ZN8MarlinUI13status_screenEv) referenced from menu.o(i._ZN8MarlinUI16return_to_statusEv)
 <LI><a href="#[10d]">MarlinUI::status_screen()</a> from marlinui.o(i._ZN8MarlinUI13status_screenEv) referenced from marlinui.o(i._ZZN8MarlinUI6updateEvENKUlvE_clEv)
 <LI><a href="#[10d]">MarlinUI::status_screen()</a> from marlinui.o(i._ZN8MarlinUI13status_screenEv) referenced from marlinui.o(i.__sti___12_marlinui_cpp_ui)
 <LI><a href="#[d8]">MarlinUI::reset_settings()</a> from marlinui.o(i._ZN8MarlinUI14reset_settingsEv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[cb]">MarlinUI::store_settings()</a> from marlinui.o(i._ZN8MarlinUI14store_settingsEv) referenced from menu_bed_leveling.o(i._Z17menu_bed_levelingv)
 <LI><a href="#[cb]">MarlinUI::store_settings()</a> from marlinui.o(i._ZN8MarlinUI14store_settingsEv) referenced from menu_configuration.o(i._Z18menu_configurationv)
 <LI><a href="#[cb]">MarlinUI::store_settings()</a> from marlinui.o(i._ZN8MarlinUI14store_settingsEv) referenced 2 times from menu_configuration.o(i._Z36_menu_configuration_preheat_settingsv)
 <LI><a href="#[bd]">MarlinUI::return_to_status()</a> from menu.o(i._ZN8MarlinUI16return_to_statusEv) referenced from menu.o(i._Z15LCD_abort_pringv)
 <LI><a href="#[121]">MarlinUI::goto_previous_screen()</a> from menu.o(i._ZN8MarlinUI20goto_previous_screenEv) referenced from menu_motion.o(i._ZZ27_menu_move_distance_e_maybevENKUlvE_clEv)
 <LI><a href="#[121]">MarlinUI::goto_previous_screen()</a> from menu.o(i._ZN8MarlinUI20goto_previous_screenEv) referenced from menu_main.o(i._ZZ9menu_mainvENKUlvE_clEv)
 <LI><a href="#[121]">MarlinUI::goto_previous_screen()</a> from menu.o(i._ZN8MarlinUI20goto_previous_screenEv) referenced from menu_media.o(i._ZZN15MenuItem_sdfile6actionEPKcR10CardReaderENKUlvE_clEv)
 <LI><a href="#[b0]">menu_ready()::[lambda() (instance 3)]::_FUN()</a> from menu_main.o(i._ZZ10menu_readyvENUlvE1_4_FUNEv) referenced from menu_main.o(i._Z10menu_readyv)
 <LI><a href="#[af]">menu_ready()::[lambda() (instance 1)]::_FUN()</a> from menu_main.o(i._ZZ10menu_readyvENUlvE_4_FUNEv) referenced from menu_main.o(i._Z10menu_readyv)
 <LI><a href="#[b4]">menu_language()::[lambda() (instance 3)]::_FUN()</a> from menu_language.o(i._ZZ13menu_languagevENUlvE1_4_FUNEv) referenced from menu_language.o(i._Z13menu_languagev)
 <LI><a href="#[b3]">menu_language()::[lambda() (instance 1)]::_FUN()</a> from menu_language.o(i._ZZ13menu_languagevENUlvE_4_FUNEv) referenced from menu_language.o(i._Z13menu_languagev)
 <LI><a href="#[bb]">menu_preheat_m()::[lambda() (instance 3)]::_FUN()</a> from menu_temperature.o(i._ZZ14menu_preheat_mvENUlvE1_4_FUNEv) referenced from menu_temperature.o(i._Z14menu_preheat_mv)
 <LI><a href="#[b9]">menu_preheat_m()::[lambda() (instance 1)]::_FUN()</a> from menu_temperature.o(i._ZZ14menu_preheat_mvENUlvE_4_FUNEv) referenced from menu_temperature.o(i._Z14menu_preheat_mv)
 <LI><a href="#[be]">menu_temperature()::[lambda() (instance 1)]::_FUN()</a> from menu_temperature.o(i._ZZ16menu_temperaturevENUlvE_4_FUNEv) referenced from menu_temperature.o(i._Z16menu_temperaturev)
 <LI><a href="#[c4]">menu_tmc_current()::[lambda() (instance 3)]::_FUN()</a> from menu_tmc.o(i._ZZ16menu_tmc_currentvENUlvE1_4_FUNEv) referenced from menu_tmc.o(i._Z16menu_tmc_currentv)
 <LI><a href="#[c5]">menu_tmc_current()::[lambda() (instance 5)]::_FUN()</a> from menu_tmc.o(i._ZZ16menu_tmc_currentvENUlvE3_4_FUNEv) referenced from menu_tmc.o(i._Z16menu_tmc_currentv)
 <LI><a href="#[c6]">menu_tmc_current()::[lambda() (instance 7)]::_FUN()</a> from menu_tmc.o(i._ZZ16menu_tmc_currentvENUlvE5_4_FUNEv) referenced from menu_tmc.o(i._Z16menu_tmc_currentv)
 <LI><a href="#[c3]">menu_tmc_current()::[lambda() (instance 1)]::_FUN()</a> from menu_tmc.o(i._ZZ16menu_tmc_currentvENUlvE_4_FUNEv) referenced from menu_tmc.o(i._Z16menu_tmc_currentv)
 <LI><a href="#[c9]">menu_bed_leveling()::[lambda() (instance 1)]::_FUN()</a> from menu_bed_leveling.o(i._ZZ17menu_bed_levelingvENUlvE_4_FUNEv) referenced from menu_bed_leveling.o(i._Z17menu_bed_levelingv)
 <LI><a href="#[d1]">menu_pause_option()::[lambda() (instance 3)]::_FUN()</a> from menu_filament.o(i._ZZ17menu_pause_optionvENUlvE1_4_FUNEv) referenced from menu_filament.o(i._Z17menu_pause_optionv)
 <LI><a href="#[cf]">menu_pause_option()::[lambda() (instance 1)]::_FUN()</a> from menu_filament.o(i._ZZ17menu_pause_optionvENUlvE_4_FUNEv) referenced from menu_filament.o(i._Z17menu_pause_optionv)
 <LI><a href="#[df]">LCD_goto_manual_move(float, AxisEnum)::[lambda() (instance 1)]::_FUN()</a> from menu_motion.o(i._ZZ20LCD_goto_manual_movef8AxisEnumENUlvE_4_FUNEv) referenced from menu_motion.o(i._Z20LCD_goto_manual_movef8AxisEnum)
 <LI><a href="#[e7]">menu_advanced_settings()::[lambda() (instance 3)]::_FUN()</a> from menu_advanced.o(i._ZZ22menu_advanced_settingsvENUlvE1_4_FUNEv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[e0]">menu_advanced_settings()::[lambda() (instance 1)]::_FUN()</a> from menu_advanced.o(i._ZZ22menu_advanced_settingsvENUlvE_4_FUNEv) referenced from menu_advanced.o(i._Z22menu_advanced_settingsv)
 <LI><a href="#[ea]">menu_advanced_acceleration()::[lambda() (instance 3)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE1_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_accelerationv)
 <LI><a href="#[eb]">menu_advanced_acceleration()::[lambda() (instance 5)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE3_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_accelerationv)
 <LI><a href="#[ec]">menu_advanced_acceleration()::[lambda() (instance 7)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE5_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_accelerationv)
 <LI><a href="#[ee]">menu_advanced_acceleration()::[lambda() (instance 9)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE7_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_accelerationv)
 <LI><a href="#[e9]">menu_advanced_acceleration()::[lambda() (instance 1)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_accelerationv)
 <LI><a href="#[f0]">menu_advanced_steps_per_mm()::[lambda() (instance 3)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE1_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
 <LI><a href="#[f1]">menu_advanced_steps_per_mm()::[lambda() (instance 5)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE3_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
 <LI><a href="#[f2]">menu_advanced_steps_per_mm()::[lambda() (instance 7)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE5_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
 <LI><a href="#[ef]">menu_advanced_steps_per_mm()::[lambda() (instance 1)]::_FUN()</a> from menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE_4_FUNEv) referenced from menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
 <LI><a href="#[f3]">_menu_move_distance_e_maybe()::[lambda() (instance 1)]::_FUN()</a> from menu_motion.o(i._ZZ27_menu_move_distance_e_maybevENUlvE_4_FUNEv) referenced from menu_motion.o(i._Z27_menu_move_distance_e_maybev)
 <LI><a href="#[f4]">print_bilinear_leveling_grid()::[lambda(unsigned char, unsigned char) (instance 1)]::_FUN(unsigned char, unsigned char)</a> from abl.o(i._ZZ28print_bilinear_leveling_gridvENUlhhE_4_FUNEhh) referenced from abl.o(i._Z28print_bilinear_leveling_gridv)
 <LI><a href="#[f5]">print_bilinear_leveling_grid_virt()::[lambda(unsigned char, unsigned char) (instance 1)]::_FUN(unsigned char, unsigned char)</a> from abl.o(i._ZZ33print_bilinear_leveling_grid_virtvENUlhhE_4_FUNEhh) referenced from abl.o(i._Z33print_bilinear_leveling_grid_virtv)
 <LI><a href="#[f6]">_menu_configuration_preheat_settings()::[lambda() (instance 1)]::_FUN()</a> from menu_configuration.o(i._ZZ36_menu_configuration_preheat_settingsvENUlvE_4_FUNEv) referenced from menu_configuration.o(i._Z36_menu_configuration_preheat_settingsv)
 <LI><a href="#[fa]">menu_main()::[lambda() (instance 1)]::_FUN()</a> from menu_main.o(i._ZZ9menu_mainvENUlvE_4_FUNEv) referenced from menu_main.o(i._Z9menu_mainv)
 <LI><a href="#[106]">menu_move()::[lambda() (instance 3)]::_FUN()</a> from menu_motion.o(i._ZZ9menu_movevENUlvE1_4_FUNEv) referenced from menu_motion.o(i._Z9menu_movev)
 <LI><a href="#[107]">menu_move()::[lambda() (instance 5)]::_FUN()</a> from menu_motion.o(i._ZZ9menu_movevENUlvE3_4_FUNEv) referenced from menu_motion.o(i._Z9menu_movev)
 <LI><a href="#[105]">menu_move()::[lambda() (instance 1)]::_FUN()</a> from menu_motion.o(i._ZZ9menu_movevENUlvE_4_FUNEv) referenced from menu_motion.o(i._Z9menu_movev)
 <LI><a href="#[10a]">menu_tune()::[lambda() (instance 3)]::_FUN()</a> from menu_tune.o(i._ZZ9menu_tunevENUlvE1_4_FUNEv) referenced from menu_tune.o(i._Z9menu_tunev)
 <LI><a href="#[109]">menu_tune()::[lambda() (instance 1)]::_FUN()</a> from menu_tune.o(i._ZZ9menu_tunevENUlvE_4_FUNEv) referenced from menu_tune.o(i._Z9menu_tunev)
 <LI><a href="#[da]">MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::_FUN()</a> from menu_media.o(i._ZZN15MenuItem_sdfile6actionEPKcR10CardReaderENUlvE_4_FUNEv) referenced from menu_media.o(i._Z19menu_media_filelistv)
 <LI><a href="#[10e]">MarlinUI::synchronize(const char*)::[lambda() (instance 1)]::_FUN()</a> from menu.o(i._ZZN8MarlinUI11synchronizeEPKcENUlvE_4_FUNEv) referenced from menu.o(i._ZN8MarlinUI11synchronizeEPKc)
 <LI><a href="#[120]">_menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 1)]::_FUN()</a> from menu_motion.o(i._ZZZ27_menu_move_distance_e_maybevENKUlvE_clEvENUlvE_4_FUNEv) referenced from menu_motion.o(i._ZZ27_menu_move_distance_e_maybevENKUlvE_clEv)
 <LI><a href="#[15e]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 13 times from tmc2208stepper.o(.constdata__ZTV10TMCStepper)
 <LI><a href="#[15e]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[15e]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 5 times from stream.o(.constdata__ZTV6Stream)
 <LI><a href="#[a7]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32f46x.o(.text)
 <LI><a href="#[179]">__sti___10_buzzer_cpp_f84fbc67</a> from buzzer.o(i.__sti___10_buzzer_cpp_f84fbc67) referenced from buzzer.o(.init_array)
 <LI><a href="#[17a]">__sti___11_encoder_cpp_95db355f</a> from encoder.o(i.__sti___11_encoder_cpp_95db355f) referenced from encoder.o(.init_array)
 <LI><a href="#[17c]">__sti___11_planner_cpp_planner</a> from planner.o(i.__sti___11_planner_cpp_planner) referenced from planner.o(.init_array)
 <LI><a href="#[170]">__sti___12_board_gpio_c_PIN_MAP</a> from board_gpio.o(i.__sti___12_board_gpio_c_PIN_MAP) referenced from board_gpio.o(.init_array)
 <LI><a href="#[172]">__sti___12_e_parser_cpp_ec3e43ca</a> from e_parser.o(i.__sti___12_e_parser_cpp_ec3e43ca) referenced from e_parser.o(.init_array)
 <LI><a href="#[17b]">__sti___12_endstops_cpp_endstops</a> from endstops.o(i.__sti___12_endstops_cpp_endstops) referenced from endstops.o(.init_array)
 <LI><a href="#[176]">__sti___12_marlinui_cpp_ui</a> from marlinui.o(i.__sti___12_marlinui_cpp_ui) referenced from marlinui.o(.init_array)
 <LI><a href="#[17f]">__sti___12_trinamic_cpp_stepperX</a> from trinamic.o(i.__sti___12_trinamic_cpp_stepperX) referenced from trinamic.o(.init_array)
 <LI><a href="#[174]">__sti___13_powerloss_cpp_1e506b3c</a> from powerloss.o(i.__sti___13_powerloss_cpp_1e506b3c) referenced from powerloss.o(.init_array)
 <LI><a href="#[177]">__sti___13_tft_image_cpp_NoLogo</a> from tft_image.o(i.__sti___13_tft_image_cpp_NoLogo) referenced from tft_image.o(.init_array)
 <LI><a href="#[171]">__sti___14_MarlinCore_cpp_card</a> from marlincore.o(i.__sti___14_MarlinCore_cpp_card) referenced from marlincore.o(.init_array)
 <LI><a href="#[180]">__sti___14_cardreader_cpp_29701c05</a> from cardreader.o(i.__sti___14_cardreader_cpp_29701c05) referenced from cardreader.o(.init_array)
 <LI><a href="#[178]">__sti___14_ui_320x240_cpp_d571d997</a> from ui_320x240.o(i.__sti___14_ui_320x240_cpp_d571d997) referenced from ui_320x240.o(.init_array)
 <LI><a href="#[17e]">__sti___15_temperature_cpp_2f7cf00e</a> from temperature.o(i.__sti___15_temperature_cpp_2f7cf00e) referenced from temperature.o(.init_array)
 <LI><a href="#[173]">__sti___17_power_monitor_cpp_21bb0df9</a> from power_monitor.o(i.__sti___17_power_monitor_cpp_21bb0df9) referenced from power_monitor.o(.init_array)
 <LI><a href="#[17d]">__sti___9_probe_cpp_ae5cdc06</a> from probe.o(i.__sti___9_probe_cpp_ae5cdc06) referenced from probe.o(.init_array)
 <LI><a href="#[175]">__sti___9_queue_cpp_queue</a> from queue.o(i.__sti___9_queue_cpp_queue) referenced from queue.o(.init_array)
 <LI><a href="#[a9]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[a8]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[127]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[126]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[125]">fputc</a> from hc32f46x_utility.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[aa]">isspace</a> from wstring.o(i.isspace) referenced from strtod.o(.text)
 <LI><a href="#[a5]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a7]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(.text)
</UL>
<P><STRONG><a name="[6c4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[184]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1b5]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6c5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[186]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[6c6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[6c7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[6c8]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[6c9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[187]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[6ca]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ100_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ100_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ100_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ101_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ102_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ103_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ104_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ105_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ106_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ107_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ108_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ109_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ110_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ111_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ112_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ113_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ114_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ115_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ116_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ117_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ118_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ119_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ120_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ121_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ122_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ123_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ124_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ125_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ126_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ127_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ128_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ129_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ130_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ131_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ132_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>IRQ136_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>IRQ137_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>IRQ138_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>IRQ139_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>IRQ140_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>IRQ141_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>IRQ142_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>IRQ143_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1ba]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func69&rang;
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetClkSyncBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetUartBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[6cb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6cc]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[190]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[675]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random
</UL>

<P><STRONG><a name="[6cd]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[6ce]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[3fa]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[3ca]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_buffer_fill
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::load()
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printLongPath(char*)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cdup()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByIndex(unsigned short)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cdroot()
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countFilesInWorkDir()
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[6cf]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6d0]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6d1]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[6d2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6d3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui8tostr3rj(unsigned char)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr5rj(const float&)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr52sign(const float&)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr41sign(const float&)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr31sign(const float&)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i16tostr3rj(short)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr42_52(const float&)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i8tostr3rj(signed char)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr51rj(const float&)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr43sign(const float&, char)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr53sign(const float&)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui16tostr4rj(unsigned short)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr63(const float&)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pct16tostrpctrj(unsigned short)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcttostrpctrj(unsigned char)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui16tostr3rj(unsigned short)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr52(const float&)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui16tostr5rj(unsigned short)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[28b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_clock
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init()
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::CardReader()
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
</UL>

<P><STRONG><a name="[6d4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3a9]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[406]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[3c7]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[3c6]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[321]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printLongPath(char*)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const char*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[4e5]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[3a8]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::_enqueue(const char*, bool)
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[537]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[407]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[18f]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strcasecmp
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
</UL>

<P><STRONG><a name="[191]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeat::early_parse_M808(char*)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M600()
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M110()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M26()
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::ushortval(char, unsigned short)
</UL>

<P><STRONG><a name="[195]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
</UL>

<P><STRONG><a name="[183]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_powerloss_cpp_1e506b3c
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_cardreader_cpp_29701c05
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::cs2rms(unsigned char)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current(unsigned short)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to G28_cpp]::quick_home_xy()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::run_z_probe(bool)
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current(unsigned short)
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_init()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::cs2rms(unsigned char)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current(unsigned short)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_spaces(unsigned char)
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to G28_cpp]::quick_home_xy()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_babystep_zoffset()
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::cs2rms(unsigned char)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current(unsigned short)
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to G28_cpp]::quick_home_xy()
</UL>

<P><STRONG><a name="[1a2]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_init()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current(unsigned short)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_spaces(unsigned char)
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_babystep_zoffset()
</UL>

<P><STRONG><a name="[1a4]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_init()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::cs2rms(unsigned char)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current(unsigned short)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_spaces(unsigned char)
</UL>

<P><STRONG><a name="[24b]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::cs2rms(unsigned char)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current(unsigned short)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_2d_array(unsigned char, unsigned char, unsigned char, float(*)(unsigned char, unsigned char))
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()::[lambda(bool, const float&, const float&, const float&, const float&, bool) (instance 1)]::operator ()(bool, const float&, const float&, const float&, const float&, bool) const
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to G28_cpp]::quick_home_xy()
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_xyze(const XYZEval&lang;float&rang;&, unsigned char, unsigned char)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_babystep_zoffset()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_and_warn(float&, unsigned char, const char*, const XYZEval&lang;float&rang;&)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::run_z_probe(bool)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(const float&, const float&, float, heater_id_t)
</UL>

<P><STRONG><a name="[649]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[292]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_and_warn(float&, unsigned char, const char*, const XYZEval&lang;float&rang;&)
</UL>

<P><STRONG><a name="[291]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[1a5]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to G28_cpp]::quick_home_xy()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_and_warn(float&, unsigned char, const char*, const XYZEval&lang;float&rang;&)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::run_z_probe(bool)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[124]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[6d5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[65b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[6d6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1ab]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>

<P><STRONG><a name="[1ac]"></a>__strtof_int</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, strtof.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>

<P><STRONG><a name="[6d7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[641]"></a>__rt_new_handler_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[1b3]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[646]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[188]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[1a6]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
</UL>

<P><STRONG><a name="[6d8]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>

<P><STRONG><a name="[19c]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[19b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[1b0]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1b1]"></a>_ffix_r</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ffix_r
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>

<P><STRONG><a name="[6d9]"></a>__fp_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fpstat.o(.text), UNUSED)

<P><STRONG><a name="[64a]"></a>__ieee_status</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fpstat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[1a7]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[1b2]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[185]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[6da]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1aa]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[1b8]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[a8]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[6db]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[6dc]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[6dd]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[6de]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[6df]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[59c]"></a>ADC_AddAdcChannel</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, hc32f46x_adc.o(i.ADC_AddAdcChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_AddAdcChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_adc_cpp]::AdcChannelConfig()
</UL>

<P><STRONG><a name="[59a]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hc32f46x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_adc_cpp]::AdcInitConfig()
</UL>

<P><STRONG><a name="[65e]"></a>ADC_StartConvert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_adc.o(i.ADC_StartConvert))
<BR><BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[59e]"></a>ADC_TriggerSrcCmd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hc32f46x_adc.o(i.ADC_TriggerSrcCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_TriggerSrcCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_adc_cpp]::AdcTriggerConfig()
</UL>

<P><STRONG><a name="[12c]"></a>BSP_USART1_EIIrqHander</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp_irq.o(i.BSP_USART1_EIIrqHander))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_USART1_EIIrqHander
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_init.o(i.uart1_init)
</UL>
<P><STRONG><a name="[12b]"></a>BSP_USART1_RIIrqHander</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_irq.o(i.BSP_USART1_RIIrqHander))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_USART1_RIIrqHander &rArr; HardwareSerial::_rx_complete_callback(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::_rx_complete_callback(unsigned char)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_init.o(i.uart1_init)
</UL>
<P><STRONG><a name="[12e]"></a>BSP_USART1_TCIIrqHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_irq.o(i.BSP_USART1_TCIIrqHander))
<BR>[Address Reference Count : 1]<UL><LI> bsp_init.o(i.uart1_init)
</UL>
<P><STRONG><a name="[12d]"></a>BSP_USART1_TIrqHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_irq.o(i.BSP_USART1_TIrqHander))
<BR>[Address Reference Count : 1]<UL><LI> bsp_init.o(i.uart1_init)
</UL>
<P><STRONG><a name="[130]"></a>BSP_USART2_EIIrqHander</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp_irq.o(i.BSP_USART2_EIIrqHander))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_USART2_EIIrqHander
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_init.o(i.uart2_init)
</UL>
<P><STRONG><a name="[12f]"></a>BSP_USART2_RIIrqHander</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_irq.o(i.BSP_USART2_RIIrqHander))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_USART2_RIIrqHander &rArr; HardwareSerial::_rx_complete_callback(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::_rx_complete_callback(unsigned char)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_init.o(i.uart2_init)
</UL>
<P><STRONG><a name="[132]"></a>BSP_USART2_TCIIrqHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_irq.o(i.BSP_USART2_TCIIrqHander))
<BR>[Address Reference Count : 1]<UL><LI> bsp_init.o(i.uart2_init)
</UL>
<P><STRONG><a name="[131]"></a>BSP_USART2_TIrqHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_irq.o(i.BSP_USART2_TIrqHander))
<BR>[Address Reference Count : 1]<UL><LI> bsp_init.o(i.uart2_init)
</UL>
<P><STRONG><a name="[134]"></a>BSP_USART4_EIIrqHander</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp_irq.o(i.BSP_USART4_EIIrqHander))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_USART4_EIIrqHander
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_init.o(i.uart4_init)
</UL>
<P><STRONG><a name="[133]"></a>BSP_USART4_RIIrqHander</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_irq.o(i.BSP_USART4_RIIrqHander))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_USART4_RIIrqHander &rArr; HardwareSerial::_rx_complete_callback(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::_rx_complete_callback(unsigned char)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_init.o(i.uart4_init)
</UL>
<P><STRONG><a name="[136]"></a>BSP_USART4_TCIIrqHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_irq.o(i.BSP_USART4_TCIIrqHander))
<BR>[Address Reference Count : 1]<UL><LI> bsp_init.o(i.uart4_init)
</UL>
<P><STRONG><a name="[135]"></a>BSP_USART4_TIrqHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_irq.o(i.BSP_USART4_TIrqHander))
<BR>[Address Reference Count : 1]<UL><LI> bsp_init.o(i.uart4_init)
</UL>
<P><STRONG><a name="[2a2]"></a>CLK_GetClockFreq</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, hc32f46x_clk.o(i.CLK_GetClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_clock
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA2_bltouch_init()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02B_init()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02A_init()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_init()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_set_overflow(unsigned short)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pclk1Freq()
</UL>

<P><STRONG><a name="[1c0]"></a>CLK_GetFlagStatus</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
</UL>

<P><STRONG><a name="[668]"></a>CLK_GetPllClockFreq</STRONG> (Thumb, 580 bytes, Stack size 36 bytes, hc32f46x_clk.o(i.CLK_GetPllClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLK_GetPllClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_clock
</UL>

<P><STRONG><a name="[260]"></a>CLK_LrcCmd</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, hc32f46x_clk.o(i.CLK_LrcCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_LrcCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ots_init()
</UL>

<P><STRONG><a name="[1bf]"></a>CLK_MpllCmd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, hc32f46x_clk.o(i.CLK_MpllCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_MpllCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[665]"></a>CLK_MpllConfig</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_MpllConfig))
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[661]"></a>CLK_SetPeriClkSource</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_SetPeriClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[664]"></a>CLK_SetPllSource</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_SetPllSource))
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[1c1]"></a>CLK_SetSysClkSource</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, hc32f46x_clk.o(i.CLK_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[660]"></a>CLK_SysClkConfig</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, hc32f46x_clk.o(i.CLK_SysClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SysClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[1c3]"></a>CLK_XtalCmd</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, hc32f46x_clk.o(i.CLK_XtalCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_XtalCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[662]"></a>CLK_XtalConfig</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_XtalConfig))
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[1c6]"></a>DMA_ChannelCfg</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, hc32f46x_dmac.o(i.DMA_ChannelCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ChannelCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
</UL>

<P><STRONG><a name="[594]"></a>DMA_ChannelCmd</STRONG> (Thumb, 390 bytes, Stack size 20 bytes, hc32f46x_dmac.o(i.DMA_ChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_ChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[595]"></a>DMA_ClearIrqFlag</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hc32f46x_dmac.o(i.DMA_ClearIrqFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_ClearIrqFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1c5]"></a>DMA_Cmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_dmac.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1c4]"></a>DMA_InitChannel</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, hc32f46x_dmac.o(i.DMA_InitChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_InitChannel &rArr; DMA_ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[596]"></a>DMA_SetTriggerSrc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hc32f46x_dmac.o(i.DMA_SetTriggerSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetTriggerSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[1e0]"></a>Ddl_Delay1ms</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hc32f46x_utility.o(i.Ddl_Delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ddl_Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HS2HP
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
</UL>

<P><STRONG><a name="[3aa]"></a>Ddl_Delay1us</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hc32f46x_utility.o(i.Ddl_Delay1us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ddl_Delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
</UL>

<P><STRONG><a name="[1c8]"></a>EFM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
</UL>

<P><STRONG><a name="[1c9]"></a>EFM_ErasePgmCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_ErasePgmCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
</UL>

<P><STRONG><a name="[1ce]"></a>EFM_FlashCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_FlashCmd))
<BR><BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_buffer_flush
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErasePage
</UL>

<P><STRONG><a name="[1cf]"></a>EFM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_buffer_flush
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErasePage
</UL>

<P><STRONG><a name="[1d0]"></a>EFM_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_buffer_flush
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErasePage
</UL>

<P><STRONG><a name="[1c7]"></a>EFM_SectorErase</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, hc32f46x_efm.o(i.EFM_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EFM_SectorErase
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ErasePgmCmd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_buffer_flush
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErasePage
</UL>

<P><STRONG><a name="[663]"></a>EFM_SetLatency</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[1ca]"></a>EFM_SingleProgram</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, hc32f46x_efm.o(i.EFM_SingleProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EFM_SingleProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ErasePgmCmd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_buffer_flush
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
</UL>

<P><STRONG><a name="[1cd]"></a>EFM_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_buffer_flush
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErasePage
</UL>

<P><STRONG><a name="[1cb]"></a>FlashErasePage</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, flash.o(i.FlashErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FlashErasePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetFlagStatus
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FlashCmd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::FLASH_If_Erase(unsigned, unsigned)
</UL>

<P><STRONG><a name="[1d1]"></a>Flash_Updata</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, flash.o(i.Flash_Updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Flash_Updata &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetFlagStatus
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FlashCmd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::FLASH_If_Write(unsigned, const void*, unsigned)
</UL>

<P><STRONG><a name="[15]"></a>IRQ000_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ001_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ002_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ003_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ004_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ005_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ006_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ007_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ008_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ009_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ010_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ011_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ012_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ013_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ014_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ015_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ016_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ017_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ018_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ019_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ020_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ021_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ022_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ023_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ024_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ025_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ026_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ027_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ028_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ029_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ030_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ031_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ032_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ032_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ032_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ033_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ033_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ033_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ034_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ034_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ034_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ035_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ035_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ035_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ036_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ036_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ036_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ037_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ037_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ037_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ038_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ038_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ038_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ039_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ039_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ039_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ040_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ040_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ040_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ041_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ041_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ041_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ042_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ042_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ042_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ043_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ043_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ043_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ044_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ044_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ044_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ045_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ045_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ045_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ046_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ046_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ046_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ047_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ047_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ047_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ048_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ048_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ048_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ049_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ049_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ049_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ050_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ050_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ050_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ051_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ051_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ051_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ052_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ052_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ052_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ053_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ053_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ053_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ054_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ054_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ054_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ055_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ055_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ055_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ056_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ056_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ056_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ057_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ057_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ057_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ058_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ058_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ058_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ059_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ059_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ059_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ060_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ060_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ060_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ061_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ061_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ061_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ062_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ062_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ062_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ063_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ063_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ063_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ064_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ064_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ064_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ065_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ065_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ065_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ066_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ066_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ066_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ067_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ067_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ067_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ068_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ068_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ068_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ069_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ069_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ069_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ070_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ070_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ070_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ071_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ071_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ071_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ072_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ072_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ072_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ073_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ073_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ073_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ074_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ074_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ074_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ075_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ075_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ075_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ076_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ076_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ076_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ077_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ077_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ077_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ078_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ078_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ078_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ079_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ079_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ079_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ080_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ080_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ080_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ081_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ081_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ081_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ082_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ082_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ082_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ083_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ083_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ083_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ084_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ084_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ084_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ085_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ085_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ085_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ086_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ086_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ086_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ087_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ087_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ087_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ088_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ088_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ088_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ089_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ089_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ089_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ090_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ090_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ090_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ091_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ091_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ091_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ092_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ092_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ092_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ093_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ093_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ093_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ094_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ094_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ094_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ095_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ095_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ095_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ096_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ096_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ096_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ097_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ097_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ097_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ098_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ098_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ098_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ099_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ099_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ099_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1d2]"></a>OTS_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hc32f46x_ots.o(i.OTS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OTS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_ots_c]::OTS_Trimming()
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ots_init()
</UL>

<P><STRONG><a name="[1d4]"></a>PORT_DebugPortSetting</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, hc32f46x_gpio.o(i.PORT_DebugPortSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PORT_DebugPortSetting
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pin_init
</UL>

<P><STRONG><a name="[1d8]"></a>PORT_GetBit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hc32f46x_gpio.o(i.PORT_GetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::recv()
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>

<P><STRONG><a name="[1d7]"></a>PORT_GetBitMapp</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, marlincore.o(i.PORT_GetBitMapp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PORT_GetBitMapp &rArr; PORT_GetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilamentSensorSwitch::run()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerFan::update()
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::report_states()
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update_buttons()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_endstops()
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::update()
</UL>

<P><STRONG><a name="[1d9]"></a>PORT_Init</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, hc32f46x_gpio.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pin_init
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_adc_cpp]::adc_pin_init()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
</UL>

<P><STRONG><a name="[1d6]"></a>PORT_Lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>

<P><STRONG><a name="[1db]"></a>PORT_ResetBits</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32f46x_gpio.o(i.PORT_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pin_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG(unsigned char)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shut_off_power
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tick()
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerFan::setup()
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::checkExtruderAutoFans()
</UL>

<P><STRONG><a name="[1da]"></a>PORT_ResetBitsMapp</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, softwareserial.o(i.PORT_ResetBitsMapp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PORT_ResetBitsMapp &rArr; PORT_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setTX()
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::send()
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Configuration()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_all_steppers()
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_e_steppers()
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::_outage()
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tick()
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::checkExtruderAutoFans()
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
</UL>

<P><STRONG><a name="[1dd]"></a>PORT_SetBits</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pin_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG(unsigned char)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::show_bootscreen()
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::checkExtruderAutoFans()
</UL>

<P><STRONG><a name="[1dc]"></a>PORT_SetBitsMapp</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, softwareserial.o(i.PORT_SetBitsMapp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_SetBitsMapp
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setTX()
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::send()
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all_steppers()
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_e_steppers()
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::_outage()
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tick()
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::checkExtruderAutoFans()
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
</UL>

<P><STRONG><a name="[1de]"></a>PORT_SetFunc</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, hc32f46x_gpio.o(i.PORT_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pin_init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA2_bltouch_init()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_init()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_sdio_cpp]::SdiocInitPins()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fan_pwm_init(unsigned char)
</UL>

<P><STRONG><a name="[1d5]"></a>PORT_Unlock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>

<P><STRONG><a name="[298]"></a>PWC_Fcg0PeriphClockCmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg0PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA2_bltouch_init()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_init()
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_adc_cpp]::AdcTriggerConfig()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fan_pwm_init(unsigned char)
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[28c]"></a>PWC_Fcg1PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init()
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitHost(const stc_sd_handle*)
</UL>

<P><STRONG><a name="[27e]"></a>PWC_Fcg2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA2_bltouch_init()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02B_init()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02A_init()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_init()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_init()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_init()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer41_init()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fan_pwm_init(unsigned char)
</UL>

<P><STRONG><a name="[261]"></a>PWC_Fcg3PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hc32f46x_pwc.o(i.PWC_Fcg3PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ots_init()
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_adc_cpp]::AdcInitConfig()
</UL>

<P><STRONG><a name="[1df]"></a>PWC_HS2HP</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hc32f46x_pwc.o(i.PWC_HS2HP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_HS2HP &rArr; Ddl_Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[35f]"></a>RMU_ClrResetFlag</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, hc32f46x_rmu.o(i.RMU_ClrResetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmu_clear_reset_cause()
</UL>

<P><STRONG><a name="[33c]"></a>RMU_GetResetCause</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, hc32f46x_rmu.o(i.RMU_GetResetCause))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RMU_GetResetCause
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmu_get_reset_cause()
</UL>

<P><STRONG><a name="[591]"></a>SDCARD_GetCardCSD</STRONG> (Thumb, 228 bytes, Stack size 20 bytes, sd_card.o(i.SDCARD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDCARD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1e8]"></a>SDCARD_GetDeviceMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sd_card.o(i.SDCARD_GetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>

<P><STRONG><a name="[1e1]"></a>SDCARD_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sd_card.o(i.SDCARD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SDCARD_Init &rArr; [local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*) &rArr; SDMMC_Cmd6_SwitchFunc &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitHost(const stc_sd_handle*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_controller_init()
</UL>

<P><STRONG><a name="[1e7]"></a>SDCARD_ReadBlocks</STRONG> (Thumb, 444 bytes, Stack size 64 bytes, sd_card.o(i.SDCARD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SDCARD_ReadBlocks &rArr; [local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short) &rArr; DMA_InitChannel &rArr; DMA_ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd18_ReadMultipleBlock
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd17_ReadSingleBlock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ReadBuffer
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetNormalIrqFlag
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ConfigData
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearNormalIrqFlag
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_GetDeviceMode
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read(unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[1f2]"></a>SDCARD_WriteBlocks</STRONG> (Thumb, 486 bytes, Stack size 64 bytes, sd_card.o(i.SDCARD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd25_WriteMultipleBlock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd24_WriteSingleBlock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_WriteBuffer
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetNormalIrqFlag
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ConfigData
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearNormalIrqFlag
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_GetDeviceMode
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_write(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[1f1]"></a>SDIOC_ClearNormalIrqFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_ClearNormalIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1ea]"></a>SDIOC_ConfigData</STRONG> (Thumb, 210 bytes, Stack size 20 bytes, hc32f46x_sdioc.o(i.SDIOC_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDIOC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1ef]"></a>SDIOC_GetNormalIrqFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_GetNormalIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[59f]"></a>SDIOC_GetResponse</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[1ee]"></a>SDIOC_GetStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1f8]"></a>SDIOC_Init</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, hc32f46x_sdioc.o(i.SDIOC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDIOC_Init &rArr; [local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_sdioc_c]::SdiocGetClkDiv(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitHost(const stc_sd_handle*)
</UL>

<P><STRONG><a name="[182]"></a>SDIOC_IrqHandler</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, hc32f46x_sdioc.o(i.SDIOC_IrqHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIOC_IrqHandler &rArr; [local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)
</UL>

<P><STRONG><a name="[1f0]"></a>SDIOC_ReadBuffer</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, hc32f46x_sdioc.o(i.SDIOC_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIOC_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[202]"></a>SDIOC_SendCommand</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, hc32f46x_sdioc.o(i.SDIOC_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIOC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd9_SendCSD
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd8_SendIfCond
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd7_SelectDeselectCard
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd6_SwitchFunc
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd3_SendRelativeAddr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd2_AllSendCID
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd25_WriteMultipleBlock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd24_WriteSingleBlock
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd18_ReadMultipleBlock
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd17_ReadSingleBlock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd13_SendStatus
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd0_GoIdleState
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd6_SetBusWidth
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd41_SdSendOpCond
</UL>

<P><STRONG><a name="[597]"></a>SDIOC_SetBusWidth</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_SetBusWidth))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1fb]"></a>SDIOC_SetClk</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, hc32f46x_sdioc.o(i.SDIOC_SetClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDIOC_SetClk &rArr; [local to hc32f46x_sdioc_c]::SdiocGetClkDiv(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_sdioc_c]::SdiocGetClkDiv(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[592]"></a>SDIOC_SetMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32f46x_sdioc.o(i.SDIOC_SetMode))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitHost(const stc_sd_handle*)
</UL>

<P><STRONG><a name="[593]"></a>SDIOC_SetSpeedMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hc32f46x_sdioc.o(i.SDIOC_SetSpeedMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIOC_SetSpeedMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1f6]"></a>SDIOC_WriteBuffer</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, hc32f46x_sdioc.o(i.SDIOC_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDIOC_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[1fc]"></a>SDIO_ReadBlock_DMA</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, board_sdio.o(i.SDIO_ReadBlock_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SDIO_ReadBlock_DMA &rArr; sdio_read(unsigned, unsigned char*) &rArr; SDCARD_ReadBlocks &rArr; [local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short) &rArr; DMA_InitChannel &rArr; DMA_ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read(unsigned, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock(unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[1fe]"></a>SDIO_WriteBlockDMA</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, board_sdio.o(i.SDIO_WriteBlockDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_write(unsigned, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[200]"></a>SDMMC_Acmd41_SdSendOpCond</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Acmd41_SdSendOpCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_Acmd41_SdSendOpCond &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
</UL>

<P><STRONG><a name="[204]"></a>SDMMC_Acmd6_SetBusWidth</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Acmd6_SetBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Acmd6_SetBusWidth &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)
</UL>

<P><STRONG><a name="[206]"></a>SDMMC_Cmd0_GoIdleState</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sdmmc_cmd.o(i.SDMMC_Cmd0_GoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDMMC_Cmd0_GoIdleState &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
</UL>

<P><STRONG><a name="[208]"></a>SDMMC_Cmd13_SendStatus</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd13_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned)
</UL>

<P><STRONG><a name="[1e9]"></a>SDMMC_Cmd16_SetBlockLength</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd16_SetBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd16_SetBlockLength &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[1ec]"></a>SDMMC_Cmd17_ReadSingleBlock</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd17_ReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd17_ReadSingleBlock &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>

<P><STRONG><a name="[1ed]"></a>SDMMC_Cmd18_ReadMultipleBlock</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd18_ReadMultipleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd18_ReadMultipleBlock &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>

<P><STRONG><a name="[1f4]"></a>SDMMC_Cmd24_WriteSingleBlock</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd24_WriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd24_WriteSingleBlock &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[1f5]"></a>SDMMC_Cmd25_WriteMultipleBlock</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd25_WriteMultipleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd25_WriteMultipleBlock &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[209]"></a>SDMMC_Cmd2_AllSendCID</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd2_AllSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_Cmd2_AllSendCID &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[20b]"></a>SDMMC_Cmd3_SendRelativeAddr</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd3_SendRelativeAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd3_SendRelativeAddr &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[20d]"></a>SDMMC_Cmd55_AppCmd</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd55_AppCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd55_AppCmd &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
</UL>

<P><STRONG><a name="[20e]"></a>SDMMC_Cmd6_SwitchFunc</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd6_SwitchFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd6_SwitchFunc &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)
</UL>

<P><STRONG><a name="[20f]"></a>SDMMC_Cmd7_SelectDeselectCard</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd7_SelectDeselectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDMMC_Cmd7_SelectDeselectCard &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[210]"></a>SDMMC_Cmd8_SendIfCond</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd8_SendIfCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_Cmd8_SendIfCond &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)
</UL>

<P><STRONG><a name="[212]"></a>SDMMC_Cmd9_SendCSD</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sdmmc_cmd.o(i.SDMMC_Cmd9_SendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDMMC_Cmd9_SendCSD &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SendCommand
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)
</UL>

<P><STRONG><a name="[28e]"></a>SPI_Cmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init()
</UL>

<P><STRONG><a name="[253]"></a>SPI_GetFlag</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_GetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus(unsigned char)
</UL>

<P><STRONG><a name="[28d]"></a>SPI_Init</STRONG> (Thumb, 404 bytes, Stack size 8 bytes, hc32f46x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init()
</UL>

<P><STRONG><a name="[252]"></a>SPI_SendData8</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_SendData8))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus(unsigned char)
</UL>

<P><STRONG><a name="[213]"></a>SysTick_Delay</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, hc32f46x_utility.o(i.SysTick_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[214]"></a>SysTick_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hc32f46x_utility.o(i.SysTick_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Delay
</UL>

<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; SysTick_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[215]"></a>SysTick_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_utility.o(i.SysTick_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IrqHandler
</UL>

<P><STRONG><a name="[673]"></a>SysTick_Init</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, hc32f46x_utility.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[181]"></a>SysTick_IrqHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, board_tim0.o(i.SysTick_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1c2]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, system_hc32f46x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a6]"></a>SystemInit</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, system_hc32f46x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(.text)
</UL>
<P><STRONG><a name="[216]"></a>TIMER0_BaseInit</STRONG> (Thumb, 1524 bytes, Stack size 32 bytes, hc32f46x_timer0.o(i.TIMER0_BaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIMER0_BaseInit &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02B_init()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02A_init()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_init()
</UL>

<P><STRONG><a name="[218]"></a>TIMER0_Cmd</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02B_init()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02A_init()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_set_overflow(unsigned short)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_disable()
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setSpeed(unsigned)
</UL>

<P><STRONG><a name="[219]"></a>TIMER0_IntCmd</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_IntCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER0_IntCmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02B_init()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02A_init()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_init()
</UL>

<P><STRONG><a name="[284]"></a>TIMER4_CNT_ClearCountVal</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_ClearCountVal))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_init()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer41_init()
</UL>

<P><STRONG><a name="[37b]"></a>TIMER4_CNT_ClearIrqFlag</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_ClearIrqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_zero_match_irq_cb()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer41_zero_match_irq_cb()
</UL>

<P><STRONG><a name="[31d]"></a>TIMER4_CNT_GetCountVal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_GetCountVal))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_get_count()
</UL>

<P><STRONG><a name="[27f]"></a>TIMER4_CNT_Init</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER4_CNT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_init()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer41_init()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_set_frequency(unsigned)
</UL>

<P><STRONG><a name="[362]"></a>TIMER4_CNT_Load</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_Load))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_set_frequency(unsigned)
</UL>

<P><STRONG><a name="[34b]"></a>TIMER4_CNT_SetCycleVal</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_SetCycleVal))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_set_compare(unsigned short)
</UL>

<P><STRONG><a name="[285]"></a>TIMER4_CNT_Start</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hc32f46x_timer4_cnt.o(i.TIMER4_CNT_Start))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_init()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer41_init()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_set_frequency(unsigned)
</UL>

<P><STRONG><a name="[299]"></a>TIMERA_BaseInit</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, hc32f46x_timera.o(i.TIMERA_BaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMERA_BaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA2_bltouch_init()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_init()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fan_pwm_init(unsigned char)
</UL>

<P><STRONG><a name="[2a0]"></a>TIMERA_Cmd</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hc32f46x_timera.o(i.TIMERA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA2_bltouch_init()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_set_frequency(unsigned, unsigned char)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fan_pwm_init(unsigned char)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_stop()
</UL>

<P><STRONG><a name="[29c]"></a>TIMERA_CompareCmd</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, hc32f46x_timera.o(i.TIMERA_CompareCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMERA_CompareCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA2_bltouch_init()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_init()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fan_pwm_init(unsigned char)
</UL>

<P><STRONG><a name="[29b]"></a>TIMERA_CompareInit</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, hc32f46x_timera.o(i.TIMERA_CompareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMERA_CompareInit
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA2_bltouch_init()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_init()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fan_pwm_init(unsigned char)
</UL>

<P><STRONG><a name="[302]"></a>TIMERA_GetCompareValue</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hc32f46x_timera.o(i.TIMERA_GetCompareValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMERA_GetCompareValue
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_pwm_set_ratio(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[303]"></a>TIMERA_GetPeriodValue</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hc32f46x_timera.o(i.TIMERA_GetPeriodValue))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_pwm_set_ratio(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[356]"></a>TIMERA_HwStartupConfig</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hc32f46x_timera.o(i.TIMERA_HwStartupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMERA_HwStartupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA2_bltouch_init()
</UL>

<P><STRONG><a name="[29a]"></a>TIMERA_IrqCmd</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, hc32f46x_timera.o(i.TIMERA_IrqCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMERA_IrqCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_init()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fan_pwm_init(unsigned char)
</UL>

<P><STRONG><a name="[29d]"></a>TIMERA_SetCompareValue</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, hc32f46x_timera.o(i.TIMERA_SetCompareValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMERA_SetCompareValue
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_init()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_set_frequency(unsigned, unsigned char)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_pwm_set_ratio(unsigned char, unsigned char)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fan_pwm_init(unsigned char)
</UL>

<P><STRONG><a name="[29e]"></a>TIMERA_SpecifyOutputSta</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, hc32f46x_timera.o(i.TIMERA_SpecifyOutputSta))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMERA_SpecifyOutputSta
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_init()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_set_frequency(unsigned, unsigned char)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_pwm_set_ratio(unsigned char, unsigned char)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fan_pwm_init(unsigned char)
</UL>

<P><STRONG><a name="[1bc]"></a>USART_ClearStatus</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_ClearStatus))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART4_EIIrqHander
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_EIIrqHander
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_EIIrqHander
</UL>

<P><STRONG><a name="[67e]"></a>USART_FuncCmd</STRONG> (Thumb, 520 bytes, Stack size 20 bytes, hc32f46x_usart.o(i.USART_FuncCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[1bb]"></a>USART_GetStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART4_EIIrqHander
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_EIIrqHander
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_EIIrqHander
</UL>

<P><STRONG><a name="[1bd]"></a>USART_RecData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_RecData))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART4_RIIrqHander
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_RIIrqHander
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_RIIrqHander
</UL>

<P><STRONG><a name="[529]"></a>USART_SendData</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
</UL>

<P><STRONG><a name="[21a]"></a>USART_SetBaudrate</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hc32f46x_usart.o(i.USART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART_SetBaudrate &rArr; [local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetClkSyncBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetUartBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[67a]"></a>USART_UART_Init</STRONG> (Thumb, 666 bytes, Stack size 24 bytes, hc32f46x_usart.o(i.USART_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[263]"></a>WDT_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hc32f46x_wdt.o(i.WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wdt_init()
</UL>

<P><STRONG><a name="[2d8]"></a>WDT_RefreshCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_wdt.o(i.WDT_RefreshCounter))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wdt_refresh()
</UL>

<P><STRONG><a name="[21e]"></a>LCD_WR_REG(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_spi_tft.o(i._Z10LCD_WR_REGh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WR_REG(unsigned char) &rArr; LCD_Writ_Bus(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms(unsigned short)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus(unsigned char)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[221]"></a>ftostr51rj(const float&)</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, numtostr.o(i._Z10ftostr51rjRKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr51rj(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float51::strfunc(float)
</UL>

<P><STRONG><a name="[223]"></a>i8tostr3rj(signed char)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, numtostr.o(i._Z10i8tostr3rja))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i8tostr3rj(signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_int8::strfunc(float)
</UL>

<P><STRONG><a name="[db]"></a>lcd_move_x()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, menu_motion.o(i._Z10lcd_move_xv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = lcd_move_x() &rArr; _lcd_move_xyz(const char*, AxisEnum) &rArr; GcodeSuite::process_subcommands_now_P(const char*) &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z20LCD_goto_manual_movef8AxisEnum)
</UL>
<P><STRONG><a name="[dc]"></a>lcd_move_y()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, menu_motion.o(i._Z10lcd_move_yv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = lcd_move_y() &rArr; _lcd_move_xyz(const char*, AxisEnum) &rArr; GcodeSuite::process_subcommands_now_P(const char*) &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z20LCD_goto_manual_movef8AxisEnum)
</UL>
<P><STRONG><a name="[dd]"></a>lcd_move_z()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, menu_motion.o(i._Z10lcd_move_zv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = lcd_move_z() &rArr; _lcd_move_xyz(const char*, AxisEnum) &rArr; GcodeSuite::process_subcommands_now_P(const char*) &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z20LCD_goto_manual_movef8AxisEnum)
</UL>
<P><STRONG><a name="[586]"></a>max_length(AxisEnum)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, g28.o(i._Z10max_length8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to G28_cpp]::quick_home_xy()
</UL>

<P><STRONG><a name="[fd]"></a>menu_media()</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, menu_media.o(i._Z10menu_mediav))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = menu_media() &rArr; menu_media_filelist() &rArr; CardReader::cd(const char*) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media_filelist()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> menu_main.o(i._Z9menu_mainv)
<LI> marlinui.o(i._ZN8MarlinUI13media_changedEhh)
<LI> marlinui.o(i._ZN8MarlinUI6updateEv)
</UL>
<P><STRONG><a name="[101]"></a>menu_ready()</STRONG> (Thumb, 848 bytes, Stack size 40 bytes, menu_main.o(i._Z10menu_readyv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = menu_ready() &rArr; MenuItem_submenu::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[22d]"></a>openFailed(const char*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cardreader.o(i._Z10openFailedPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = openFailed(const char*) &rArr; serial_echopair_PGM(const char*, const char*) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(char*)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[230]"></a>report_M92(bool, signed char)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, m92.o(i._Z10report_M92ba))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = report_M92(bool, signed char) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
</UL>

<P><STRONG><a name="[234]"></a>report_xyz(const XYZEval&lang;float&rang;&)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m114.o(i._Z10report_xyzRK7XYZEvalIfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = report_xyz(const XYZEval&lang;float&rang;&) &rArr; report_xyze(const XYZEval&lang;float&rang;&, unsigned char, unsigned char) &rArr; dtostrf(double, signed char, unsigned char, char*) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_xyze(const XYZEval&lang;float&rang;&, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_detail()
</UL>

<P><STRONG><a name="[236]"></a>safe_delay(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, utility.o(i._Z10safe_delayj))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PlayTune(unsigned char, const unsigned short*, unsigned char)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unload_filament(const float&, bool, PauseMode)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::resync()
</UL>

<P><STRONG><a name="[1ff]"></a>sdio_write(unsigned, const unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bsp_sdio.o(i._Z10sdio_writejPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlockDMA
</UL>

<P><STRONG><a name="[239]"></a>AC_PlayTune(unsigned char, const unsigned short*, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, tone.o(i._Z11AC_PlayTunehPKth))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = AC_PlayTune(unsigned char, const unsigned short*, unsigned char) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::show_bootscreen()
</UL>

<P><STRONG><a name="[666]"></a>DebugOutput(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hc32f46x_utility.o(i._Z11DebugOutputh))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[3ad]"></a>FastIO_init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fastio.o(i._Z11FastIO_initv))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_init()
</UL>

<P><STRONG><a name="[23b]"></a>LCD_WR_DATA(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_spi_tft.o(i._Z11LCD_WR_DATAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WR_DATA(unsigned short) &rArr; LCD_Writ_Bus(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_logo_secreen()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::fill(queueTask_t*)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANVAS::ToScreen()
</UL>

<P><STRONG><a name="[23c]"></a>M710_report(bool)</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, m710.o(i._Z11M710_reportb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = M710_report(bool) &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M710()
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
</UL>

<P><STRONG><a name="[23e]"></a>ftostr42_52(const float&)</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, numtostr.o(i._Z11ftostr42_52RKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ftostr42_52(const float&) &rArr; ftostr52(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr52(const float&)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
</UL>

<P><STRONG><a name="[240]"></a>i16tostr3rj(short)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, numtostr.o(i._Z11i16tostr3rjs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i16tostr3rj(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float3::strfunc(float)
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_int3::strfunc(float)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_hotend_status(unsigned char, unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preheat_to_move_E()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heater_status(unsigned short, unsigned short, signed char, char)
</UL>

<P><STRONG><a name="[241]"></a>m206_report()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, m206_m428.o(i._Z11m206_reportv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = m206_report() &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
</UL>

<P><STRONG><a name="[242]"></a>pause_print(const float&, const XYZval&lang;float&rang;&, const float&, bool)</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, pause.o(i._Z11pause_printRKfRK6XYZvalIfES0_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = pause_print(const float&, const XYZval&lang;float&rang;&, const float&, bool) &rArr; unload_filament(const float&, bool, PauseMode) &rArr; [local to pause_cpp]::ensure_safe_temperature(bool, PauseMode) &rArr; Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axes_should_home(unsigned char)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::pause()
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unscaled_e_move(const float&, const float&)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unload_filament(const float&, bool, PauseMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M600()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M125()
</UL>

<P><STRONG><a name="[ae]"></a>preheat_ABS()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu_main.o(i._Z11preheat_ABSv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = preheat_ABS() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::inject_P(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z10menu_readyv)
</UL>
<P><STRONG><a name="[ad]"></a>preheat_pla()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu_main.o(i._Z11preheat_plav))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = preheat_pla() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::inject_P(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z10menu_readyv)
</UL>
<P><STRONG><a name="[24a]"></a>read_serial(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i._Z11read_serialh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_serial(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, signed char)
</UL>

<P><STRONG><a name="[235]"></a>report_xyze(const XYZEval&lang;float&rang;&, unsigned char, unsigned char)</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, m114.o(i._Z11report_xyzeRK7XYZEvalIfEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = report_xyze(const XYZEval&lang;float&rang;&, unsigned char, unsigned char) &rArr; dtostrf(double, signed char, unsigned char, char*) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_xyz(const XYZEval&lang;float&rang;&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_detail()
</UL>

<P><STRONG><a name="[24e]"></a>tool_change(unsigned char, bool)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tool_change.o(i._Z11tool_changehb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tool_change(unsigned char, bool) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::T(signed char)
</UL>

<P><STRONG><a name="[250]"></a>ui8tostr3rj(unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, numtostr.o(i._Z11ui8tostr3rjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui8tostr3rj(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_uint8::strfunc(float)
</UL>

<P><STRONG><a name="[51e]"></a>HAL_adc_init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal.o(i._Z12HAL_adc_initv))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
</UL>

<P><STRONG><a name="[251]"></a>LCD_WR_DATA8(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_spi_tft.o(i._Z12LCD_WR_DATA8h))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_WR_DATA8(unsigned char) &rArr; LCD_Writ_Bus(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Writ_Bus(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init()
</UL>

<P><STRONG><a name="[21f]"></a>LCD_Writ_Bus(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_spi_tft.o(i._Z12LCD_Writ_Bush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Writ_Bus(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData8
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8(unsigned char)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA(unsigned short)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG(unsigned char)
</UL>

<P><STRONG><a name="[112]"></a>Lcd_set_Fan0()</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, menu_tune.o(i._Z12Lcd_set_Fan0v))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Lcd_set_Fan0() &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen_no_defer()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcttostrpctrj(unsigned char)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to menu_tune_cpp]::LIMIT&lang;short, int, int&rang;(T1&, T2, T3)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_bar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> marlinui.o(i._ZN8MarlinUI13status_screenEv)
</UL>
<P><STRONG><a name="[25e]"></a>announceOpen(unsigned char, const char*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cardreader.o(i._Z12announceOpenhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = announceOpen(unsigned char, const char*) &rArr; serial_echopair_PGM(const char*, const char*) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(char*)
</UL>

<P><STRONG><a name="[25f]"></a>bsp_ots_init()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_ots.o(i._Z12bsp_ots_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_ots_init() &rArr; OTS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTS_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_LrcCmd
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg3PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[262]"></a>bsp_wdt_init()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_wdt.o(i._Z12bsp_wdt_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_wdt_init() &rArr; WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[264]"></a>fan_pwm_init()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_pwm.o(i._Z12fan_pwm_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fan_pwm_init() &rArr; hal_fan_pwm_init(unsigned char) &rArr; TIMERA_CompareInit
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_fan_pwm_init(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[266]"></a>ftostr31sign(const float&)</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, numtostr.o(i._Z12ftostr31signRKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr31sign(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float31sign::strfunc(float)
</UL>

<P><STRONG><a name="[267]"></a>ftostr41sign(const float&)</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, numtostr.o(i._Z12ftostr41signRKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr41sign(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
</UL>

<P><STRONG><a name="[268]"></a>ftostr43sign(const float&, char)</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, numtostr.o(i._Z12ftostr43signRKfc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr43sign(const float&, char) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float43::strfunc(float)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_machine_info()
</UL>

<P><STRONG><a name="[269]"></a>ftostr52sign(const float&)</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, numtostr.o(i._Z12ftostr52signRKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr52sign(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float52sign::strfunc(float)
</UL>

<P><STRONG><a name="[26a]"></a>ftostr53sign(const float&)</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, numtostr.o(i._Z12ftostr53signRKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr53sign(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_babystep_zoffset()
</UL>

<P><STRONG><a name="[c2]"></a>lcd_cooldown()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, menu_temperature.o(i._Z12lcd_cooldownv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lcd_cooldown() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_temperature.o(i._Z16menu_temperaturev)
</UL>
<P><STRONG><a name="[d9]"></a>lcd_sd_updir()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, menu_media.o(i._Z12lcd_sd_updirv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_sd_updir() &rArr; CardReader::cdup() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cdup()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_media.o(i._Z19menu_media_filelistv)
</UL>
<P><STRONG><a name="[344]"></a>pgm_read_any(const float*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motion.o(i._Z12pgm_read_anyPKf))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_software_endstops(AxisEnum)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_axis_is_at_home(AxisEnum)
</UL>

<P><STRONG><a name="[26d]"></a>printer_busy()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, menu.o(i._Z12printer_busyv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = printer_busy()
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsActive()
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
</UL>

<P><STRONG><a name="[26f]"></a>resume_print(const float&, const float&, const float&, signed char, short)</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, pause.o(i._Z12resume_printRKfS0_S0_as))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = resume_print(const float&, const float&, const float&, signed char, short) &rArr; load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode) &rArr; [local to pause_cpp]::ensure_safe_temperature(bool, PauseMode) &rArr; Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pause_cpp]::ensure_safe_temperature(bool, PauseMode)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axes_should_home(unsigned char)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::reset_hotend_idle_timer(unsigned char)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_show_message(PauseMessage, PauseMode, unsigned char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(const float&)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::startFileprint()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy(const XYval&lang;float&rang;&, const float&)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_z(const float&, const float&)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unscaled_e_move(const float&, const float&)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M600()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M125()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
</UL>

<P><STRONG><a name="[27d]"></a>timer41_init()</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, bsp_timer.o(i._Z12timer41_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer41_init() &rArr; enIrqRegistration
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_EnableIRQ(IRQn)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_Start
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_ClearCountVal
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[286]"></a>timer42_init()</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, bsp_timer.o(i._Z12timer42_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer42_init() &rArr; enIrqRegistration
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_EnableIRQ(IRQn)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_Start
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_ClearCountVal
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[287]"></a>ui16tostr3rj(unsigned short)</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, numtostr.o(i._Z12ui16tostr3rjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui16tostr3rj(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetHotend()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetBED()
</UL>

<P><STRONG><a name="[288]"></a>ui16tostr4rj(unsigned short)</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, numtostr.o(i._Z12ui16tostr4rjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui16tostr4rj(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_uint16_4::strfunc(float)
</UL>

<P><STRONG><a name="[289]"></a>ui16tostr5rj(unsigned short)</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, numtostr.o(i._Z12ui16tostr5rjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ui16tostr5rj(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr5rj(const float&)
</UL>

<P><STRONG><a name="[28a]"></a>LCD_GPIO_Init()</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, bsp_spi_tft.o(i._Z13LCD_GPIO_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_GPIO_Init() &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init()
</UL>

<P><STRONG><a name="[224]"></a>_lcd_move_xyz(const char*, AxisEnum)</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, menu_motion.o(i._Z13_lcd_move_xyzPKc8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = _lcd_move_xyz(const char*, AxisEnum) &rArr; GcodeSuite::process_subcommands_now_P(const char*) &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr41sign(const float&)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMove::soon(AxisEnum)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen_no_defer()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_endstops_t::get_manual_axis_limits(AxisEnum, float&, float&)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::using_inch_units()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMove::apply_diff(AxisEnum, float, float, float)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr63(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_move_z()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_move_y()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_move_x()
</UL>

<P><STRONG><a name="[297]"></a>beep_pwm_init()</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, bsp_pwm.o(i._Z13beep_pwm_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = beep_pwm_init() &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_SpecifyOutputSta
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_SetCompareValue
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_IrqCmd
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_CompareInit
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_CompareCmd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_BaseInit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29f]"></a>beep_pwm_stop()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_pwm.o(i._Z13beep_pwm_stopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = beep_pwm_stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer01B_CallBack()
</UL>

<P><STRONG><a name="[678]"></a>esp_wifi_init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, esp_wifi.o(i._Z13esp_wifi_initv))
<BR><BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[4ca]"></a>flashFirmware(short)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal.o(i._Z13flashFirmwares))
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M997()
</UL>

<P><STRONG><a name="[2a1]"></a>get_pclk1Freq()</STRONG> (Thumb, 16 bytes, Stack size 40 bytes, bsp_timer.o(i._Z13get_pclk1Freqv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_pclk1Freq() &rArr; CLK_GetClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_set_frequency(unsigned)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setSpeed(unsigned)
</UL>

<P><STRONG><a name="[2a3]"></a>gpio_set_mode(unsigned char, WiringPinMode)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, io.o(i._Z13gpio_set_modeh13WiringPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(unsigned char, WiringPinMode)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init()
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::init()
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerFan::setup()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::CardReader()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Configuration()
</UL>

<P><STRONG><a name="[2a4]"></a>hal_sdio_init()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_sdio.o(i._Z13hal_sdio_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = hal_sdio_init() &rArr; sdio_controller_init() &rArr; SDCARD_Init &rArr; [local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*) &rArr; SDMMC_Cmd6_SwitchFunc &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_controller_init()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_sdio_cpp]::SdiocInitPins()
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steup_sdio
</UL>

<P><STRONG><a name="[272]"></a>load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode)</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, pause.o(i._Z13load_filamentRKfS0_S0_abb9PauseMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode) &rArr; [local to pause_cpp]::ensure_safe_temperature(bool, PauseMode) &rArr; Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pause_cpp]::ensure_safe_temperature(bool, PauseMode)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pause_cpp]::impatient_beep(signed char, bool)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_impatient_beep(signed char)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_show_message(PauseMessage, PauseMode, unsigned char)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unscaled_e_move(const float&, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
</UL>

<P><STRONG><a name="[103]"></a>menu_language()</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, menu_language.o(i._Z13menu_languagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = menu_language() &rArr; MenuItem_button::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[108]"></a>menu_xyz_home()</STRONG> (Thumb, 836 bytes, Stack size 40 bytes, menu_motion.o(i._Z13menu_xyz_homev))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = menu_xyz_home() &rArr; MenuItem_gcode::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_gcode::action(const char*, const char*)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_gcode::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z9menu_movev)
</UL>
<P><STRONG><a name="[c0]"></a>on_fan_update()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu_temperature.o(i._Z13on_fan_updatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = on_fan_update() &rArr; Temperature::set_fan_speed(unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu_temperature.o(i._Z16menu_temperaturev)
<LI> menu_tune.o(i._Z9menu_tunev)
</UL>
<P><STRONG><a name="[258]"></a>pcttostrpctrj(unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, numtostr.o(i._Z13pcttostrpctrjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pcttostrpctrj(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui8tostr4pctrj(unsigned char)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_Fan0()
</UL>

<P><STRONG><a name="[227]"></a>scroll_screen(unsigned char, bool)</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, menu.o(i._Z13scroll_screenhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scroll_screen(unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_edit_mesh()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_probe_offsets()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_job_recovery()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_pause_option()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_controller_fan()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_ready()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_xyz_home()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media_filelist()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_step_mode()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_current()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
</UL>

<P><STRONG><a name="[2ad]"></a>serial_spaces(unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, serial.o(i._Z13serial_spacesh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = serial_spaces(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_2d_array(unsigned char, unsigned char, unsigned char, float(*)(unsigned char, unsigned char))
</UL>

<P><STRONG><a name="[676]"></a>setup_killpin()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, marlincore.o(i._Z13setup_killpinv))
<BR><BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[2ae]"></a>timer01B_init()</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, bsp_timer.o(i._Z13timer01B_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = timer01B_init() &rArr; TIMER0_BaseInit &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_EnableIRQ(IRQn)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IntCmd
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2af]"></a>timer02A_init()</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, bsp_timer.o(i._Z13timer02A_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = timer02A_init() &rArr; TIMER0_BaseInit &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_EnableIRQ(IRQn)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IntCmd
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b0]"></a>timer02B_init()</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, bsp_timer.o(i._Z13timer02B_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = timer02B_init() &rArr; TIMER0_BaseInit &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_EnableIRQ(IRQn)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IntCmd
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b1]"></a>watchdog_init()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, watchdog.o(i._Z13watchdog_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = watchdog_init() &rArr; iwdg_init &rArr; bsp_wdt_refresh() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[2b3]"></a>SDIO_ReadBlock(unsigned, unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sdio.o(i._Z14SDIO_ReadBlockjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SDIO_ReadBlock(unsigned, unsigned char*) &rArr; SDIO_ReadBlock_DMA &rArr; sdio_read(unsigned, unsigned char*) &rArr; SDCARD_ReadBlocks &rArr; [local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short) &rArr; DMA_InitChannel &rArr; DMA_ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
</UL>

<P><STRONG><a name="[2b4]"></a>check_endstops()</STRONG> (Thumb, 324 bytes, Stack size 80 bytes, marlinui.o(i._Z14check_endstopsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = check_endstops() &rArr; MarlinUI::set_alert_status_P(const char*) &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_alert_status_P(const char*)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
</UL>

<P><STRONG><a name="[3db]"></a>createFilename(char*, const directoryEntry&)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cardreader.o(i._Z14createFilenamePcRK14directoryEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = createFilename(char*, const directoryEntry&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByIndex(SdFile, unsigned char)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[2b8]"></a>do_homing_move(AxisEnum, float, float, bool)</STRONG> (Thumb, 326 bytes, Stack size 88 bytes, motion.o(i._Z14do_homing_move8AxisEnumffb))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = do_homing_move(AxisEnum, float, float, bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_dir(AxisEnum)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::validate_homing_move()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_axis_position_mm(AxisEnum)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(const float&, const float&, const float&, const float&)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(const float&, const float&, const float&, const float&, const float&, unsigned char, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
</UL>

<P><STRONG><a name="[2be]"></a>do_z_clearance(const float&, bool, bool, bool)</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, motion.o(i._Z14do_z_clearanceRKfbbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = do_z_clearance(const float&, bool, bool, bool) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_z(const float&, const float&)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to motion_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::do_z_raise(float)
</UL>

<P><STRONG><a name="[2c0]"></a>limit_and_warn(float&, unsigned char, const char*, const XYZEval&lang;float&rang;&)</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, planner.o(i._Z14limit_and_warnRfhPKcRK7XYZEvalIfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = limit_and_warn(float&, unsigned char, const char*, const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_max_acceleration(unsigned char, float)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_max_jerk(AxisEnum, float)
</UL>

<P><STRONG><a name="[c7]"></a>menu_edit_mesh()</STRONG> (Thumb, 808 bytes, Stack size 56 bytes, menu_bed_leveling.o(i._Z14menu_edit_meshv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = menu_edit_mesh() &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_bed_leveling.o(i._Z17menu_bed_levelingv)
</UL>
<P><STRONG><a name="[c1]"></a>menu_preheat_m()</STRONG> (Thumb, 734 bytes, Stack size 48 bytes, menu_temperature.o(i._Z14menu_preheat_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = menu_preheat_m() &rArr; MenuItem_button::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::get_preheat_label(unsigned char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_function::action(const char*, void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_temperature.o(i._Z16menu_temperaturev)
</UL>
<P><STRONG><a name="[2c7]"></a>print_2d_array(unsigned char, unsigned char, unsigned char, float(*)(unsigned char, unsigned char))</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, bedlevel.o(i._Z14print_2d_arrayhhhPFfhhE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = print_2d_array(unsigned char, unsigned char, unsigned char, float(*)(unsigned char, unsigned char)) &rArr; serial_spaces(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_spaces(unsigned char)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bilinear_leveling_grid_virt()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bilinear_leveling_grid()
</UL>

<P><STRONG><a name="[2c9]"></a>print_hex_byte(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hex_print.o(i._Z14print_hex_byteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = print_hex_byte(unsigned char) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_byte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_long(unsigned, char)
</UL>

<P><STRONG><a name="[2cb]"></a>print_hex_long(unsigned, char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hex_print.o(i._Z14print_hex_longjc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = print_hex_long(unsigned, char) &rArr; print_hex_byte(unsigned char) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_byte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
</UL>

<P><STRONG><a name="[22f]"></a>serialprintPGM(const char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, serial.o(i._Z14serialprintPGMPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pause_cpp]::ensure_safe_temperature(bool, PauseMode)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_machine_info()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(const float&, const float&, const float&, const char*, const char*)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_truefalse(bool)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, long)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, char)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_onoff(bool)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeat::loop()
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeat::add_marker(unsigned, unsigned short)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::write()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_confirmation(bool, signed char)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_continue_prompt(bool)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_long(unsigned, char)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmc_get_registers(bool, bool, bool, bool)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmc_report_all(bool, bool, bool, bool)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bilinear_leveling_grid_virt()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bilinear_leveling_grid()
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, signed char)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::unknown_command_warning()
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1000()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M851()
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M504()
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M430()
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M421()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M412()
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M145()
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M118()
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M115()
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M105()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M20()
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G42()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::ok_to_send()
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()::[lambda(bool, const float&, const float&, const float&, const float&, bool) (instance 1)]::operator ()(bool, const float&, const float&, const float&, const float&, bool) const
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M710_report(bool)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::report_states()
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M115_cpp]::cap_line(const char*, bool)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_detail()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(const float&, heater_id_t, signed char, bool)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to endstops_cpp]::print_es_state(bool, const char*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_and_warn(float&, unsigned char, const char*, const XYZEval&lang;float&rang;&)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_homing_bump_feedrate(AxisEnum)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;say_units(bool)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;say_M906(bool)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;say_M569(bool, const char*, bool)
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to settings_cpp]::config_heading(bool, const char*, bool)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed_heating()
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(int, unsigned char)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(const float&, const float&, float, heater_id_t)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
</UL>

<P><STRONG><a name="[2cc]"></a>tmc_report_all(bool, bool, bool, bool)</STRONG> (Thumb, 1526 bytes, Stack size 24 bytes, tmc_util.o(i._Z14tmc_report_allbbbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tmc_report_all(bool, bool, bool, bool) &rArr; [local to tmc_util_cpp]::tmc_debug_loop(TMC_debug_enum, bool, bool, bool, bool) &rArr; void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum) &rArr; TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;::rms_current() &rArr; TMCStepper::rms_current() &rArr; TMCStepper::cs2rms(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::drv_status_loop(TMC_drv_status_enum, bool, bool, bool, bool)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_debug_loop(TMC_debug_enum, bool, bool, bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M122()
</UL>

<P><STRONG><a name="[2cf]"></a>ui8tostr4pctrj(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, numtostr.o(i._Z14ui8tostr4pctrjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ui8tostr4pctrj(unsigned char) &rArr; pcttostrpctrj(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcttostrpctrj(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_percent::strfunc(float)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fan_status(unsigned short, unsigned short, bool, char)
</UL>

<P><STRONG><a name="[2d0]"></a>HAL_timer_start(unsigned char, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timers.o(i._Z15HAL_timer_starthj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_timer_start(unsigned char, unsigned) &rArr; setup_step_tim &rArr; timer42_set_frequency(unsigned) &rArr; get_pclk1Freq() &rArr; CLK_GetClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_temp_tim
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_step_tim
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
</UL>

<P><STRONG><a name="[2d3]"></a>LCD_Address_Set(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bsp_spi_tft.o(i._Z15LCD_Address_Settttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_Address_Set(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_WR_DATA(unsigned short) &rArr; LCD_Writ_Bus(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA(unsigned short)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_logo_secreen()
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_IO::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[114]"></a>LCD_abort_pring()</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, menu.o(i._Z15LCD_abort_pringv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LCD_abort_pring() &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update_selection()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> marlinui.o(i._ZN8MarlinUI13status_screenEv)
</UL>
<P><STRONG><a name="[2d6]"></a>SDIO_WriteBlock(unsigned, const unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sdio.o(i._Z15SDIO_WriteBlockjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlockDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[2d7]"></a>bsp_wdt_refresh()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_wdt.o(i._Z15bsp_wdt_refreshv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_wdt_refresh() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_RefreshCounter
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_feed
</UL>

<P><STRONG><a name="[2d9]"></a>draw_fan_status(unsigned short, unsigned short, bool, char)</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, ui_320x240.o(i._Z15draw_fan_statusttbc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = draw_fan_status(unsigned short, unsigned short, bool, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui8tostr4pctrj(unsigned char)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::center(unsigned short)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::trim(unsigned char)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
</UL>

<P><STRONG><a name="[2df]"></a>pct16tostrpctrj(unsigned short)</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, numtostr.o(i._Z15pct16tostrpctrjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pct16tostrpctrj(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_feedrate()
</UL>

<P><STRONG><a name="[39f]"></a>printJobOngoing()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, marlincore.o(i._Z15printJobOngoingv))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
</UL>

<P><STRONG><a name="[b8]"></a>refresh_planner()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu_bed_leveling.o(i._Z15refresh_plannerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = refresh_planner() &rArr; sync_plan_position() &rArr; Planner::set_position_mm(const float&, const float&, const float&, const float&) &rArr; Planner::set_machine_position_mm(const float&, const float&, const float&, const float&) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_from_steppers_for_axis(AxisEnum)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_bed_leveling.o(i._Z14menu_edit_meshv)
</UL>
<P><STRONG><a name="[2e2]"></a>reset_bed_level()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, bedlevel.o(i._Z15reset_bed_levelv))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = reset_bed_level() &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
</UL>

<P><STRONG><a name="[2e4]"></a>set_home_offset(AxisEnum, float)</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, motion.o(i._Z15set_home_offset8AxisEnumf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = set_home_offset(AxisEnum, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_workspace_offset(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
</UL>

<P><STRONG><a name="[677]"></a>setup_powerhold()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, marlincore.o(i._Z15setup_powerholdv))
<BR><BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[679]"></a>timer42_irq_get()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bsp_timer.o(i._Z15timer42_irq_getv))
<BR><BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_enabled
</UL>

<P><STRONG><a name="[248]"></a>unload_filament(const float&, bool, PauseMode)</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, pause.o(i._Z15unload_filamentRKfb9PauseMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = unload_filament(const float&, bool, PauseMode) &rArr; [local to pause_cpp]::ensure_safe_temperature(bool, PauseMode) &rArr; Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pause_cpp]::ensure_safe_temperature(bool, PauseMode)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_show_message(PauseMessage, PauseMode, unsigned char)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unscaled_e_move(const float&, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_print(const float&, const XYZval&lang;float&rang;&, const float&, bool)
</UL>

<P><STRONG><a name="[245]"></a>unscaled_e_move(const float&, const float&)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, motion.o(i._Z15unscaled_e_moveRKfS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = unscaled_e_move(const float&, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_to_current_position(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unload_filament(const float&, bool, PauseMode)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_print(const float&, const XYZval&lang;float&rang;&, const float&, bool)
</UL>

<P><STRONG><a name="[104]"></a>version_message()</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, menu_main.o(i._Z15version_messagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = version_message() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::center(unsigned short)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::trim(unsigned char)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[113]"></a>Lcd_set_feedrate()</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, menu_tune.o(i._Z16Lcd_set_feedratev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Lcd_set_feedrate() &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen_no_defer()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pct16tostrpctrj(unsigned short)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to menu_tune_cpp]::LIMIT&lang;short, int, int&rang;(T1&, T2, T3)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_bar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> marlinui.o(i._ZN8MarlinUI13status_screenEv)
</UL>
<P><STRONG><a name="[246]"></a>axes_should_home(unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, motion.o(i._Z16axes_should_homeh))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_steps(AxisEnum, short)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_print(const float&, const XYZval&lang;float&rang;&, const float&, bool)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
</UL>

<P><STRONG><a name="[ba]"></a>do_preheat_end_m()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, menu_temperature.o(i._Z16do_preheat_end_mv))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = do_preheat_end_m() &rArr; Temperature::lcd_preheat(unsigned char, signed char, signed char) &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_temperature.o(i._Z14menu_preheat_mv)
</UL>
<P><STRONG><a name="[265]"></a>hal_fan_pwm_init(unsigned char)</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, bsp_pwm.o(i._Z16hal_fan_pwm_inith))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hal_fan_pwm_init(unsigned char) &rArr; TIMERA_CompareInit
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_SpecifyOutputSta
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_SetCompareValue
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_IrqCmd
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_CompareInit
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_CompareCmd
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_BaseInit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_pwm_init()
</UL>

<P><STRONG><a name="[111]"></a>lcd_setTargetBED()</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, menu_temperature.o(i._Z16lcd_setTargetBEDv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lcd_setTargetBED() &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen_no_defer()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_bar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui16tostr3rj(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> marlinui.o(i._ZN8MarlinUI13status_screenEv)
</UL>
<P><STRONG><a name="[2e9]"></a>log_machine_info()</STRONG> (Thumb, 576 bytes, Stack size 16 bytes, utility.o(i._Z16log_machine_infov))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = log_machine_info() &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bilinear_z_offset(const XYval&lang;float&rang;&)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr43sign(const float&, char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[d3]"></a>menu_temperature()</STRONG> (Thumb, 1304 bytes, Stack size 56 bytes, menu_temperature.o(i._Z16menu_temperaturev))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = menu_temperature() &rArr; MenuItem_submenu::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::get_preheat_label(unsigned char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::push_current_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_function::action(const char*, void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(i._Z18menu_configurationv)
</UL>
<P><STRONG><a name="[f7]"></a>menu_tmc_current()</STRONG> (Thumb, 756 bytes, Stack size 48 bytes, menu_tmc.o(i._Z16menu_tmc_currentv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = menu_tmc_current() &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::action(const char*, unsigned short*, unsigned short, unsigned short, void(*)(), bool)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::draw(bool, unsigned char, const char*, unsigned short*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tmc.o(i._Z8menu_tmcv)
</UL>
<P><STRONG><a name="[26e]"></a>printingIsActive()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, marlincore.o(i._Z16printingIsActivev))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_screen()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printer_busy()
</UL>

<P><STRONG><a name="[2f4]"></a>printingIsPaused()</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, marlincore.o(i._Z16printingIsPausedv))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_screen()
</UL>

<P><STRONG><a name="[2f3]"></a>startOrResumeJob()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, marlincore.o(i._Z16startOrResumeJobv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = startOrResumeJob() &rArr; Stopwatch::start() &rArr; Stopwatch::duration()
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsPaused()
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M75()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
</UL>

<P><STRONG><a name="[2f5]"></a>timer01B_disable()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_timer.o(i._Z16timer01B_disablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer01B_disable() &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer01B_CallBack()
</UL>

<P><STRONG><a name="[2f6]"></a>timer42_irq_ctrl(en_functional_state)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_timer.o(i._Z16timer42_irq_ctrl19en_functional_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer42_irq_ctrl(en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_timer_cpp]::__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
</UL>

<P><STRONG><a name="[2f7]"></a>tmc_serial_begin()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, trinamic.o(i._Z16tmc_serial_beginv))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = tmc_serial_begin() &rArr; TMC2208Stepper::beginSerial(unsigned) &rArr; SoftwareSerial::begin(long) &rArr; SoftwareSerial::listen() &rArr; SoftwareSerial::stopListening() &rArr; SoftwareSerial::setRXTX(bool) &rArr; SoftwareSerial::setTX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::beginSerial(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[2f9]"></a>watchdog_refresh()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, temperature.o(i._Z16watchdog_refreshv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = watchdog_refresh() &rArr; HAL_watchdog_refresh() &rArr; iwdg_feed &rArr; bsp_wdt_refresh() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loud_kill(const char*, heater_id_t)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>

<P><STRONG><a name="[2fb]"></a>Show_logo_secreen()</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bsp_spi_tft.o(i._Z17Show_logo_secreenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Show_logo_secreen() &rArr; LCD_Address_Set(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_WR_DATA(unsigned short) &rArr; LCD_Writ_Bus(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::show_bootscreen()
</UL>

<P><STRONG><a name="[b5]"></a>Timer01B_CallBack()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tone.o(i._Z17Timer01B_CallBackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Timer01B_CallBack() &rArr; timer01B_set_overflow(unsigned short) &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_stop()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_set_overflow(unsigned short)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_disable()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_timer.o(i._Z13timer01B_initv)
</UL>
<P><STRONG><a name="[b6]"></a>Timer02A_CallBack()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_timer.o(i._Z17Timer02A_CallBackv))
<BR>[Address Reference Count : 1]<UL><LI> bsp_timer.o(i._Z13timer02A_initv)
</UL>
<P><STRONG><a name="[b7]"></a>Timer02B_CallBack()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, softwareserial.o(i._Z17Timer02B_CallBackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Timer02B_CallBack() &rArr; SoftwareSerial::handleInterrupt() &rArr; SoftwareSerial::send() &rArr; SoftwareSerial::setRXTX(bool) &rArr; SoftwareSerial::setTX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::handleInterrupt()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_timer.o(i._Z13timer02B_initv)
</UL>
<P><STRONG><a name="[2ea]"></a>bilinear_z_offset(const XYval&lang;float&rang;&)</STRONG> (Thumb, 812 bytes, Stack size 40 bytes, abl.o(i._Z17bilinear_z_offsetRK5XYvalIfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bilinear_z_offset(const XYval&lang;float&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to abl_cpp]::_MIN&lang;int, int&rang;(T1, T2)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_machine_info()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::unapply_leveling(XYZval&lang;float&rang;&)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::apply_leveling(XYZval&lang;float&rang;&)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
</UL>

<P><STRONG><a name="[300]"></a>enable_e_steppers()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, marlincore.o(i._Z17enable_e_steppersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enable_e_steppers() &rArr; PORT_ResetBitsMapp &rArr; PORT_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_all_steppers()
</UL>

<P><STRONG><a name="[301]"></a>fan_pwm_set_ratio(unsigned char, unsigned char)</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, bsp_pwm.o(i._Z17fan_pwm_set_ratiohh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fan_pwm_set_ratio(unsigned char, unsigned char) &rArr; TIMERA_SpecifyOutputSta
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_SpecifyOutputSta
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_SetCompareValue
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_GetPeriodValue
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_GetCompareValue
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerFan::update()
</UL>

<P><STRONG><a name="[304]"></a>get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, fontutils.o(i._Z17get_utf8_value_cbPhPFhS_EPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to fontutils_cpp]::utf8_is_start_byte_of_char(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char*, unsigned char)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char*, signed char, unsigned char*)
</UL>

<P><STRONG><a name="[30e]"></a>leveling_is_valid()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bedlevel.o(i._Z17leveling_is_validv))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
</UL>

<P><STRONG><a name="[306]"></a>manage_inactivity(bool)</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, marlincore.o(i._Z17manage_inactivityb))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::check_axes_activity()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerFan::update()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_available_commands()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_e_steppers()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
</UL>

<P><STRONG><a name="[100]"></a>menu_bed_leveling()</STRONG> (Thumb, 1734 bytes, Stack size 56 bytes, menu_bed_leveling.o(i._Z17menu_bed_levelingv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = menu_bed_leveling() &rArr; MenuItem_gcode::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_gcode::action(const char*, const char*)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_gcode::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_bool::draw(bool, unsigned char, const char*, bool*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsActive()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leveling_is_valid()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[10b]"></a>menu_job_recovery()</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, menu_job_recovery.o(i._Z17menu_job_recoveryv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = menu_job_recovery() &rArr; MenuItem_button::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m1000.o(i._ZN10GcodeSuite5M1000Ev)
</UL>
<P><STRONG><a name="[11f]"></a>menu_pause_option()</STRONG> (Thumb, 704 bytes, Stack size 40 bytes, menu_filament.o(i._Z17menu_pause_optionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = menu_pause_option() &rArr; MenuItem_button::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_bool::draw(bool, unsigned char, const char*, bool*, ...)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
</UL>
<P><STRONG><a name="[123]"></a>preheat_to_move_E()</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, menu_motion.o(i._Z17preheat_to_move_Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = preheat_to_move_E() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, const char*, unsigned short)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i16tostr3rj(short)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::trim(unsigned char)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._ZZZ27_menu_move_distance_e_maybevENKUlvE_clEvENUlvE_4_FUNEv)
</UL>
<P><STRONG><a name="[314]"></a>process_line_done(unsigned char&, char(&)[96], int&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, queue.o(i._Z17process_line_doneRhRA96_cRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[315]"></a>quickstop_stepper()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, marlincore.o(i._Z17quickstop_stepperv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = quickstop_stepper() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::quick_stop()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_from_steppers_for_axis(AxisEnum)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>

<P><STRONG><a name="[317]"></a>refresh_bed_level()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, abl.o(i._Z17refresh_bed_levelv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = refresh_bed_level() &rArr; bed_level_virt_interpolate() &rArr; [local to abl_cpp]::bed_level_virt_2cmr(unsigned char, unsigned char, const float&, const float&) &rArr; bed_level_virt_coord(unsigned char, unsigned char) &rArr;  bed_level_virt_coord(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_level_virt_interpolate()
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[231]"></a>serial_echo_start()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, serial.o(i._Z17serial_echo_startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serial_echo_start() &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pause_cpp]::ensure_safe_temperature(bool, PauseMode)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeat::loop()
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeat::add_marker(unsigned, unsigned short)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_confirmation(bool, signed char)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_continue_prompt(bool)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::unknown_command_warning()
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M504()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M412()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M304()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M118()
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M20()
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M710_report(bool)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printLongPath(char*)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_homing_bump_feedrate(AxisEnum)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;say_M906(bool)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;say_M569(bool, const char*, bool)
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to settings_cpp]::config_heading(bool, const char*, bool)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
</UL>

<P><STRONG><a name="[319]"></a>serialprint_onoff(bool)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, serial.o(i._Z17serialprint_onoffb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serialprint_onoff(bool) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintln_onoff(bool)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
</UL>

<P><STRONG><a name="[31a]"></a>set_z_fade_height(float, bool)</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, bedlevel.o(i._Z17set_z_fade_heightfb))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = set_z_fade_height(float, bool) &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[31c]"></a>timer42_get_count()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_timer.o(i._Z17timer42_get_countv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer42_get_count()
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_GetCountVal
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_count
</UL>

<P><STRONG><a name="[31e]"></a>tmc_get_registers(bool, bool, bool, bool)</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, tmc_util.o(i._Z17tmc_get_registersbbbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tmc_get_registers(bool, bool, bool, bool) &rArr; [local to tmc_util_cpp]::tmc_get_registers(TMC_get_registers_enum, bool, bool, bool, bool) &rArr; void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum) &rArr; print_hex_long(unsigned, char) &rArr; print_hex_byte(unsigned char) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_get_registers(TMC_get_registers_enum, bool, bool, bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M122()
</UL>

<P><STRONG><a name="[320]"></a>_lcd_pause_message(const char*)</STRONG> (Thumb, 562 bytes, Stack size 56 bytes, menu_filament.o(i._Z18_lcd_pause_messagePKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _lcd_pause_message(const char*) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_hotend_status(unsigned char, unsigned char)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_filament_cpp]::pause_header()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_pause_changing_message()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_pause_waiting_message()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_pause_parking_message()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_pause_heating_message()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_pause_unload_message()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_pause_resume_message()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_pause_insert_message()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_pause_purge_message()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_pause_load_message()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_pause_heat_message()
</UL>

<P><STRONG><a name="[30b]"></a>disable_e_steppers()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, marlincore.o(i._Z18disable_e_steppersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disable_e_steppers() &rArr; PORT_SetBitsMapp
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all_steppers()
</UL>

<P><STRONG><a name="[324]"></a>draw_heater_status(unsigned short, unsigned short, signed char, char)</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, ui_320x240.o(i._Z18draw_heater_statusttac))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = draw_heater_status(unsigned short, unsigned short, signed char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i16tostr3rj(short)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::center(unsigned short)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::trim(unsigned char)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
</UL>

<P><STRONG><a name="[325]"></a>echo_write_to_file(const char*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cardreader.o(i._Z18echo_write_to_filePKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = echo_write_to_file(const char*) &rArr; serial_echopair_PGM(const char*, const char*) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(char*)
</UL>

<P><STRONG><a name="[e3]"></a>menu_advanced_jerk()</STRONG> (Thumb, 1220 bytes, Stack size 80 bytes, menu_advanced.o(i._Z18menu_advanced_jerkv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = menu_advanced_jerk() &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[102]"></a>menu_configuration()</STRONG> (Thumb, 1920 bytes, Stack size 48 bytes, menu_configuration.o(i._Z18menu_configurationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = menu_configuration() &rArr; MenuItem_submenu::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_bool::action(const char*, bool*, void(*)())
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_bool::draw(bool, unsigned char, const char*, bool*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::get_preheat_label(unsigned char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printer_busy()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_function::action(const char*, void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[e4]"></a>menu_probe_offsets()</STRONG> (Thumb, 576 bytes, Stack size 48 bytes, menu_advanced.o(i._Z18menu_probe_offsetsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = menu_probe_offsets() &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[f8]"></a>menu_tmc_step_mode()</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, menu_tmc.o(i._Z18menu_tmc_step_modev))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = menu_tmc_step_mode() &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tmc.o(i._Z8menu_tmcv)
</UL>
<P><STRONG><a name="[309]"></a>serial_error_start()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, serial.o(i._Z18serial_error_startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serial_error_start() &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, signed char)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M421()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M145()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(int, unsigned char)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>

<P><STRONG><a name="[2e1]"></a>sync_plan_position()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, motion.o(i._Z18sync_plan_positionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sync_plan_position() &rArr; Planner::set_position_mm(const float&, const float&, const float&, const float&) &rArr; Planner::set_machine_position_mm(const float&, const float&, const float&, const float&) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_position_mm(const float&, const float&, const float&, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_planner()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to G28_cpp]::quick_home_xy()
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_down_to_z(float, float)
</UL>

<P><STRONG><a name="[32c]"></a>apply_motion_limits(XYZval&lang;float&rang;&)</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, motion.o(i._Z19apply_motion_limitsR6XYZvalIfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apply_motion_limits(XYZval&lang;float&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to motion_cpp]::NOMORE&lang;float, float&rang;(T1&, T2)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to motion_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
</UL>

<P><STRONG><a name="[32e]"></a>do_blocking_move_to(const XYval&lang;float&rang;&, const float&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, motion.o(i._Z19do_blocking_move_toRK5XYvalIfERKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = do_blocking_move_to(const XYval&lang;float&rang;&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(float, float, float, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::set_deployed(bool)
</UL>

<P><STRONG><a name="[330]"></a>do_blocking_move_to(const XYZval&lang;float&rang;&, const float&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, motion.o(i._Z19do_blocking_move_toRK6XYZvalIfERKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = do_blocking_move_to(const XYZval&lang;float&rang;&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(float, float, float, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
</UL>

<P><STRONG><a name="[32f]"></a>do_blocking_move_to(float, float, float, const float&)</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, motion.o(i._Z19do_blocking_move_tofffRKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_to_current_position(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy(const float&, const float&, const float&)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(const XYZval&lang;float&rang;&, const float&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(const XYval&lang;float&rang;&, const float&)
</UL>

<P><STRONG><a name="[331]"></a>enable_all_steppers()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, marlincore.o(i._Z19enable_all_steppersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enable_all_steppers() &rArr; enable_e_steppers() &rArr; PORT_ResetBitsMapp &rArr; PORT_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_e_steppers()
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
</UL>

<P><STRONG><a name="[332]"></a>homing_needed_error(unsigned char)</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, motion.o(i._Z19homing_needed_errorh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = homing_needed_error(unsigned char) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axes_should_home(unsigned char)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G27()
</UL>

<P><STRONG><a name="[110]"></a>lcd_setTargetHotend()</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, menu_temperature.o(i._Z19lcd_setTargetHotendv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lcd_setTargetHotend() &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::hotend_max_target(unsigned char)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen_no_defer()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_bar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui16tostr3rj(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> marlinui.o(i._ZN8MarlinUI13status_screenEv)
</UL>
<P><STRONG><a name="[d5]"></a>menu_controller_fan()</STRONG> (Thumb, 1170 bytes, Stack size 64 bytes, menu_configuration.o(i._Z19menu_controller_fanv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = menu_controller_fan() &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_bool::action(const char*, bool*, void(*)())
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::action(const char*, unsigned short*, unsigned short, unsigned short, void(*)(), bool)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::draw(bool, unsigned char, const char*, unsigned short*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(i._Z18menu_configurationv)
</UL>
<P><STRONG><a name="[226]"></a>menu_media_filelist()</STRONG> (Thumb, 830 bytes, Stack size 56 bytes, menu_media.o(i._Z19menu_media_filelistv))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = menu_media_filelist() &rArr; CardReader::cd(const char*) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::push_current_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdbase::draw(bool, unsigned char, const char*, CardReader&, bool)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByIndex(unsigned short)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::get_num_Files()
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
</UL>

<P><STRONG><a name="[404]"></a>process_stream_char(char, unsigned char&, char(&)[96], int&)</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, queue.o(i._Z19process_stream_charcRhRA96_cRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = process_stream_char(char, unsigned char&, char(&)[96], int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[33b]"></a>rmu_get_reset_cause()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bsp_rmu.o(i._Z19rmu_get_reset_causev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rmu_get_reset_cause() &rArr; RMU_GetResetCause
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_GetResetCause
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_get_reset_source()
</UL>

<P><STRONG><a name="[22e]"></a>serial_echopair_PGM(const char*, const char*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, serial.o(i._Z19serial_echopair_PGMPKcS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = serial_echopair_PGM(const char*, const char*) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_machine_info()
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::unknown_command_warning()
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printLongPath(char*)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_write_to_file(const char*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
</UL>

<P><STRONG><a name="[33d]"></a>serial_echopair_PGM(const char*, char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, serial.o(i._Z19serial_echopair_PGMPKcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = serial_echopair_PGM(const char*, char) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_software_endstops(AxisEnum)
</UL>

<P><STRONG><a name="[233]"></a>serial_echopair_PGM(const char*, float)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, serial.o(i._Z19serial_echopair_PGMPKcf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_machine_info()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(const float&, const float&, const float&, const char*, const char*)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M851()
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M430()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M304()
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M204()
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G30()
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m206_report()
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(const float&, heater_id_t, signed char, bool)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_and_warn(float&, unsigned char, const char*, const XYZEval&lang;float&rang;&)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_logical_position(const XYZEval&lang;float&rang;&)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_software_endstops(AxisEnum)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(const float&, const float&, float, heater_id_t)
</UL>

<P><STRONG><a name="[23d]"></a>serial_echopair_PGM(const char*, int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, serial.o(i._Z19serial_echopair_PGMPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M851()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M114()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M710_report(bool)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_a_position(const XYZval&lang;int&rang;&)
</UL>

<P><STRONG><a name="[33e]"></a>serial_echopair_PGM(const char*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, serial.o(i._Z19serial_echopair_PGMPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = serial_echopair_PGM(const char*, unsigned) &rArr; Print::print(unsigned, int) &rArr; Print::print(unsigned long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
</UL>

<P><STRONG><a name="[340]"></a>serial_echopair_PGM(const char*, long)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, serial.o(i._Z19serial_echopair_PGMPKcl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = serial_echopair_PGM(const char*, long) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(const float&, heater_id_t, signed char, bool)
</UL>

<P><STRONG><a name="[342]"></a>serialprintln_onoff(bool)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, serial.o(i._Z19serialprintln_onoffb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = serialprintln_onoff(bool) &rArr; serialprint_onoff(bool) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_onoff(bool)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M412()
</UL>

<P><STRONG><a name="[343]"></a>set_axis_is_at_home(AxisEnum)</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, motion.o(i._Z19set_axis_is_at_home8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_axis_is_at_home(AxisEnum)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_workspace_offset(AxisEnum)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_any(const float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
</UL>

<P><STRONG><a name="[345]"></a>test_tmc_connection(bool, bool, bool, bool)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tmc_util.o(i._Z19test_tmc_connectionbbbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = test_tmc_connection(bool, bool, bool, bool) &rArr; bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M122()
</UL>

<P><STRONG><a name="[34a]"></a>timer42_set_compare(unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_timer.o(i._Z19timer42_set_comparet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer42_set_compare(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_SetCycleVal
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_compare
</UL>

<P><STRONG><a name="[34c]"></a>HAL_get_reset_source()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal.o(i._Z20HAL_get_reset_sourcev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_get_reset_source() &rArr; rmu_get_reset_cause() &rArr; RMU_GetResetCause
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmu_get_reset_cause()
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[2fa]"></a>HAL_watchdog_refresh()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, watchdog.o(i._Z20HAL_watchdog_refreshv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_watchdog_refresh() &rArr; iwdg_feed &rArr; bsp_wdt_refresh() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_refresh()
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_TIMED_PULSE(unsigned char)
</UL>

<P><STRONG><a name="[34e]"></a>LCD_goto_manual_move(float, AxisEnum)</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, menu_motion.o(i._Z20LCD_goto_manual_movef8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LCD_goto_manual_move(float, AxisEnum) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()::[lambda() (instance 5)]::_FUN()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()::[lambda() (instance 3)]::_FUN()
</UL>

<P><STRONG><a name="[34f]"></a>bed_level_virt_coord(unsigned char, unsigned char)</STRONG> (Thumb, 278 bytes, Stack size 28 bytes, abl.o(i._Z20bed_level_virt_coordhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + In Cycle
<LI>Call Chain = bed_level_virt_coord(unsigned char, unsigned char) &rArr;  bed_level_virt_coord(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_level_virt_coord(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to abl_cpp]::bed_level_virt_2cmr(unsigned char, unsigned char, const float&, const float&)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_level_virt_coord(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[350]"></a>disable_all_steppers()</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, marlincore.o(i._Z20disable_all_steppersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disable_all_steppers() &rArr; disable_e_steppers() &rArr; PORT_SetBitsMapp
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_e_steppers()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::finish_and_disable()
</UL>

<P><STRONG><a name="[2a7]"></a>first_impatient_beep(signed char)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pause.o(i._Z20first_impatient_beepa))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = first_impatient_beep(signed char) &rArr; [local to pause_cpp]::impatient_beep(signed char, bool) &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr;  Temperature::manage_heater() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pause_cpp]::impatient_beep(signed char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_confirmation(bool, signed char)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode)
</UL>

<P><STRONG><a name="[ca]"></a>lcd_babystep_zoffset()</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, menu.o(i._Z20lcd_babystep_zoffsetv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = lcd_babystep_zoffset() &rArr; GcodeSuite::process_subcommands_now_P(const char*) &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_steps(AxisEnum, short)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen_no_defer()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int, unsigned char*, unsigned)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr53sign(const float&)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> menu_bed_leveling.o(i._Z17menu_bed_levelingv)
<LI> menu_configuration.o(i._Z18menu_configurationv)
<LI> marlinui.o(i._ZN8MarlinUI13status_screenEv)
<LI> menu_tune.o(i._Z9menu_tunev)
</UL>
<P><STRONG><a name="[2a6]"></a>sdio_controller_init()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_sdio.o(i._Z20sdio_controller_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sdio_controller_init() &rArr; SDCARD_Init &rArr; [local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*) &rArr; SDMMC_Cmd6_SwitchFunc &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sdio_init()
</UL>

<P><STRONG><a name="[353]"></a>show_continue_prompt(bool)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pause.o(i._Z20show_continue_promptb))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = show_continue_prompt(bool) &rArr; MarlinUI::pause_show_message(PauseMessage, PauseMode, unsigned char) &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_show_message(PauseMessage, PauseMode, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_confirmation(bool, signed char)
</UL>

<P><STRONG><a name="[354]"></a>sync_plan_position_e()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, motion.o(i._Z20sync_plan_position_ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = sync_plan_position_e() &rArr; Planner::set_e_position_mm(const float&) &rArr; Stepper::set_axis_position(AxisEnum, const int&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
</UL>

<P><STRONG><a name="[355]"></a>timerA2_bltouch_init()</STRONG> (Thumb, 246 bytes, Stack size 80 bytes, bsp_timer.o(i._Z20timerA2_bltouch_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = timerA2_bltouch_init() &rArr; TIMERA_CompareInit
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_CompareInit
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_CompareCmd
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_BaseInit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_HwStartupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[357]"></a>unload_load_filament()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, menu.o(i._Z20unload_load_filamentv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = unload_load_filament()
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::inject_P(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
</UL>

<P><STRONG><a name="[358]"></a>Encoder_Configuration()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, encoder.o(i._Z21Encoder_Configurationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Encoder_Configuration() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[359]"></a>HAL_timer_set_compare(unsigned char, unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, timers.o(i._Z21HAL_timer_set_compareht))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_timer_set_compare(unsigned char, unsigned short) &rArr; timer_set_compare &rArr; timer42_set_compare(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
</UL>

<P><STRONG><a name="[277]"></a>do_blocking_move_to_z(const float&, const float&)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, motion.o(i._Z21do_blocking_move_to_zRKfS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_z_clearance(const float&, bool, bool, bool)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_down_to_z(float, float)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::run_z_probe(bool)
</UL>

<P><STRONG><a name="[6a5]"></a>event_filament_runout()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, runout.o(i._Z21event_filament_runoutv))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()
</UL>

<P><STRONG><a name="[5cf]"></a>position_is_reachable(const float&, const float&)</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, probe.o(i._Z21position_is_reachableRKfS0_))
<BR><BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
</UL>

<P><STRONG><a name="[35c]"></a>reset_stepper_drivers()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, indirection.o(i._Z21reset_stepper_driversv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = reset_stepper_drivers() &rArr; reset_trinamic_drivers() &rArr; void tmc_init&lang;(char)90, (char)48, (AxisEnum)2&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool) &rArr; delay &rArr; SysTick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trinamic_drivers()
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[35e]"></a>rmu_clear_reset_cause()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_rmu.o(i._Z21rmu_clear_reset_causev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rmu_clear_reset_cause()
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMU_ClrResetFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clear_reset_source()
</UL>

<P><STRONG><a name="[360]"></a>serialprint_truefalse(bool)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, serial.o(i._Z21serialprint_truefalseb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serialprint_truefalse(bool) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[2fc]"></a>timer01B_set_overflow(unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, bsp_timer.o(i._Z21timer01B_set_overflowt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = timer01B_set_overflow(unsigned short) &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer01B_CallBack()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[361]"></a>timer42_set_frequency(unsigned)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, bsp_timer.o(i._Z21timer42_set_frequencyj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = timer42_set_frequency(unsigned) &rArr; get_pclk1Freq() &rArr; CLK_GetClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_Start
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_Load
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pclk1Freq()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_step_tim
</UL>

<P><STRONG><a name="[363]"></a>wait_for_confirmation(bool, signed char)</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, pause.o(i._Z21wait_for_confirmationba))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = wait_for_confirmation(bool, signed char) &rArr; [local to pause_cpp]::ensure_safe_temperature(bool, PauseMode) &rArr; Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pause_cpp]::ensure_safe_temperature(bool, PauseMode)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pause_cpp]::impatient_beep(signed char, bool)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_user_response(unsigned, bool)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::reset_hotend_idle_timer(unsigned char)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_impatient_beep(signed char)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_show_message(PauseMessage, PauseMode, unsigned char)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_continue_prompt(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M600()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M125()
</UL>

<P><STRONG><a name="[365]"></a>HAL_clear_reset_source()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal.o(i._Z22HAL_clear_reset_sourcev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_clear_reset_source() &rArr; rmu_clear_reset_cause()
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmu_clear_reset_cause()
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[366]"></a>beep_pwm_set_frequency(unsigned, unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bsp_pwm.o(i._Z22beep_pwm_set_frequencyjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = beep_pwm_set_frequency(unsigned, unsigned char) &rArr; TIMERA_SpecifyOutputSta
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_SpecifyOutputSta
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_SetCompareValue
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMERA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[276]"></a>do_blocking_move_to_xy(const XYval&lang;float&rang;&, const float&)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, motion.o(i._Z22do_blocking_move_to_xyRK5XYvalIfERKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = do_blocking_move_to_xy(const XYval&lang;float&rang;&, const float&) &rArr; do_blocking_move_to_xy(const float&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy(const float&, const float&, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
</UL>

<P><STRONG><a name="[367]"></a>do_blocking_move_to_xy(const float&, const float&, const float&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, motion.o(i._Z22do_blocking_move_to_xyRKfS0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = do_blocking_move_to_xy(const float&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(float, float, float, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy(const XYval&lang;float&rang;&, const float&)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to G28_cpp]::quick_home_xy()
</UL>

<P><STRONG><a name="[11d]"></a>lcd_pause_heat_message()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_filament.o(i._Z22lcd_pause_heat_messagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lcd_pause_heat_message() &rArr; _lcd_pause_message(const char*) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
</UL>
<P><STRONG><a name="[11a]"></a>lcd_pause_load_message()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_filament.o(i._Z22lcd_pause_load_messagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lcd_pause_load_message() &rArr; _lcd_pause_message(const char*) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
</UL>
<P><STRONG><a name="[d4]"></a>menu_advanced_settings()</STRONG> (Thumb, 1812 bytes, Stack size 64 bytes, menu_advanced.o(i._Z22menu_advanced_settingsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = menu_advanced_settings() &rArr; MenuItem_submenu::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::push_current_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printer_busy()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(i._Z18menu_configurationv)
</UL>
<P><STRONG><a name="[e1]"></a>menu_advanced_velocity()</STRONG> (Thumb, 1562 bytes, Stack size 80 bytes, menu_advanced.o(i._Z22menu_advanced_velocityv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = menu_advanced_velocity() &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[35d]"></a>reset_trinamic_drivers()</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, trinamic.o(i._Z22reset_trinamic_driversv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = reset_trinamic_drivers() &rArr; void tmc_init&lang;(char)90, (char)48, (AxisEnum)2&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool) &rArr; delay &rArr; SysTick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)90, (char)48, (AxisEnum)2&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)89, (char)48, (AxisEnum)1&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)88, (char)48, (AxisEnum)0&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)69, (char)48, (AxisEnum)3&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_stepper_drivers()
</UL>

<P><STRONG><a name="[364]"></a>wait_for_user_response(unsigned, bool)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, marlincore.o(i._Z22wait_for_user_responsejb))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = wait_for_user_response(unsigned, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_confirmation(bool, signed char)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
</UL>

<P><STRONG><a name="[11b]"></a>lcd_pause_purge_message()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_filament.o(i._Z23lcd_pause_purge_messagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lcd_pause_purge_message() &rArr; _lcd_pause_message(const char*) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
</UL>
<P><STRONG><a name="[31b]"></a>report_current_position()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motion.o(i._Z23report_current_positionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = report_current_position() &rArr; Stepper::report_positions() &rArr; Stepper::report_a_position(const XYZval&lang;int&rang;&) &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_logical_position(const XYZEval&lang;float&rang;&)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_positions()
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_z_fade_height(float, bool)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M402()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M401()
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M114()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G30()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[370]"></a>report_logical_position(const XYZEval&lang;float&rang;&)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, motion.o(i._Z23report_logical_positionRK7XYZEvalIfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = report_logical_position(const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_projected()
</UL>

<P><STRONG><a name="[372]"></a>restore_stepper_drivers()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, indirection.o(i._Z23restore_stepper_driversv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = restore_stepper_drivers() &rArr; restore_trinamic_drivers() &rArr; TMC2208Stepper::push() &rArr; TMC2208Stepper::GCONF(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_trinamic_drivers()
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M122()
</UL>

<P><STRONG><a name="[2e5]"></a>update_workspace_offset(AxisEnum)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, motion.o(i._Z23update_workspace_offset8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_home_offset(AxisEnum, float)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_axis_is_at_home(AxisEnum)
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[c8]"></a>_lcd_toggle_bed_leveling()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu.o(i._Z24_lcd_toggle_bed_levelingv))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = _lcd_toggle_bed_leveling() &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_bed_leveling.o(i._Z17menu_bed_levelingv)
</UL>
<P><STRONG><a name="[35b]"></a>do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, motion.o(i._Z24do_blocking_move_to_xy_zRK5XYvalIfERKfS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(float, float, float, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_z(const float&, const float&)
</UL>

<P><STRONG><a name="[374]"></a>get_homing_bump_feedrate(AxisEnum)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, motion.o(i._Z24get_homing_bump_feedrate8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_homing_bump_feedrate(AxisEnum) &rArr; serial_echo_start() &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
</UL>

<P><STRONG><a name="[119]"></a>lcd_pause_insert_message()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_filament.o(i._Z24lcd_pause_insert_messagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lcd_pause_insert_message() &rArr; _lcd_pause_message(const char*) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
</UL>
<P><STRONG><a name="[11c]"></a>lcd_pause_resume_message()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_filament.o(i._Z24lcd_pause_resume_messagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lcd_pause_resume_message() &rArr; _lcd_pause_message(const char*) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
</UL>
<P><STRONG><a name="[117]"></a>lcd_pause_unload_message()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_filament.o(i._Z24lcd_pause_unload_messagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lcd_pause_unload_message() &rArr; _lcd_pause_message(const char*) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
</UL>
<P><STRONG><a name="[2e6]"></a>line_to_current_position(const float&)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, motion.o(i._Z24line_to_current_positionRKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = line_to_current_position(const float&) &rArr; Planner::buffer_line(const float&, const float&, const float&, const float&, const float&, unsigned char, float) &rArr; Planner::buffer_segment(const float&, const float&, const float&, const float&, const float&, unsigned char, const float&) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&) &rArr;  idle(bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(const float&, const float&, const float&, const float&, const float&, unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unscaled_e_move(const float&, const float&)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(float, float, float, const float&)
</UL>

<P><STRONG><a name="[373]"></a>restore_trinamic_drivers()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, trinamic.o(i._Z24restore_trinamic_driversv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = restore_trinamic_drivers() &rArr; TMC2208Stepper::push() &rArr; TMC2208Stepper::GCONF(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::push()
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_stepper_drivers()
</UL>

<P><STRONG><a name="[2e3]"></a>set_bed_leveling_enabled(bool)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, bedlevel.o(i._Z24set_bed_leveling_enabledb))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bilinear_z_offset(const XYval&lang;float&rang;&)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::unapply_leveling(XYZval&lang;float&rang;&)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::apply_leveling(XYZval&lang;float&rang;&)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leveling_is_valid()
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_z_fade_height(float, bool)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_bed_level()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G30()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_toggle_bed_leveling()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[379]"></a>update_software_endstops(AxisEnum)</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, motion.o(i._Z24update_software_endstops8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = update_software_endstops(AxisEnum) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, char)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_any(const float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[d2]"></a>draw_unload_load_filament()</STRONG> (Thumb, 488 bytes, Stack size 16 bytes, menu.o(i._Z25draw_unload_load_filamentv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = draw_unload_load_filament() &rArr; MarlinUI::goto_previous_screen_no_defer() &rArr; MarlinUI::goto_previous_screen() &rArr; MarlinUI::_goto_previous_screen() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::quick_stop()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen_no_defer()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::center(unsigned short)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::trim(unsigned char)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(const char*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu_motion.o(i._Z17preheat_to_move_Ev)
<LI> menu_motion.o(i._Z27_menu_move_distance_e_maybev)
</UL>
<P><STRONG><a name="[11e]"></a>lcd_pause_heating_message()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_filament.o(i._Z25lcd_pause_heating_messagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lcd_pause_heating_message() &rArr; _lcd_pause_message(const char*) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
</UL>
<P><STRONG><a name="[115]"></a>lcd_pause_parking_message()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_filament.o(i._Z25lcd_pause_parking_messagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lcd_pause_parking_message() &rArr; _lcd_pause_message(const char*) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
</UL>
<P><STRONG><a name="[118]"></a>lcd_pause_waiting_message()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_filament.o(i._Z25lcd_pause_waiting_messagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lcd_pause_waiting_message() &rArr; _lcd_pause_message(const char*) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
</UL>
<P><STRONG><a name="[b1]"></a>timer41_zero_match_irq_cb()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, temperature.o(i._Z25timer41_zero_match_irq_cbv))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = timer41_zero_match_irq_cb() &rArr; Temperature::tick() &rArr; Temperature::readings_ready() &rArr; Temperature::min_temp_error(heater_id_t) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_ClearIrqFlag
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_timer.o(i._Z12timer41_initv)
</UL>
<P><STRONG><a name="[b2]"></a>timer42_zero_match_irq_cb()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stepper.o(i._Z25timer42_zero_match_irq_cbv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = timer42_zero_match_irq_cb() &rArr; Stepper::isr() &rArr; Stepper::block_phase_isr() &rArr; Endstops::update() &rArr; Planner::endstop_triggered(AxisEnum) &rArr; Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::wake_up() &rArr; timer_enable_irq &rArr; timer42_irq_ctrl(en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4_CNT_ClearIrqFlag
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_timer.o(i._Z12timer42_initv)
</UL>
<P><STRONG><a name="[318]"></a>bed_level_virt_interpolate()</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, abl.o(i._Z26bed_level_virt_interpolatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = bed_level_virt_interpolate() &rArr; [local to abl_cpp]::bed_level_virt_2cmr(unsigned char, unsigned char, const float&, const float&) &rArr; bed_level_virt_coord(unsigned char, unsigned char) &rArr;  bed_level_virt_coord(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to abl_cpp]::bed_level_virt_2cmr(unsigned char, unsigned char, const float&, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_bed_level()
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M421()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
</UL>

<P><STRONG><a name="[116]"></a>lcd_pause_changing_message()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, menu_filament.o(i._Z26lcd_pause_changing_messagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lcd_pause_changing_message() &rArr; _lcd_pause_message(const char*) &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh)
</UL>
<P><STRONG><a name="[e2]"></a>menu_advanced_acceleration()</STRONG> (Thumb, 2506 bytes, Stack size 80 bytes, menu_advanced.o(i._Z26menu_advanced_accelerationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = menu_advanced_acceleration() &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::action(const char*, unsigned*, unsigned, unsigned, void(*)(), bool)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::draw(bool, unsigned char, const char*, unsigned*, ...)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::action(const char*, signed char*, signed char, signed char, void(*)(), bool)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::draw(bool, unsigned char, const char*, signed char*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;unsigned, unsigned&rang;(T1, T2)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[e5]"></a>menu_advanced_steps_per_mm()</STRONG> (Thumb, 992 bytes, Stack size 48 bytes, menu_advanced.o(i._Z26menu_advanced_steps_per_mmv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = menu_advanced_steps_per_mm() &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[122]"></a>sdcard_start_selected_file()</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, menu_media.o(i._Z26sdcard_start_selected_filev))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sdcard_start_selected_file() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int, unsigned char*, unsigned)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_media.o(i._ZZN15MenuItem_sdfile6actionEPKcR10CardReaderENKUlvE_clEv)
</UL>
<P><STRONG><a name="[389]"></a>HAL_timer_interrupt_enabled(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timers.o(i._Z27HAL_timer_interrupt_enabledh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_timer_interrupt_enabled(unsigned char) &rArr; timer_irq_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
</UL>

<P><STRONG><a name="[38b]"></a>_menu_move_distance_e_maybe()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, menu_motion.o(i._Z27_menu_move_distance_e_maybev))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _menu_move_distance_e_maybe() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_ready()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_ready()::[lambda() (instance 3)]::_FUN()
</UL>

<P><STRONG><a name="[38c]"></a>get_cartesian_from_steppers()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, motion.o(i._Z27get_cartesian_from_steppersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_cartesian_from_steppers() &rArr; Planner::get_axis_position_mm(AxisEnum)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_axis_position_mm(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_from_steppers_for_axis(AxisEnum)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_detail()
</UL>

<P><STRONG><a name="[38d]"></a>prepare_line_to_destination()</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, motion.o(i._Z27prepare_line_to_destinationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = prepare_line_to_destination() &rArr; line_to_destination_cartesian() &rArr; segmented_line_to_destination(const float&, float) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(const float&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_motion_limits(XYZval&lang;float&rang;&)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to motion_cpp]::ABS&lang;float&rang;(T1)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_to_destination_cartesian()
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G0_G1()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_internal_move_to_destination(const float&)
</UL>

<P><STRONG><a name="[390]"></a>print_bilinear_leveling_grid()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, abl.o(i._Z28print_bilinear_leveling_gridv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = print_bilinear_leveling_grid() &rArr; print_2d_array(unsigned char, unsigned char, unsigned char, float(*)(unsigned char, unsigned char)) &rArr; serial_spaces(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_2d_array(unsigned char, unsigned char, unsigned char, float(*)(unsigned char, unsigned char))
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
</UL>

<P><STRONG><a name="[482]"></a>restore_feedrate_and_scaling()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, motion.o(i._Z28restore_feedrate_and_scalingv))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G30()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[391]"></a>_internal_move_to_destination(const float&)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, motion.o(i._Z29_internal_move_to_destinationRKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = _internal_move_to_destination(const float&) &rArr; prepare_line_to_destination() &rArr; line_to_destination_cartesian() &rArr; segmented_line_to_destination(const float&, float) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G42()
</UL>

<P><STRONG><a name="[38f]"></a>line_to_destination_cartesian()</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, motion.o(i._Z29line_to_destination_cartesianv))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = line_to_destination_cartesian() &rArr; segmented_line_to_destination(const float&, float) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(const float&, const float&, const float&, const float&, const float&, unsigned char, float)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segmented_line_to_destination(const float&, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
</UL>

<P><STRONG><a name="[394]"></a>remember_feedrate_and_scaling()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, motion.o(i._Z29remember_feedrate_and_scalingv))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remember_feedrate_scaling_off()
</UL>

<P><STRONG><a name="[393]"></a>remember_feedrate_scaling_off()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, motion.o(i._Z29remember_feedrate_scaling_offv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = remember_feedrate_scaling_off()
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remember_feedrate_and_scaling()
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G30()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[392]"></a>segmented_line_to_destination(const float&, float)</STRONG> (Thumb, 684 bytes, Stack size 144 bytes, motion.o(i._Z29segmented_line_to_destinationRKff))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = segmented_line_to_destination(const float&, float) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(const float&, const float&, const float&, const float&, const float&, unsigned char, float)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to motion_cpp]::ABS&lang;float&rang;(T1)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_to_destination_cartesian()
</UL>

<P><STRONG><a name="[396]"></a>extrapolate_unprobed_bed_level()</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, abl.o(i._Z30extrapolate_unprobed_bed_levelv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = extrapolate_unprobed_bed_level() &rArr; [local to abl_cpp]::extrapolate_one_point(unsigned char, unsigned char, signed char, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to abl_cpp]::extrapolate_one_point(unsigned char, unsigned char, signed char, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
</UL>

<P><STRONG><a name="[ce]"></a>lcd_power_loss_recovery_cancel()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu_job_recovery.o(i._Z30lcd_power_loss_recovery_cancelv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lcd_power_loss_recovery_cancel() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1000()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_job_recovery.o(i._Z17menu_job_recoveryv)
</UL>
<P><STRONG><a name="[399]"></a>report_current_position_detail()</STRONG> (Thumb, 372 bytes, Stack size 112 bytes, m114.o(i._Z30report_current_position_detailv))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = report_current_position_detail() &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::unapply_leveling(XYZval&lang;float&rang;&)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::apply_leveling(XYZval&lang;float&rang;&)
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_xyz(const XYZEval&lang;float&rang;&)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::position(AxisEnum)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_axis_position_mm(AxisEnum)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cartesian_from_steppers()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_xyze(const XYZEval&lang;float&rang;&, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M114()
</UL>

<P><STRONG><a name="[39b]"></a>print_bilinear_leveling_grid_virt()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, abl.o(i._Z33print_bilinear_leveling_grid_virtv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = print_bilinear_leveling_grid_virt() &rArr; print_2d_array(unsigned char, unsigned char, unsigned char, float(*)(unsigned char, unsigned char)) &rArr; serial_spaces(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_2d_array(unsigned char, unsigned char, unsigned char, float(*)(unsigned char, unsigned char))
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
</UL>

<P><STRONG><a name="[39c]"></a>report_current_position_projected()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, motion.o(i._Z33report_current_position_projectedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = report_current_position_projected() &rArr; report_logical_position(const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_logical_position(const XYZEval&lang;float&rang;&)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_a_position(const XYZval&lang;int&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M114()
</UL>

<P><STRONG><a name="[2e0]"></a>set_current_from_steppers_for_axis(AxisEnum)</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, motion.o(i._Z34set_current_from_steppers_for_axis8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_current_from_steppers_for_axis(AxisEnum) &rArr; Planner::unapply_leveling(XYZval&lang;float&rang;&) &rArr; bilinear_z_offset(const XYval&lang;float&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::unapply_leveling(XYZval&lang;float&rang;&)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_axis_position_mm(AxisEnum)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cartesian_from_steppers()
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_planner()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_down_to_z(float, float)
</UL>

<P><STRONG><a name="[d7]"></a>_menu_configuration_preheat_settings()</STRONG> (Thumb, 1146 bytes, Stack size 48 bytes, menu_configuration.o(i._Z36_menu_configuration_preheat_settingsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _menu_configuration_preheat_settings() &rArr; MenuItem_button::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::get_preheat_label(unsigned char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_function::action(const char*, void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(i._Z18menu_configurationv)
</UL>
<P><STRONG><a name="[2a9]"></a>idle(bool)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, marlincore.o(i._Z4idleb))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tick()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::outage()
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_report_temperatures()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printJobOngoing()
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pause_cpp]::ensure_safe_temperature(bool, PauseMode)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_user_response(unsigned, bool)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_confirmation(bool, signed char)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::dwell(unsigned)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::finish_and_disable()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segmented_line_to_destination(const float&, float)
</UL>

<P><STRONG><a name="[30a]"></a>kill(const char*, const char*, bool)</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, marlincore.o(i._Z4killPKcS0_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shut_off_power
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::kill_screen(const char*, const char*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::validate_homing_move()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loud_kill(const char*, heater_id_t)
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(int, unsigned char)
</UL>

<P><STRONG><a name="[23a]"></a>tone(unsigned char, unsigned short, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tone.o(i._Z4tonehtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tone(unsigned char, unsigned short, unsigned) &rArr; timer01B_set_overflow(unsigned short) &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_set_frequency(unsigned, unsigned char)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_set_overflow(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PlayTune(unsigned char, const unsigned short*, unsigned char)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tick()
</UL>

<P><STRONG><a name="[56e]"></a>crc16(unsigned short*, const void*, unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, crc16.o(i._Z5crc16PtPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16(unsigned short*, const void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>

<P><STRONG><a name="[24c]"></a>dtostrf(double, signed char, unsigned char, char*)</STRONG> (Thumb, 432 bytes, Stack size 208 bytes, dtostrf.o(i._Z7dtostrfdahPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dtostrf(double, signed char, unsigned char, char*) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_xyze(const XYZEval&lang;float&rang;&, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3a7]"></a>minkill(bool)</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, marlincore.o(i._Z7minkillb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = minkill(bool) &rArr; Temperature::disable_all_heaters() &rArr; Temperature::start_watching_hotend(unsigned char) &rArr; HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1ms
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all_steppers()
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_e_steppers()
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::_outage()
</UL>

<P><STRONG><a name="[3ab]"></a>pinMode(unsigned char, WiringPinMode)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, io.o(i._Z7pinModeh13WiringPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setTX()
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setRX()
</UL>

<P><STRONG><a name="[3ac]"></a>HAL_init()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal.o(i._Z8HAL_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_init()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FastIO_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[3ae]"></a>LCD_Init()</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, bsp_spi_tft.o(i._Z8LCD_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LCD_Init() &rArr; LCD_GPIO_Init() &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1ms
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA8(unsigned char)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[220]"></a>delay_ms(unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_spi_tft.o(i._Z8delay_mst))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG(unsigned char)
</UL>

<P><STRONG><a name="[23f]"></a>ftostr52(const float&)</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, numtostr.o(i._Z8ftostr52RKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr52(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr42_52(const float&)
</UL>

<P><STRONG><a name="[296]"></a>ftostr63(const float&)</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, numtostr.o(i._Z8ftostr63RKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr63(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
</UL>

<P><STRONG><a name="[639]"></a>gradient(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, tft_queue.o(i._Z8gradientttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gradient(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[2ca]"></a>hex_byte(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hex_print.o(i._Z8hex_byteh))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_byte(unsigned char)
</UL>

<P><STRONG><a name="[2b9]"></a>home_dir(AxisEnum)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, g28.o(i._Z8home_dir8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to G28_cpp]::quick_home_xy()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[3af]"></a>homeaxis(AxisEnum)</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, motion.o(i._Z8homeaxis8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = homeaxis(AxisEnum) &rArr; do_homing_move(AxisEnum, float, float, bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_dir(AxisEnum)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_any(const float*)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_homing_bump_feedrate(AxisEnum)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_axis_is_at_home(AxisEnum)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[e6]"></a>menu_tmc()</STRONG> (Thumb, 532 bytes, Stack size 40 bytes, menu_tmc.o(i._Z8menu_tmcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = menu_tmc() &rArr; MenuItem_submenu::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[3b0]"></a>plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)</STRONG> (Thumb, 1882 bytes, Stack size 192 bytes, g2_g3.o(i._Z8plan_arcRK7XYZEvalIfERK5XYvalIfEbh))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to G2_G3_cpp]::ABS&lang;float&rang;(T1)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(const float&, const float&, const float&, const float&, const float&, unsigned char, float)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_motion_limits(XYZval&lang;float&rang;&)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
</UL>

<P><STRONG><a name="[3b6]"></a>say_M569(bool, const char*, bool)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, settings.o(i._Z8say_M569bPKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = say_M569(bool, const char*, bool) &rArr; serial_echo_start() &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
</UL>

<P><STRONG><a name="[3b7]"></a>say_M906(bool)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, settings.o(i._Z8say_M906b))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = say_M906(bool) &rArr; serial_echo_start() &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
</UL>

<P><STRONG><a name="[66c]"></a>scb_init()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i._Z8scb_initv))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b8]"></a>SDIO_Init()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sdio.o(i._Z9SDIO_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SDIO_Init() &rArr; steup_sdio &rArr; hal_sdio_init() &rArr; sdio_controller_init() &rArr; SDCARD_Init &rArr; [local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*) &rArr; SDMMC_Cmd6_SwitchFunc &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;steup_sdio
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
</UL>

<P><STRONG><a name="[3ba]"></a>ftostr5rj(const float&)</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, numtostr.o(i._Z9ftostr5rjRKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ftostr5rj(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui16tostr5rj(unsigned short)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float5_25::strfunc(float)
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_long5_25::strfunc(float)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float5::strfunc(float)
</UL>

<P><STRONG><a name="[3bb]"></a>loud_kill(const char*, heater_id_t)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, temperature.o(i._Z9loud_killPKc11heater_id_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_refresh()
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>

<P><STRONG><a name="[3bd]"></a>menu_item(unsigned char, bool)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ui_common.o(i._Z9menu_itemhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = menu_item(unsigned char, bool) &rArr; menu_line(unsigned char, unsigned short) &rArr; TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_line(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdbase::draw(bool, unsigned char, const char*, CardReader&, bool)
</UL>

<P><STRONG><a name="[3be]"></a>menu_line(unsigned char, unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ui_common.o(i._Z9menu_lineht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = menu_line(unsigned char, unsigned short) &rArr; TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_hotend_status(unsigned char, unsigned char)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_item(unsigned char, bool)
</UL>

<P><STRONG><a name="[10f]"></a>menu_main()</STRONG> (Thumb, 2368 bytes, Stack size 56 bytes, menu_main.o(i._Z9menu_mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = menu_main() &rArr; MenuItem_submenu::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsPaused()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsActive()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> marlinui.o(i._ZN8MarlinUI13status_screenEv)
<LI> marlinui.o(i._ZN8MarlinUI6updateEv)
</UL>
<P><STRONG><a name="[fe]"></a>menu_move()</STRONG> (Thumb, 1104 bytes, Stack size 40 bytes, menu_motion.o(i._Z9menu_movev))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = menu_move() &rArr; MenuItem_gcode::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_gcode::action(const char*, const char*)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_gcode::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[fc]"></a>menu_tune()</STRONG> (Thumb, 1442 bytes, Stack size 48 bytes, menu_tune.o(i._Z9menu_tunev))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = menu_tune() &rArr; MenuItem_submenu::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::hotend_max_target(unsigned char)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::enable_encoder_multiplier(bool)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::push_current_screen()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_screen(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu_main.o(i._Z9menu_mainv)
<LI> marlinui.o(i._ZN8MarlinUI13status_screenEv)
</UL>
<P><STRONG><a name="[3bf]"></a>print_xyz(const XYZval&lang;float&rang;&, const char*, const char*)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, m211.o(i._Z9print_xyzRK6XYZvalIfEPKcS4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = print_xyz(const XYZval&lang;float&rang;&, const char*, const char*) &rArr; print_xyz(const float&, const float&, const float&, const char*, const char*) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(const float&, const float&, const float&, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
</UL>

<P><STRONG><a name="[3c0]"></a>print_xyz(const float&, const float&, const float&, const char*, const char*)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, serial.o(i._Z9print_xyzRKfS0_S0_PKcS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = print_xyz(const float&, const float&, const float&, const char*, const char*) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(const XYZval&lang;float&rang;&, const char*, const char*)
</UL>

<P><STRONG><a name="[10c]"></a>read_byte(unsigned char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tft_string.o(i._Z9read_bytePh))
<BR>[Address Reference Count : 2]<UL><LI> tft_string.o(i._ZN10TFT_String3addEPhh)
<LI> tft_string.o(i._ZN10TFT_String3addEPhaS0_)
</UL>
<P><STRONG><a name="[3c1]"></a>say_units(bool)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, settings.o(i._Z9say_unitsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = say_units(bool) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
</UL>

<P><STRONG><a name="[1fd]"></a>sdio_read(unsigned, unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bsp_sdio.o(i._Z9sdio_readjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sdio_read(unsigned, unsigned char*) &rArr; SDCARD_ReadBlocks &rArr; [local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short) &rArr; DMA_InitChannel &rArr; DMA_ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock_DMA
</UL>

<P><STRONG><a name="[3c2]"></a>CardReader::countItems(SdFile)</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, cardreader.o(i._ZN10CardReader10countItemsE6SdFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = CardReader::countItems(SdFile) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::is_dir_or_gcode(const directoryEntry&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countFilesInWorkDir()
</UL>

<P><STRONG><a name="[3c5]"></a>CardReader::diveToFile(bool, SdFile*&, const char*, bool)</STRONG> (Thumb, 370 bytes, Stack size 64 bytes, cardreader.o(i._ZN10CardReader10diveToFileEbRP6SdFilePKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(char*)
</UL>

<P><STRONG><a name="[3cb]"></a>CardReader::fileExists(const char*)</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, cardreader.o(i._ZN10CardReader10fileExistsEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CardReader::fileExists(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::check()
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1000()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
</UL>

<P><STRONG><a name="[3f4]"></a>CardReader::isFileOpen()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, marlinui.o(i._ZN10CardReader10isFileOpenEv))
<BR><BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isPaused()
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_get_progress()
</UL>

<P><STRONG><a name="[3cc]"></a>CardReader::removeFile(const char*)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cardreader.o(i._ZN10CardReader10removeFileEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = CardReader::removeFile(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M30()
</UL>

<P><STRONG><a name="[3ce]"></a>CardReader::openLogFile(char*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader11openLogFileEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = CardReader::openLogFile(char*) &rArr; CardReader::openFileWrite(char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M928()
</UL>

<P><STRONG><a name="[3d0]"></a>CardReader::endFilePrint()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader12endFilePrintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CardReader::endFilePrint() &rArr; SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::release()
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(char*)
</UL>

<P><STRONG><a name="[3a1]"></a>CardReader::manage_media()</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, cardreader.o(i._ZN10CardReader12manage_mediaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = CardReader::manage_media() &rArr; PrintJobRecovery::check() &rArr;  GcodeSuite::process_subcommands_now_P(const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::check()
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::release()
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::media_changed(unsigned char, unsigned char)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::detected()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
</UL>

<P><STRONG><a name="[3d6]"></a>CardReader::openFileRead(char*, unsigned char)</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, cardreader.o(i._ZN10CardReader12openFileReadEPch))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = CardReader::openFileRead(char*, unsigned char) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::getAbsFilename(char*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M23()
</UL>

<P><STRONG><a name="[3da]"></a>CardReader::printListing(SdFile, const char*)</STRONG> (Thumb, 292 bytes, Stack size 144 bytes, cardreader.o(i._ZN10CardReader12printListingE6SdFilePKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + In Cycle
<LI>Call Chain = CardReader::printListing(SdFile, const char*) &rArr;  CardReader::printListing(SdFile, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::is_dir_or_gcode(const directoryEntry&)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFilename(char*, const directoryEntry&)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[3dd]"></a>CardReader::selectByName(SdFile, const char*)</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, cardreader.o(i._ZN10CardReader12selectByNameE6SdFilePKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = CardReader::selectByName(SdFile, const char*) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::is_dir_or_gcode(const directoryEntry&)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFilename(char*, const directoryEntry&)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printLongPath(char*)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
</UL>

<P><STRONG><a name="[337]"></a>CardReader::get_num_Files()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader13get_num_FilesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = CardReader::get_num_Files() &rArr; CardReader::countFilesInWorkDir() &rArr; CardReader::countItems(SdFile) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countFilesInWorkDir()
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media_filelist()
</UL>

<P><STRONG><a name="[3cf]"></a>CardReader::openFileWrite(char*)</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, cardreader.o(i._ZN10CardReader13openFileWriteEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = CardReader::openFileWrite(char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_write_to_file(const char*)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openFailed(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M28()
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openLogFile(char*)
</UL>

<P><STRONG><a name="[3df]"></a>CardReader::printFilename()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, cardreader.o(i._ZN10CardReader13printFilenameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = CardReader::printFilename() &rArr; CardReader::selectFileByName(const char*) &rArr; CardReader::selectByName(SdFile, const char*) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
</UL>

<P><STRONG><a name="[3e2]"></a>CardReader::printLongPath(char*)</STRONG> (Thumb, 240 bytes, Stack size 120 bytes, cardreader.o(i._ZN10CardReader13printLongPathEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = CardReader::printLongPath(char*) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M33()
</UL>

<P><STRONG><a name="[3e4]"></a>CardReader::report_status()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader13report_statusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CardReader::report_status() &rArr; Print::println(unsigned, int) &rArr; Print::print(unsigned, int) &rArr; Print::print(unsigned long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
</UL>

<P><STRONG><a name="[3e5]"></a>CardReader::selectByIndex(SdFile, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, cardreader.o(i._ZN10CardReader13selectByIndexE6SdFileh))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = CardReader::selectByIndex(SdFile, unsigned char) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::is_dir_or_gcode(const directoryEntry&)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createFilename(char*, const directoryEntry&)
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByIndex(unsigned short)
</UL>

<P><STRONG><a name="[3e6]"></a>CardReader::write_command(char*)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cardreader.o(i._ZN10CardReader13write_commandEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CardReader::write_command(char*) &rArr; SdFile::write(const char*) &rArr; SdBaseFile::write(const void*, unsigned short) &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const char*)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
</UL>

<P><STRONG><a name="[3d8]"></a>CardReader::getAbsFilename(char*)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, cardreader.o(i._ZN10CardReader14getAbsFilenameEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CardReader::getAbsFilename(char*) &rArr; CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const &rArr; SdBaseFile::getDosName(char*) &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::prepare()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
</UL>

<P><STRONG><a name="[27a]"></a>CardReader::startFileprint()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader14startFileprintEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CardReader::startFileprint()
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
</UL>

<P><STRONG><a name="[3ea]"></a>CardReader::fileHasFinished()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader15fileHasFinishedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + In Cycle
<LI>Call Chain = CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::startFileprint()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
</UL>

<P><STRONG><a name="[3c3]"></a>CardReader::is_dir_or_gcode(const directoryEntry&)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cardreader.o(i._ZN10CardReader15is_dir_or_gcodeERK14directoryEntry))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByIndex(SdFile, unsigned char)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countItems(SdFile)
</UL>

<P><STRONG><a name="[61c]"></a>CardReader::longest_filename()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, marlinui.o(i._ZN10CardReader16longest_filenameEv))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
</UL>

<P><STRONG><a name="[388]"></a>CardReader::openAndPrintFile(const char*)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cardreader.o(i._ZN10CardReader16openAndPrintFileEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CardReader::openAndPrintFile(const char*) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89sprintf
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_start_selected_file()
</UL>

<P><STRONG><a name="[3d9]"></a>CardReader::selectFileByName(const char*)</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, cardreader.o(i._ZN10CardReader16selectFileByNameEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = CardReader::selectFileByName(const char*) &rArr; CardReader::selectByName(SdFile, const char*) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(char*)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
</UL>

<P><STRONG><a name="[338]"></a>CardReader::selectFileByIndex(unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, cardreader.o(i._ZN10CardReader17selectFileByIndexEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = CardReader::selectFileByIndex(unsigned short) &rArr; CardReader::selectByIndex(SdFile, unsigned char) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByIndex(SdFile, unsigned char)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media_filelist()
</UL>

<P><STRONG><a name="[3de]"></a>CardReader::countFilesInWorkDir()</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, cardreader.o(i._ZN10CardReader19countFilesInWorkDirEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = CardReader::countFilesInWorkDir() &rArr; CardReader::countItems(SdFile) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countItems(SdFile)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::get_num_Files()
</UL>

<P><STRONG><a name="[3ed]"></a>CardReader::jobRecoverFileExists()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader20jobRecoverFileExistsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = CardReader::jobRecoverFileExists() &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
</UL>

<P><STRONG><a name="[339]"></a>CardReader::cd(const char*)</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, cardreader.o(i._ZN10CardReader2cdEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = CardReader::cd(const char*) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media_filelist()
</UL>

<P><STRONG><a name="[3ee]"></a>CardReader::ls()</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, cardreader.o(i._ZN10CardReader2lsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = CardReader::ls() &rArr; CardReader::printListing(SdFile, const char*) &rArr;  CardReader::printListing(SdFile, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M20()
</UL>

<P><STRONG><a name="[401]"></a>CardReader::eof()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i._ZN10CardReader3eofEv))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
</UL>

<P><STRONG><a name="[26c]"></a>CardReader::cdup()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader4cdupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CardReader::cdup() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_sd_updir()
</UL>

<P><STRONG><a name="[3d2]"></a>CardReader::mount()</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, cardreader.o(i._ZN10CardReader5mountEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = CardReader::mount() &rArr; SdBaseFile::openRoot(SdVolume*) &rArr; SdVolume::chainSize(unsigned, unsigned*) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init()
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::init(Sd2Card*, unsigned char)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openRoot(SdVolume*)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cdroot()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M21()
</UL>

<P><STRONG><a name="[3f1]"></a>CardReader::cdroot()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader6cdrootEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CardReader::cdroot() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
</UL>

<P><STRONG><a name="[3d3]"></a>CardReader::release()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader7releaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CardReader::release() &rArr; CardReader::endFilePrint() &rArr; SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M22()
</UL>

<P><STRONG><a name="[3f3]"></a>CardReader::isPaused()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, marlinui.o(i._ZN10CardReader8isPausedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CardReader::isPaused()
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_screen()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::resume_print()
</UL>

<P><STRONG><a name="[3f5]"></a>CardReader::closefile(bool)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReader9closefileEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CardReader::closefile(bool) &rArr; SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M524()
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M30()
</UL>

<P><STRONG><a name="[225]"></a>CardReader::isMounted()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, powerloss.o(i._ZN10CardReader9isMountedEv))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::check()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::startFileprint()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::get_num_Files()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media_filelist()
</UL>

<P><STRONG><a name="[3f7]"></a>CardReader::CardReader()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReaderC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CardReader::CardReader() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_MarlinCore_cpp_card
</UL>

<P><STRONG><a name="[6e0]"></a>CardReader::CardReader__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, cardreader.o(i._ZN10CardReaderC1Ev), UNUSED)

<P><STRONG><a name="[3f8]"></a>GCodeQueue::ok_to_send()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, queue.o(i._ZN10GCodeQueue10ok_to_sendEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GCodeQueue::ok_to_send() &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend()
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[3f9]"></a>GCodeQueue::enqueue_one_P(const char*)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, queue.o(i._ZN10GCodeQueue13enqueue_one_PEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GCodeQueue::enqueue_one_P(const char*) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::_enqueue(const char*, bool)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[403]"></a>GCodeQueue::_commit_command(bool)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue15_commit_commandEb))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::_enqueue(const char*, bool)
</UL>

<P><STRONG><a name="[3fc]"></a>GCodeQueue::gcode_line_error(const char*, signed char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, queue.o(i._ZN10GCodeQueue16gcode_line_errorEPKca))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GCodeQueue::gcode_line_error(const char*, signed char) &rArr; GCodeQueue::flush_and_request_resend() &rArr; Print::println(long, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(long, int)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_serial(unsigned char)
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend()
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[3ff]"></a>GCodeQueue::get_sdcard_commands()</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, queue.o(i._ZN10GCodeQueue19get_sdcard_commandsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeat::early_parse_M808(char*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::eof()
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stream_char(char, unsigned char&, char(&)[96], int&)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_line_done(unsigned char&, char(&)[96], int&)
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read()
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::_commit_command(bool)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_available_commands()
</UL>

<P><STRONG><a name="[405]"></a>GCodeQueue::get_serial_commands()</STRONG> (Thumb, 586 bytes, Stack size 48 bytes, queue.o(i._ZN10GCodeQueue19get_serial_commandsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = GCodeQueue::get_serial_commands() &rArr; process_line_done(unsigned char&, char(&)[96], int&) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::available()
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_stream_char(char, unsigned char&, char(&)[96], int&)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_line_done(unsigned char&, char(&)[96], int&)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_serial(unsigned char)
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::_enqueue(const char*, bool)
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, signed char)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_available_commands()
</UL>

<P><STRONG><a name="[307]"></a>GCodeQueue::get_available_commands()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, queue.o(i._ZN10GCodeQueue22get_available_commandsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
</UL>

<P><STRONG><a name="[3fe]"></a>GCodeQueue::flush_and_request_resend()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, queue.o(i._ZN10GCodeQueue24flush_and_request_resendEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GCodeQueue::flush_and_request_resend() &rArr; Print::println(long, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::flush()
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(long, int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::ok_to_send()
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, signed char)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M999()
</UL>

<P><STRONG><a name="[408]"></a>GCodeQueue::process_injected_command()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, queue.o(i._ZN10GCodeQueue24process_injected_commandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = GCodeQueue::process_injected_command() &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
</UL>

<P><STRONG><a name="[40b]"></a>GCodeQueue::process_injected_command_P()</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, queue.o(i._ZN10GCodeQueue26process_injected_command_PEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = GCodeQueue::process_injected_command_P() &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
</UL>

<P><STRONG><a name="[495]"></a>GCodeQueue::clear()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueue5clearEv))
<BR><BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
</UL>

<P><STRONG><a name="[40c]"></a>GCodeQueue::advance()</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, queue.o(i._ZN10GCodeQueue7advanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = GCodeQueue::advance() &rArr; GCodeQueue::process_injected_command_P() &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command()
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::ok_to_send()
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[3fb]"></a>GCodeQueue::_enqueue(const char*, bool)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, queue.o(i._ZN10GCodeQueue8_enqueueEPKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GCodeQueue::_enqueue(const char*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::_commit_command(bool)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[249]"></a>GCodeQueue::inject_P(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, marlinui.o(i._ZN10GCodeQueue8inject_PEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_gcode::action(const char*, const char*)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unload_load_filament()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_settings()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_screen()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::resume_print()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_print()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preheat_pla()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preheat_ABS()
</UL>

<P><STRONG><a name="[657]"></a>GCodeQueue::GCodeQueue()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueueC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_queue_cpp_queue
</UL>

<P><STRONG><a name="[6e1]"></a>GCodeQueue::GCodeQueue__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, queue.o(i._ZN10GCodeQueueC1Ev), UNUSED)

<P><STRONG><a name="[475]"></a>GcodeSuite::axis_is_relative(AxisEnum)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, gcode.o(i._ZN10GcodeSuite16axis_is_relativeE8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
</UL>

<P><STRONG><a name="[416]"></a>GcodeSuite::set_relative_mode(bool)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gcode.o(i._ZN10GcodeSuite17set_relative_modeEb))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[40e]"></a>GcodeSuite::T(signed char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, t.o(i._ZN10GcodeSuite1TEa))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GcodeSuite::T(signed char) &rArr; tool_change(unsigned char, bool) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[40d]"></a>GcodeSuite::process_next_command()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gcode.o(i._ZN10GcodeSuite20process_next_commandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = GcodeSuite::process_next_command() &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
</UL>

<P><STRONG><a name="[40a]"></a>GcodeSuite::process_parsed_command(bool)</STRONG> (Thumb, 1414 bytes, Stack size 8 bytes, gcode.o(i._ZN10GcodeSuite22process_parsed_commandEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::set_relative_mode(bool)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::unknown_command_warning()
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1000()
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G0_G1()
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M999()
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M997()
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M928()
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M906()
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M851()
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M808()
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M710()
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M603()
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M600()
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M569()
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M524()
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M504()
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M503()
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M502()
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M501()
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M500()
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M430()
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M421()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M412()
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M402()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M401()
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M400()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M304()
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M300()
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M204()
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M155()
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M145()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M125()
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M122()
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M121()
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M120()
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M119()
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M118()
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M115()
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M114()
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M110()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M107()
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M105()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M85()
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M83()
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M82()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M77()
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M76()
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M75()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M33()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M30()
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M29()
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M28()
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M26()
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M25()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M23()
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M22()
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M21()
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M20()
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G42()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G30()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G27()
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::T(signed char)
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::ok_to_send()
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command()
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
</UL>

<P><STRONG><a name="[471]"></a>GcodeSuite::process_subcommands_now(char*)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gcode.o(i._ZN10GcodeSuite23process_subcommands_nowEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = GcodeSuite::process_subcommands_now(char*) &rArr;  GcodeSuite::process_parsed_command(bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
</UL>

<P><STRONG><a name="[290]"></a>GcodeSuite::process_subcommands_now_P(const char*)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gcode.o(i._ZN10GcodeSuite25process_subcommands_now_PEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = GcodeSuite::process_subcommands_now_P(const char*) &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::check()
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_babystep_zoffset()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
</UL>

<P><STRONG><a name="[472]"></a>GcodeSuite::get_destination_from_command()</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, gcode.o(i._ZN10GcodeSuite28get_destination_from_commandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GcodeSuite::get_destination_from_command() &rArr; GCodeParser::value_linear_units() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::axis_is_relative(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G0_G1()
</UL>

<P><STRONG><a name="[411]"></a>GcodeSuite::G4()</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, g4.o(i._ZN10GcodeSuite2G4Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = GcodeSuite::G4() &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::dwell(unsigned)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::has_status()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[47a]"></a>GcodeSuite::get_target_extruder_from_command()</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, gcode.o(i._ZN10GcodeSuite32get_target_extruder_from_commandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GcodeSuite::get_target_extruder_from_command() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M906()
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M603()
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M600()
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M569()
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M105()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
</UL>

<P><STRONG><a name="[412]"></a>GcodeSuite::G27()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, g27.o(i._ZN10GcodeSuite3G27Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = GcodeSuite::G27() &rArr; Nozzle::park(unsigned char, const XYZval&lang;float&rang;&) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::ushortval(char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[413]"></a>GcodeSuite::G28()</STRONG> (Thumb, 522 bytes, Stack size 56 bytes, g28.o(i._ZN10GcodeSuite3G28Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = GcodeSuite::G28() &rArr; homeaxis(AxisEnum) &rArr; do_homing_move(AxisEnum, float, float, bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axes_should_home(unsigned char)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_machine_info()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable(bool)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::not_homing()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homeaxis(AxisEnum)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_z_clearance(const float&, bool, bool, bool)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to G28_cpp]::quick_home_xy()
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remember_feedrate_scaling_off()
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_feedrate_and_scaling()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[414]"></a>GcodeSuite::G29()</STRONG> (Thumb, 2654 bytes, Stack size 176 bytes, g29.o(i._ZN10GcodeSuite3G29Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184 + In Cycle
<LI>Call Chain = GcodeSuite::G29() &rArr;  GcodeSuite::process_subcommands_now_P(const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bilinear_z_offset(const XYval&lang;float&rang;&)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_machine_info()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::clear()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leveling_is_valid()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_bed_level()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::isnan(float)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bilinear_leveling_grid_virt()
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extrapolate_unprobed_bed_level()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bilinear_leveling_grid()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_level_virt_interpolate()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_bed_level()
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to G29_cpp]::LIMIT&lang;signed char, int, int&rang;(T1&, T2, T3)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to G29_cpp]::_MIN&lang;short, int&rang;(T1, T2)
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to G29_cpp]::_MIN&lang;float, float&rang;(T1, T2)
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to G29_cpp]::_MAX&lang;int, float&rang;(T1, T2)
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::can_reach(const XYval&lang;float&rang;&)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::min_y()
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::min_x()
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::max_y()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::max_x()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::linearval(char, float)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_alert_status_P(const char*)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_printf_P(unsigned char, const char*, ...)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::preheat_for_probing(unsigned short, unsigned short)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::set_deployed(bool)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remember_feedrate_scaling_off()
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_feedrate_and_scaling()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[415]"></a>GcodeSuite::G30()</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, g30.o(i._ZN10GcodeSuite3G30Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = GcodeSuite::G30() &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::can_reach(const float&, const float&)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::linearval(char, float)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remember_feedrate_scaling_off()
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_feedrate_and_scaling()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[418]"></a>GcodeSuite::G42()</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, g42.o(i._ZN10GcodeSuite3G42Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = GcodeSuite::G42() &rArr; _internal_move_to_destination(const float&) &rArr; prepare_line_to_destination() &rArr; line_to_destination_cartesian() &rArr; segmented_line_to_destination(const float&, float) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_int()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_internal_move_to_destination(const float&)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[417]"></a>GcodeSuite::G92()</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, g92.o(i._ZN10GcodeSuite3G92Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = GcodeSuite::G92() &rArr; sync_plan_position_e() &rArr; Planner::set_e_position_mm(const float&) &rArr; Stepper::set_axis_position(AxisEnum, const int&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_workspace_offset(AxisEnum)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position_e()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[41b]"></a>GcodeSuite::M17()</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, m17_m18_m84.o(i._ZN10GcodeSuite3M17Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GcodeSuite::M17() &rArr; MarlinUI::set_status_P(const char*, signed char) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_all_steppers()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[41c]"></a>GcodeSuite::M20()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, m20.o(i._ZN10GcodeSuite3M20Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = GcodeSuite::M20() &rArr; CardReader::ls() &rArr; CardReader::printListing(SdFile, const char*) &rArr;  CardReader::printListing(SdFile, const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[41d]"></a>GcodeSuite::M21()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m21_m22.o(i._ZN10GcodeSuite3M21Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GcodeSuite::M21() &rArr; CardReader::mount() &rArr; SdBaseFile::openRoot(SdVolume*) &rArr; SdVolume::chainSize(unsigned, unsigned*) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[41e]"></a>GcodeSuite::M22()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m21_m22.o(i._ZN10GcodeSuite3M22Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GcodeSuite::M22() &rArr; CardReader::release() &rArr; CardReader::endFilePrint() &rArr; SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::release()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[41f]"></a>GcodeSuite::M23()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m23.o(i._ZN10GcodeSuite3M23Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = GcodeSuite::M23() &rArr; CardReader::openFileRead(char*, unsigned char) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[420]"></a>GcodeSuite::M24()</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, m24_m25.o(i._ZN10GcodeSuite3M24Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = GcodeSuite::M24() &rArr; resume_print(const float&, const float&, const float&, signed char, short) &rArr; load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode) &rArr; [local to pause_cpp]::ensure_safe_temperature(bool, PauseMode) &rArr; Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::prepare()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::startFileprint()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::resume(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[421]"></a>GcodeSuite::M25()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m24_m25.o(i._ZN10GcodeSuite3M25Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = GcodeSuite::M25() &rArr; GcodeSuite::M125() &rArr; resume_print(const float&, const float&, const float&, signed char, short) &rArr; load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode) &rArr; [local to pause_cpp]::ensure_safe_temperature(bool, PauseMode) &rArr; Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M125()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[422]"></a>GcodeSuite::M26()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, m26.o(i._ZN10GcodeSuite3M26Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = GcodeSuite::M26() &rArr; SdBaseFile::seekSet(unsigned) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[423]"></a>GcodeSuite::M27()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m27.o(i._ZN10GcodeSuite3M27Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = GcodeSuite::M27() &rArr; CardReader::printFilename() &rArr; CardReader::selectFileByName(const char*) &rArr; CardReader::selectByName(SdFile, const char*) &rArr; SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[424]"></a>GcodeSuite::M28()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m28_m29.o(i._ZN10GcodeSuite3M28Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = GcodeSuite::M28() &rArr; CardReader::openFileWrite(char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[425]"></a>GcodeSuite::M29()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m28_m29.o(i._ZN10GcodeSuite3M29Ev))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[426]"></a>GcodeSuite::M30()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m30.o(i._ZN10GcodeSuite3M30Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = GcodeSuite::M30() &rArr; CardReader::removeFile(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[42a]"></a>GcodeSuite::M31()</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, m31.o(i._ZN10GcodeSuite3M31Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GcodeSuite::M31() &rArr; duration_t::toString(char*) const &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toString(char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[427]"></a>GcodeSuite::M32()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, m32.o(i._ZN10GcodeSuite3M32Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = GcodeSuite::M32() &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::startFileprint()
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[428]"></a>GcodeSuite::M33()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m33.o(i._ZN10GcodeSuite3M33Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = GcodeSuite::M33() &rArr; CardReader::printLongPath(char*) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printLongPath(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[42b]"></a>GcodeSuite::M48()</STRONG> (Thumb, 1944 bytes, Stack size 176 bytes, m48.o(i._ZN10GcodeSuite3M48Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy(const XYval&lang;float&rang;&, const float&)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::isnan(float)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to M48_cpp]::LIMIT&lang;float, int, int&rang;(T1&, T2, T3)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()::[lambda(bool, const float&, const float&, const float&, const float&, bool) (instance 1)]::operator ()(bool, const float&, const float&, const float&, const float&, bool) const
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::can_reach(const float&, const float&)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::linearval(char, float)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_printf_P(unsigned char, const char*, ...)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::set_deployed(bool)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remember_feedrate_scaling_off()
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_feedrate_and_scaling()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[42c]"></a>GcodeSuite::M75()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m75-m78.o(i._ZN10GcodeSuite3M75Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GcodeSuite::M75() &rArr; startOrResumeJob() &rArr; Stopwatch::start() &rArr; Stopwatch::duration()
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[42d]"></a>GcodeSuite::M76()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m75-m78.o(i._ZN10GcodeSuite3M76Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GcodeSuite::M76() &rArr; Stopwatch::pause()
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::pause()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[42e]"></a>GcodeSuite::M77()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m75-m78.o(i._ZN10GcodeSuite3M77Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GcodeSuite::M77() &rArr; Stopwatch::stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[43a]"></a>GcodeSuite::M81()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, m80_m81.o(i._ZN10GcodeSuite3M81Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = GcodeSuite::M81() &rArr; Planner::finish_and_disable() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::finish_and_disable()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[43b]"></a>GcodeSuite::M82()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, m82_m83.o(i._ZN10GcodeSuite3M82Ev))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[43c]"></a>GcodeSuite::M83()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, m82_m83.o(i._ZN10GcodeSuite3M83Ev))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[43e]"></a>GcodeSuite::M85()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, m85.o(i._ZN10GcodeSuite3M85Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GcodeSuite::M85() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[43f]"></a>GcodeSuite::M92()</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, m92.o(i._ZN10GcodeSuite3M92Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GcodeSuite::M92() &rArr; GCodeParser::value_per_axis_units(AxisEnum) &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_per_axis_units(AxisEnum)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[42f]"></a>GcodeSuite::M104()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, m104_m109.o(i._ZN10GcodeSuite4M104Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GcodeSuite::M104() &rArr; Planner::autotemp_M104_M109() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to M104_M109_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[431]"></a>GcodeSuite::M105()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, m105.o(i._ZN10GcodeSuite4M105Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GcodeSuite::M105() &rArr; Temperature::print_heater_states(unsigned char) &rArr; [local to temperature_cpp]::print_heater_state(const float&, const float&, float, heater_id_t) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[432]"></a>GcodeSuite::M106()</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, m106_m107.o(i._ZN10GcodeSuite4M106Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GcodeSuite::M106() &rArr; GCodeParser::byteval(char, unsigned char) &rArr; GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[433]"></a>GcodeSuite::M107()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m106_m107.o(i._ZN10GcodeSuite4M107Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GcodeSuite::M107() &rArr; GCodeParser::byteval(char, unsigned char) &rArr; GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[430]"></a>GcodeSuite::M109()</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, m104_m109.o(i._ZN10GcodeSuite4M109Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = GcodeSuite::M109() &rArr; Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_heating_message(unsigned char)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to M104_M109_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[434]"></a>GcodeSuite::M110()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, m110.o(i._ZN10GcodeSuite4M110Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GcodeSuite::M110() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[435]"></a>GcodeSuite::M111()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, m111.o(i._ZN10GcodeSuite4M111Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GcodeSuite::M111() &rArr; GCodeParser::byteval(char, unsigned char) &rArr; GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[440]"></a>GcodeSuite::M114()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, m114.o(i._ZN10GcodeSuite4M114Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = GcodeSuite::M114() &rArr; report_current_position_detail() &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::position(AxisEnum)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_projected()
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_detail()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[441]"></a>GcodeSuite::M115()</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, m115.o(i._ZN10GcodeSuite4M115Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GcodeSuite::M115() &rArr; [local to M115_cpp]::cap_line(const char*, bool) &rArr; Print::println(int, int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M115_cpp]::cap_line(const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[442]"></a>GcodeSuite::M118()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, m118.o(i._ZN10GcodeSuite4M118Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GcodeSuite::M118() &rArr; Print::println(const char*) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[443]"></a>GcodeSuite::M119()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m119.o(i._ZN10GcodeSuite4M119Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GcodeSuite::M119() &rArr; Endstops::report_states() &rArr; [local to endstops_cpp]::print_es_state(bool, const char*) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::report_states()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[444]"></a>GcodeSuite::M120()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m120_m121.o(i._ZN10GcodeSuite4M120Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = GcodeSuite::M120() &rArr; Endstops::enable_globally(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[445]"></a>GcodeSuite::M121()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m120_m121.o(i._ZN10GcodeSuite4M121Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = GcodeSuite::M121() &rArr; Endstops::enable_globally(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[468]"></a>GcodeSuite::M122()</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, m122.o(i._ZN10GcodeSuite4M122Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GcodeSuite::M122() &rArr; tmc_report_all(bool, bool, bool, bool) &rArr; [local to tmc_util_cpp]::tmc_debug_loop(TMC_debug_enum, bool, bool, bool, bool) &rArr; void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum) &rArr; TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;::rms_current() &rArr; TMCStepper::rms_current() &rArr; TMCStepper::cs2rms(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tmc_connection(bool, bool, bool, bool)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmc_get_registers(bool, bool, bool, bool)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmc_report_all(bool, bool, bool, bool)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_stepper_drivers()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[439]"></a>GcodeSuite::M125()</STRONG> (Thumb, 386 bytes, Stack size 64 bytes, m125.o(i._ZN10GcodeSuite4M125Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = GcodeSuite::M125() &rArr; resume_print(const float&, const float&, const float&, signed char, short) &rArr; load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode) &rArr; [local to pause_cpp]::ensure_safe_temperature(bool, PauseMode) &rArr; Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_show_message(PauseMessage, PauseMode, unsigned char)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_confirmation(bool, signed char)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_print(const float&, const XYZval&lang;float&rang;&, const float&, bool)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::linearval(char, float)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M25()
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[436]"></a>GcodeSuite::M140()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, m140_m190.o(i._ZN10GcodeSuite4M140Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GcodeSuite::M140() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetBed(short)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to M140_M190_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[446]"></a>GcodeSuite::M145()</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, m145.o(i._ZN10GcodeSuite4M145Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GcodeSuite::M145() &rArr; GCodeParser::value_int() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_int()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[438]"></a>GcodeSuite::M155()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, m155.o(i._ZN10GcodeSuite4M155Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GcodeSuite::M155() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[437]"></a>GcodeSuite::M190()</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, m140_m190.o(i._ZN10GcodeSuite4M190Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = GcodeSuite::M190() &rArr; Temperature::wait_for_bed(bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetBed(short)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to M140_M190_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[447]"></a>GcodeSuite::M200()</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, m200-m205.o(i._ZN10GcodeSuite4M200Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GcodeSuite::M200() &rArr; GCodeParser::value_linear_units() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_volumetric_multipliers()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[448]"></a>GcodeSuite::M201()</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, m200-m205.o(i._ZN10GcodeSuite4M201Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GcodeSuite::M201() &rArr; GCodeParser::value_axis_units(AxisEnum) &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_max_acceleration(unsigned char, float)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[449]"></a>GcodeSuite::M203()</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, m200-m205.o(i._ZN10GcodeSuite4M203Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GcodeSuite::M203() &rArr; GCodeParser::value_axis_units(AxisEnum) &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_max_feedrate(unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[44a]"></a>GcodeSuite::M204()</STRONG> (Thumb, 352 bytes, Stack size 8 bytes, m200-m205.o(i._ZN10GcodeSuite4M204Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GcodeSuite::M204() &rArr; GCodeParser::value_linear_units() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[44b]"></a>GcodeSuite::M205()</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, m200-m205.o(i._ZN10GcodeSuite4M205Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GcodeSuite::M205() &rArr; GCodeParser::value_linear_units() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_max_jerk(AxisEnum, float)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[44c]"></a>GcodeSuite::M206()</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, m206_m428.o(i._ZN10GcodeSuite4M206Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GcodeSuite::M206() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_home_offset(AxisEnum, float)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m206_report()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[44d]"></a>GcodeSuite::M211()</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, m211.o(i._ZN10GcodeSuite4M211Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GcodeSuite::M211() &rArr; print_xyz(const XYZval&lang;float&rang;&, const char*, const char*) &rArr; print_xyz(const float&, const float&, const float&, const char*, const char*) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_onoff(bool)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(const XYZval&lang;float&rang;&, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[44e]"></a>GcodeSuite::M220()</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, m220.o(i._ZN10GcodeSuite4M220Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GcodeSuite::M220() &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[44f]"></a>GcodeSuite::M221()</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, m221.o(i._ZN10GcodeSuite4M221Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GcodeSuite::M221() &rArr; GcodeSuite::get_target_extruder_from_command() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[450]"></a>GcodeSuite::M290()</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, m290.o(i._ZN10GcodeSuite4M290Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GcodeSuite::M290() &rArr; GCodeParser::value_axis_units(AxisEnum) &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_mm(AxisEnum, const float&)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[451]"></a>GcodeSuite::M300()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, m300.o(i._ZN10GcodeSuite4M300Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GcodeSuite::M300() &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr;  Temperature::manage_heater() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::ushortval(char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[452]"></a>GcodeSuite::M301()</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, m301.o(i._ZN10GcodeSuite4M301Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GcodeSuite::M301() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[454]"></a>GcodeSuite::M302()</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, m302.o(i._ZN10GcodeSuite4M302Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GcodeSuite::M302() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[455]"></a>GcodeSuite::M303()</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, m303.o(i._ZN10GcodeSuite4M303Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = GcodeSuite::M303() &rArr; Temperature::PID_autotune(const float&, heater_id_t, signed char, bool) &rArr; MarlinUI::update() &rArr; ManualMove::task() &rArr; Planner::buffer_line(const float&, const float&, const float&, const float&, const float&, unsigned char, float) &rArr; Planner::buffer_segment(const float&, const float&, const float&, const float&, const float&, unsigned char, const float&) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&) &rArr;  idle(bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::intval(char, short)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(const float&, heater_id_t, signed char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[453]"></a>GcodeSuite::M304()</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, m304.o(i._ZN10GcodeSuite4M304Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GcodeSuite::M304() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[456]"></a>GcodeSuite::M400()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m400.o(i._ZN10GcodeSuite4M400Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = GcodeSuite::M400() &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[457]"></a>GcodeSuite::M401()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m401_m402.o(i._ZN10GcodeSuite4M401Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = GcodeSuite::M401() &rArr; Probe::set_deployed(bool) &rArr; Probe::do_z_raise(float) &rArr; do_z_clearance(const float&, bool, bool, bool) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::set_deployed(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[458]"></a>GcodeSuite::M402()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, m401_m402.o(i._ZN10GcodeSuite4M402Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = GcodeSuite::M402() &rArr; Probe::set_deployed(bool) &rArr; Probe::do_z_raise(float) &rArr; do_z_clearance(const float&, bool, bool, bool) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::set_deployed(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[459]"></a>GcodeSuite::M412()</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, m412.o(i._ZN10GcodeSuite4M412Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GcodeSuite::M412() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintln_onoff(bool)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[46e]"></a>GcodeSuite::M413()</STRONG> (Thumb, 470 bytes, Stack size 8 bytes, m413.o(i._ZN10GcodeSuite4M413Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = GcodeSuite::M413() &rArr; CardReader::fileExists(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintln_onoff(bool)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::_outage()
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::enable(bool)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::debug(const char*)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::load()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::jobRecoverFileExists()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[45a]"></a>GcodeSuite::M420()</STRONG> (Thumb, 644 bytes, Stack size 48 bytes, m420.o(i._ZN10GcodeSuite4M420Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = GcodeSuite::M420() &rArr; set_z_fade_height(float, bool) &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(double, int)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintln_onoff(bool)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_z_fade_height(float, bool)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leveling_is_valid()
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bilinear_leveling_grid_virt()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_bilinear_leveling_grid()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_level_virt_interpolate()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[45b]"></a>GcodeSuite::M421()</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, m421.o(i._ZN10GcodeSuite4M421Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GcodeSuite::M421() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_level_virt_interpolate()
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::intval(char, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[45c]"></a>GcodeSuite::M428()</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, m206_m428.o(i._ZN10GcodeSuite4M428Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GcodeSuite::M428() &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr;  Temperature::manage_heater() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_alert_status_P(const char*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_home_offset(AxisEnum, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[45d]"></a>GcodeSuite::M430()</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, m430.o(i._ZN10GcodeSuite4M430Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GcodeSuite::M430() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[45e]"></a>GcodeSuite::M500()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m500-m504.o(i._ZN10GcodeSuite4M500Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GcodeSuite::M500() &rArr; MarlinSettings::save() &rArr; PersistentStore::access_finish() &rArr; eeprom_buffer_flush &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[45f]"></a>GcodeSuite::M501()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m500-m504.o(i._ZN10GcodeSuite4M501Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = GcodeSuite::M501() &rArr; MarlinSettings::load() &rArr; MarlinSettings::validate() &rArr; MarlinSettings::_load() &rArr; MarlinSettings::postprocess() &rArr; set_z_fade_height(float, bool) &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[460]"></a>GcodeSuite::M502()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m500-m504.o(i._ZN10GcodeSuite4M502Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = GcodeSuite::M502() &rArr; MarlinSettings::reset() &rArr; MarlinSettings::postprocess() &rArr; set_z_fade_height(float, bool) &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[461]"></a>GcodeSuite::M503()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m500-m504.o(i._ZN10GcodeSuite4M503Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GcodeSuite::M503() &rArr; MarlinSettings::report(bool) &rArr; report_M92(bool, signed char) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[462]"></a>GcodeSuite::M504()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m500-m504.o(i._ZN10GcodeSuite4M504Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = GcodeSuite::M504() &rArr; MarlinSettings::validate() &rArr; MarlinSettings::_load() &rArr; MarlinSettings::postprocess() &rArr; set_z_fade_height(float, bool) &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::validate()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[463]"></a>GcodeSuite::M524()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, m524.o(i._ZN10GcodeSuite4M524Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = GcodeSuite::M524() &rArr; CardReader::closefile(bool) &rArr; SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[46a]"></a>GcodeSuite::M569()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m569.o(i._ZN10GcodeSuite4M569Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GcodeSuite::M569() &rArr; [local to M569_cpp]::set_stealth_status(bool, signed char) &rArr; GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M569_cpp]::set_stealth_status(bool, signed char)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M569_cpp]::say_stealth_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[464]"></a>GcodeSuite::M600()</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, m600.o(i._ZN10GcodeSuite4M600Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = GcodeSuite::M600() &rArr; resume_print(const float&, const float&, const float&, signed char, short) &rArr; load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode) &rArr; [local to pause_cpp]::ensure_safe_temperature(bool, PauseMode) &rArr; Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_show_message(PauseMessage, PauseMode, unsigned char)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_confirmation(bool, signed char)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_print(const float&, const XYZval&lang;float&rang;&, const float&, bool)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::linearval(char, float)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to M600_cpp]::ABS&lang;float&rang;(T1)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[465]"></a>GcodeSuite::M603()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, m603.o(i._ZN10GcodeSuite4M603Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GcodeSuite::M603() &rArr; GCodeParser::value_axis_units(AxisEnum) &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to M603_cpp]::NOMORE&lang;float, int&rang;(T1&, T2)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to M603_cpp]::ABS&lang;float&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[466]"></a>GcodeSuite::M710()</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, m710.o(i._ZN10GcodeSuite4M710Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GcodeSuite::M710() &rArr; GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M710_report(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[46b]"></a>GcodeSuite::M808()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, m808.o(i._ZN10GcodeSuite4M808Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GcodeSuite::M808() &rArr; GCodeParser::seen(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeat::cancel()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[467]"></a>GcodeSuite::M851()</STRONG> (Thumb, 584 bytes, Stack size 40 bytes, m851.o(i._ZN10GcodeSuite4M851Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GcodeSuite::M851() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[469]"></a>GcodeSuite::M906()</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, m906.o(i._ZN10GcodeSuite4M906Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GcodeSuite::M906() &rArr; TMCStepper::rms_current(unsigned short) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current(unsigned short)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[429]"></a>GcodeSuite::M928()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m928.o(i._ZN10GcodeSuite4M928Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = GcodeSuite::M928() &rArr; CardReader::openLogFile(char*) &rArr; CardReader::openFileWrite(char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openLogFile(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[46c]"></a>GcodeSuite::M997()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m997.o(i._ZN10GcodeSuite4M997Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GcodeSuite::M997() &rArr; GCodeParser::intval(char, short) &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashFirmware(short)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::intval(char, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[46d]"></a>GcodeSuite::M999()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m999.o(i._ZN10GcodeSuite4M999Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GcodeSuite::M999() &rArr; GCodeParser::boolval(char, bool) &rArr; GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend()
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[40f]"></a>GcodeSuite::G0_G1()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, g0_g1.o(i._ZN10GcodeSuite5G0_G1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = GcodeSuite::G0_G1() &rArr; prepare_line_to_destination() &rArr; line_to_destination_cartesian() &rArr; segmented_line_to_destination(const float&, float) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[410]"></a>GcodeSuite::G2_G3(bool)</STRONG> (Thumb, 782 bytes, Stack size 128 bytes, g2_g3.o(i._ZN10GcodeSuite5G2_G3Eb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = GcodeSuite::G2_G3(bool) &rArr; plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[41a]"></a>GcodeSuite::M0_M1()</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, m0_m1.o(i._ZN10GcodeSuite5M0_M1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = GcodeSuite::M0_M1() &rArr; wait_for_user_response(unsigned, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_user_response(unsigned, bool)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[46f]"></a>GcodeSuite::M1000()</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, m1000.o(i._ZN10GcodeSuite5M1000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = GcodeSuite::M1000() &rArr; CardReader::fileExists(const char*) &rArr; CardReader::diveToFile(bool, SdFile*&, const char*, bool) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_loss_recovery_cancel()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[470]"></a>GcodeSuite::M1001()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, m1001.o(i._ZN10GcodeSuite5M1001Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = GcodeSuite::M1001() &rArr;  GcodeSuite::process_subcommands_now_P(const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[479]"></a>GcodeSuite::dwell(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gcode.o(i._ZN10GcodeSuite5dwellEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = GcodeSuite::dwell(unsigned) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
</UL>

<P><STRONG><a name="[43d]"></a>GcodeSuite::M18_M84()</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, m17_m18_m84.o(i._ZN10GcodeSuite7M18_M84Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = GcodeSuite::M18_M84() &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::finish_and_disable()
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[293]"></a>ManualMove::apply_diff(AxisEnum, float, float, float)</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, menu_motion.o(i._ZN10ManualMove10apply_diffE8AxisEnumfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ManualMove::apply_diff(AxisEnum, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
</UL>

<P><STRONG><a name="[294]"></a>ManualMove::soon(AxisEnum)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, marlinui.o(i._ZN10ManualMove4soonE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ManualMove::soon(AxisEnum)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
</UL>

<P><STRONG><a name="[4cc]"></a>ManualMove::task()</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, marlinui.o(i._ZN10ManualMove4taskEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ManualMove::task() &rArr; Planner::buffer_line(const float&, const float&, const float&, const float&, const float&, unsigned char, float) &rArr; Planner::buffer_segment(const float&, const float&, const float&, const float&, const float&, unsigned char, const float&) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&) &rArr;  idle(bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(const float&, const float&, const float&, const float&, const float&, unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
</UL>

<P><STRONG><a name="[4cd]"></a>SdBaseFile::addCluster()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdbasefile.o(i._ZN10SdBaseFile10addClusterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
</UL>

<P><STRONG><a name="[3e0]"></a>SdBaseFile::getDosName(char*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile10getDosNameEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SdBaseFile::getDosName(char*) &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isRoot() const
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::dirName(const directoryEntry&, char*)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const
</UL>

<P><STRONG><a name="[4e3]"></a>SdBaseFile::make83Name(const char*, unsigned char*, const char**)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sdbasefile.o(i._ZN10SdBaseFile10make83NameEPKcPhPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SdBaseFile::make83Name(const char*, unsigned char*, const char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[4d2]"></a>SdBaseFile::readDirCache()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile12readDirCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read()
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isDir() const
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[4d4]"></a>SdBaseFile::addDirCluster()</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile13addDirClusterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SdBaseFile::addDirCluster() &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::clusterStartBlock(unsigned) const
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheSetBlockNumber(unsigned, bool)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addCluster()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[4d0]"></a>SdBaseFile::cacheDirEntry(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile13cacheDirEntryEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove()
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[4da]"></a>SdBaseFile::openCachedEntry(unsigned char, unsigned char)</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, sdbasefile.o(i._ZN10SdBaseFile15openCachedEntryEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SdBaseFile::openCachedEntry(unsigned char, unsigned char) &rArr; SdBaseFile::truncate(unsigned) &rArr; SdBaseFile::seekSet(unsigned) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SdBaseFile_cpp]::DIR_IS_SUBDIR(const directoryEntry*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SdBaseFile_cpp]::DIR_IS_FILE(const directoryEntry*)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheBlockNumber() const
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekEnd(int)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::chainSize(unsigned, unsigned*)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[3c9]"></a>SdBaseFile::open(SdBaseFile*, const char*, unsigned char)</STRONG> (Thumb, 260 bytes, Stack size 120 bytes, sdbasefile.o(i._ZN10SdBaseFile4openEPS_PKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openRoot(SdVolume*)
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isRoot() const
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::~SdBaseFile()
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::SdBaseFile()
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::make83Name(const char*, unsigned char*, const char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::jobRecoverFileExists()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printLongPath(char*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(char*)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[4e4]"></a>SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, sdbasefile.o(i._ZN10SdBaseFile4openEPS_PKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheBlockNumber() const
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDirCache()
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[4e6]"></a>SdBaseFile::read(void*, unsigned short)</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, sdbasefile.o(i._ZN10SdBaseFile4readEPvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock(unsigned, unsigned char*)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::clusterStartBlock(unsigned) const
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheBlockNumber() const
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::blockOfCluster(unsigned) const
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read()
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
</UL>

<P><STRONG><a name="[400]"></a>SdBaseFile::read()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDirCache()
</UL>

<P><STRONG><a name="[3f6]"></a>SdBaseFile::sync()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile4syncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isDir() const
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[3c8]"></a>SdBaseFile::close()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::closefile(bool)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::jobRecoverFileExists()
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printLongPath(char*)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::~SdBaseFile()
</UL>

<P><STRONG><a name="[4e9]"></a>SdBaseFile::write(const void*, unsigned short)</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, sdbasefile.o(i._ZN10SdBaseFile5writeEPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = SdBaseFile::write(const void*, unsigned short) &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::isEOC(unsigned) const
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::clusterStartBlock(unsigned) const
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheBlockNumber() const
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::blockOfCluster(unsigned) const
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isFile() const
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheSetBlockNumber(unsigned, bool)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekEnd(int)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addCluster()
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const char*)
</UL>

<P><STRONG><a name="[3cd]"></a>SdBaseFile::remove(SdBaseFile*, const char*)</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, sdbasefile.o(i._ZN10SdBaseFile6removeEPS_PKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = SdBaseFile::remove(SdBaseFile*, const char*) &rArr; SdBaseFile::open(SdBaseFile*, const char*, unsigned char) &rArr; SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char) &rArr; SdBaseFile::readDirCache() &rArr; SdBaseFile::read() &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::~SdBaseFile()
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::SdBaseFile()
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
</UL>

<P><STRONG><a name="[4ec]"></a>SdBaseFile::remove()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SdBaseFile::remove() &rArr; SdBaseFile::truncate(unsigned) &rArr; SdBaseFile::seekSet(unsigned) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
</UL>

<P><STRONG><a name="[3e3]"></a>SdBaseFile::rewind()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cardreader.o(i._ZN10SdBaseFile6rewindEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SdBaseFile::rewind() &rArr; SdBaseFile::seekSet(unsigned) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printLongPath(char*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByIndex(unsigned short)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countFilesInWorkDir()
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[4d1]"></a>SdBaseFile::dirName(const directoryEntry&, char*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile7dirNameERK14directoryEntryPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SdBaseFile::dirName(const directoryEntry&, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
</UL>

<P><STRONG><a name="[3c4]"></a>SdBaseFile::readDir(directoryEntry*, char*)</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, sdbasefile.o(i._ZN10SdBaseFile7readDirEP14directoryEntryPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SdBaseFile::readDir(directoryEntry*, char*) &rArr; SdBaseFile::read(void*, unsigned short) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SdBaseFile_cpp]::DIR_IS_FILE_OR_SUBDIR(const directoryEntry*)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isDir() const
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByIndex(SdFile, unsigned char)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectByName(SdFile, const char*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countItems(SdFile)
</UL>

<P><STRONG><a name="[4e0]"></a>SdBaseFile::seekEnd(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile7seekEndEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SdBaseFile::seekEnd(int) &rArr; SdBaseFile::seekSet(unsigned) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3eb]"></a>SdBaseFile::seekSet(unsigned)</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, sdbasefile.o(i._ZN10SdBaseFile7seekSetEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SdBaseFile::seekSet(unsigned) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeat::loop()
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M26()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::rewind()
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekEnd(int)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
</UL>

<P><STRONG><a name="[3f0]"></a>SdBaseFile::openRoot(SdVolume*)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, sdbasefile.o(i._ZN10SdBaseFile8openRootEP8SdVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SdBaseFile::openRoot(SdVolume*) &rArr; SdVolume::chainSize(unsigned, unsigned*) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::chainSize(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[4df]"></a>SdBaseFile::truncate(unsigned)</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, sdbasefile.o(i._ZN10SdBaseFile8truncateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SdBaseFile::truncate(unsigned) &rArr; SdBaseFile::seekSet(unsigned) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::isEOC(unsigned) const
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isFile() const
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::freeChain(unsigned)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove()
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4e1]"></a>SdBaseFile::SdBaseFile()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFileC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[6e2]"></a>SdBaseFile::SdBaseFile__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN10SdBaseFileC1Ev), UNUSED)

<P><STRONG><a name="[4e2]"></a>SdBaseFile::~SdBaseFile()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sdbasefile.o(i._ZN10SdBaseFileD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SdBaseFile::~SdBaseFile() &rArr; SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove(SdBaseFile*, const char*)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[6e3]"></a>SdBaseFile::~SdBaseFile__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, sdbasefile.o(i._ZN10SdBaseFileD1Ev), UNUSED)

<P><STRONG><a name="[4fd]"></a>TFT_String::add_glyphs(const unsigned char*)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tft_string.o(i._ZN10TFT_String10add_glyphsEPKh))
<BR><BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set_font(const unsigned char*)
</UL>

<P><STRONG><a name="[4f0]"></a>TFT_String::add_character(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tft_string.o(i._ZN10TFT_String13add_characterEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFT_String::add_character(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::glyph(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char*, unsigned char)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char*, signed char, unsigned char*)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char)
</UL>

<P><STRONG><a name="[4f2]"></a>TFT_String::add(const char*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ui_320x240.o(i._ZN10TFT_String3addEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TFT_String::add(const char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_hotend_status(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4f4]"></a>TFT_String::add(unsigned char*, signed char, unsigned char*)</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, tft_string.o(i._ZN10TFT_String3addEPhaS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char*, unsigned char)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::eol()
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add_character(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(unsigned char*, signed char, const char*)
</UL>

<P><STRONG><a name="[4f3]"></a>TFT_String::add(unsigned char*, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tft_string.o(i._ZN10TFT_String3addEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::eol()
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add_character(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char*, signed char, unsigned char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(unsigned char*)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(const char*)
</UL>

<P><STRONG><a name="[4f6]"></a>TFT_String::add(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ui_320x240.o(i._ZN10TFT_String3addEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TFT_String::add(unsigned char) &rArr; TFT_String::add_character(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add_character(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_hotend_status(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4f5]"></a>TFT_String::eol()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tft_string.o(i._ZN10TFT_String3eolEv))
<BR><BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char*, unsigned char)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::rtrim(unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::ltrim(unsigned char)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char*, signed char, unsigned char*)
</UL>

<P><STRONG><a name="[2e7]"></a>TFT_String::set(const char*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ui_320x240.o(i._ZN10TFT_String3setEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TFT_String::set(const char*) &rArr; TFT_String::set(unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_unload_load_filament()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_hotend_status(unsigned char, unsigned char)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_message()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preheat_to_move_E()
</UL>

<P><STRONG><a name="[4f7]"></a>TFT_String::set(const char*, signed char, const char*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ui_common.o(i._ZN10TFT_String3setEPKcaS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(unsigned char*, signed char, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
</UL>

<P><STRONG><a name="[2db]"></a>TFT_String::set(unsigned char*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ui_320x240.o(i._ZN10TFT_String3setEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TFT_String::set(unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set()
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(const char*)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heater_status(unsigned short, unsigned short, signed char, char)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fan_status(unsigned short, unsigned short, bool, char)
</UL>

<P><STRONG><a name="[4f8]"></a>TFT_String::set(unsigned char*, signed char, const char*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ui_common.o(i._ZN10TFT_String3setEPhaPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set()
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char*, signed char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(const char*, signed char, const char*)
</UL>

<P><STRONG><a name="[4f9]"></a>TFT_String::set()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tft_string.o(i._ZN10TFT_String3setEv))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(unsigned char*, signed char, const char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(unsigned char*)
</UL>

<P><STRONG><a name="[2dc]"></a>TFT_String::trim(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tft_string.o(i._ZN10TFT_String4trimEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TFT_String::trim(unsigned char) &rArr; TFT_String::ltrim(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::rtrim(unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::ltrim(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_unload_load_filament()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_hotend_status(unsigned char, unsigned char)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_message()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preheat_to_move_E()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heater_status(unsigned short, unsigned short, signed char, char)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fan_status(unsigned short, unsigned short, bool, char)
</UL>

<P><STRONG><a name="[4f1]"></a>TFT_String::glyph(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tft_string.o(i._ZN10TFT_String5glyphEh))
<BR><BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::rtrim(unsigned char)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::ltrim(unsigned char)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add_character(unsigned char)
</UL>

<P><STRONG><a name="[4fb]"></a>TFT_String::ltrim(unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tft_string.o(i._ZN10TFT_String5ltrimEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TFT_String::ltrim(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::glyph(unsigned char)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::eol()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::trim(unsigned char)
</UL>

<P><STRONG><a name="[4fa]"></a>TFT_String::rtrim(unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tft_string.o(i._ZN10TFT_String5rtrimEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFT_String::rtrim(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::glyph(unsigned char)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::eol()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::trim(unsigned char)
</UL>

<P><STRONG><a name="[2dd]"></a>TFT_String::center(unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, menu.o(i._ZN10TFT_String6centerEt))
<BR><BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_unload_load_filament()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_hotend_status(unsigned char, unsigned char)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_message()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heater_status(unsigned short, unsigned short, signed char, char)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fan_status(unsigned short, unsigned short, bool, char)
</UL>

<P><STRONG><a name="[4fc]"></a>TFT_String::set_font(const unsigned char*)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, tft_string.o(i._ZN10TFT_String8set_fontEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TFT_String::set_font(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add_glyphs(const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_lcd()
</UL>

<P><STRONG><a name="[559]"></a>TMCStepper::IHOLD_IRUN(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ihold_irun.o(i._ZN10TMCStepper10IHOLD_IRUNEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMCStepper::IHOLD_IRUN(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::push()
</UL>

<P><STRONG><a name="[6b8]"></a>TMCStepper::IHOLD_IRUN()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ihold_irun.o(i._ZN10TMCStepper10IHOLD_IRUNEv))
<BR><BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
</UL>

<P><STRONG><a name="[55b]"></a>TMCStepper::TPOWERDOWN(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tmcstepper.o(i._ZN10TMCStepper10TPOWERDOWNEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMCStepper::TPOWERDOWN(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::push()
</UL>

<P><STRONG><a name="[6ba]"></a>TMCStepper::TPOWERDOWN()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tmcstepper.o(i._ZN10TMCStepper10TPOWERDOWNEv))
<BR><BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
</UL>

<P><STRONG><a name="[6ad]"></a>TMCStepper::blank_time()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tmcstepper.o(i._ZN10TMCStepper10blank_timeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMCStepper::blank_time()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[6aa]"></a>TMCStepper::microsteps()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tmcstepper.o(i._ZN10TMCStepper10microstepsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMCStepper::microsteps()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[4c5]"></a>TMCStepper::rms_current(unsigned short)</STRONG> (Thumb, 340 bytes, Stack size 72 bytes, tmcstepper.o(i._ZN10TMCStepper11rms_currentEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TMCStepper::rms_current(unsigned short) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::ihold(unsigned char)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::irun(unsigned char)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M906()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_current()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_current()::[lambda() (instance 7)]::_FUN()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_current()::[lambda() (instance 5)]::_FUN()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_current()::[lambda() (instance 3)]::_FUN()
</UL>

<P><STRONG><a name="[500]"></a>TMCStepper::rms_current()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tmcstepper.o(i._ZN10TMCStepper11rms_currentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TMCStepper::rms_current() &rArr; TMCStepper::cs2rms(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::irun()
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::cs2rms(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;::rms_current()
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;::rms_current()
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;::rms_current()
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;::rms_current()
</UL>

<P><STRONG><a name="[6ae]"></a>TMCStepper::hysteresis_end()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tmcstepper.o(i._ZN10TMCStepper14hysteresis_endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMCStepper::hysteresis_end()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[6b7]"></a>TMCStepper::test_connection()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tmcstepper.o(i._ZN10TMCStepper15test_connectionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMCStepper::test_connection()
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)
</UL>

<P><STRONG><a name="[6af]"></a>TMCStepper::hysteresis_start()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tmcstepper.o(i._ZN10TMCStepper16hysteresis_startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMCStepper::hysteresis_start()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[4fe]"></a>TMCStepper::irun(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ihold_irun.o(i._ZN10TMCStepper4irunEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMCStepper::irun(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current(unsigned short)
</UL>

<P><STRONG><a name="[501]"></a>TMCStepper::irun()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ihold_irun.o(i._ZN10TMCStepper4irunEv))
<BR><BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current()
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[680]"></a>TMCStepper::GSTAT(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tmcstepper.o(i._ZN10TMCStepper5GSTATEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMCStepper::GSTAT(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)90, (char)48, (AxisEnum)2&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)89, (char)48, (AxisEnum)1&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)88, (char)48, (AxisEnum)0&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)69, (char)48, (AxisEnum)3&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
</UL>

<P><STRONG><a name="[6b9]"></a>TMCStepper::GSTAT()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tmcstepper.o(i._ZN10TMCStepper5GSTATEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMCStepper::GSTAT()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
</UL>

<P><STRONG><a name="[6b0]"></a>TMCStepper::MSCNT()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tmcstepper.o(i._ZN10TMCStepper5MSCNTEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMCStepper::MSCNT()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[6ab]"></a>TMCStepper::TSTEP()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tmcstepper.o(i._ZN10TMCStepper5TSTEPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMCStepper::TSTEP()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
</UL>

<P><STRONG><a name="[4ff]"></a>TMCStepper::ihold(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ihold_irun.o(i._ZN10TMCStepper5iholdEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMCStepper::ihold(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current(unsigned short)
</UL>

<P><STRONG><a name="[6a8]"></a>TMCStepper::ihold()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ihold_irun.o(i._ZN10TMCStepper5iholdEv))
<BR><BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[502]"></a>TMCStepper::cs2rms(unsigned char)</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, tmcstepper.o(i._ZN10TMCStepper6cs2rmsEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TMCStepper::cs2rms(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current()
</UL>

<P><STRONG><a name="[55c]"></a>TMCStepper::TPWMTHRS(unsigned)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tmcstepper.o(i._ZN10TMCStepper8TPWMTHRSEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMCStepper::TPWMTHRS(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::push()
</UL>

<P><STRONG><a name="[6bb]"></a>TMCStepper::TPWMTHRS()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tmcstepper.o(i._ZN10TMCStepper8TPWMTHRSEv))
<BR><BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
</UL>

<P><STRONG><a name="[567]"></a>TMCStepper::TMCStepper__sub_object(float)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tmc2208stepper.o(i._ZN10TMCStepperC2Ef))
<BR><BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::TMC2208Stepper(unsigned short, unsigned short, float, unsigned char)
</UL>

<P><STRONG><a name="[49c]"></a>GCodeParser::value_byte()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, g29.o(i._ZN11GCodeParser10value_byteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M710()
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M569()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M569_cpp]::set_stealth_status(bool, signed char)
</UL>

<P><STRONG><a name="[47b]"></a>GCodeParser::value_long()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gcode.o(i._ZN11GCodeParser10value_longEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M906()
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M710()
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M430()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M412()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M155()
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_int()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::intval(char, short)
</UL>

<P><STRONG><a name="[477]"></a>GCodeParser::value_float()</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gcode.o(i._ZN11GCodeParser11value_floatEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtof
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_axis_units(AxisEnum)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M851()
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M600()
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M421()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M304()
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M125()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M85()
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G42()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_per_axis_units(AxisEnum)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
</UL>

<P><STRONG><a name="[295]"></a>GCodeParser::using_inch_units()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_motion.o(i._ZN11GCodeParser16using_inch_unitsEv))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
</UL>

<P><STRONG><a name="[474]"></a>GCodeParser::value_axis_units(AxisEnum)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gcode.o(i._ZN11GCodeParser16value_axis_unitsE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GCodeParser::value_axis_units(AxisEnum) &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M603()
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M600()
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
</UL>

<P><STRONG><a name="[476]"></a>GCodeParser::value_linear_units()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gcode.o(i._ZN11GCodeParser18value_linear_unitsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GCodeParser::value_linear_units() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M204()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::linearval(char, float)
</UL>

<P><STRONG><a name="[4a2]"></a>GCodeParser::value_per_axis_units(AxisEnum)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m92.o(i._ZN11GCodeParser20value_per_axis_unitsE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = GCodeParser::value_per_axis_units(AxisEnum) &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
</UL>

<P><STRONG><a name="[419]"></a>GCodeParser::unknown_command_warning()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, parser.o(i._ZN11GCodeParser23unknown_command_warningEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GCodeParser::unknown_command_warning() &rArr; serial_echopair_PGM(const char*, const char*) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_parsed_command(bool)
</UL>

<P><STRONG><a name="[47f]"></a>GCodeParser::seen(char)</STRONG> (Thumb, 188 bytes, Stack size 12 bytes, repeat.o(i._ZN11GCodeParser4seenEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GCodeParser::seen(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeat::early_parse_M808(char*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1000()
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M808()
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M710()
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M603()
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M600()
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M569()
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M430()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M412()
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M304()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M302()
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M211()
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M206()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M155()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M125()
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M122()
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M114()
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M110()
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M85()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M27()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M26()
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::ushortval(char, unsigned short)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M569_cpp]::set_stealth_status(bool, signed char)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
</UL>

<P><STRONG><a name="[409]"></a>GCodeParser::parse(char*)</STRONG> (Thumb, 740 bytes, Stack size 32 bytes, parser.o(i._ZN11GCodeParser5parseEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GCodeParser::parse(char*) &rArr; std::strchr(char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strchr(char*, int)
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeat::early_parse_M808(char*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command()
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
</UL>

<P><STRONG><a name="[504]"></a>GCodeParser::reset()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, parser.o(i._ZN11GCodeParser5resetEv))
<BR><BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
</UL>

<P><STRONG><a name="[4b4]"></a>GCodeParser::intval(char, short)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, m303.o(i._ZN11GCodeParser6intvalEcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GCodeParser::intval(char, short) &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M997()
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M421()
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
</UL>

<P><STRONG><a name="[47d]"></a>GCodeParser::boolval(char, bool)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, g29.o(i._ZN11GCodeParser7boolvalEcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GCodeParser::boolval(char, bool) &rArr; GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M999()
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M503()
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M125()
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M122()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G42()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G30()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[484]"></a>GCodeParser::byteval(char, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, g29.o(i._ZN11GCodeParser7bytevalEch))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GCodeParser::byteval(char, unsigned char) &rArr; GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M301()
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M107()
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
</UL>

<P><STRONG><a name="[473]"></a>GCodeParser::seenval(char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gcode.o(i._ZN11GCodeParser7seenvalEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GCodeParser::seenval(char) &rArr; GCodeParser::seen(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M906()
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M851()
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M710()
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M600()
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M421()
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M204()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M145()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M125()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G92()
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G42()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_destination_from_command()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::linearval(char, float)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::byteval(char, unsigned char)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::boolval(char, bool)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::autotemp_M104_M109()
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::intval(char, short)
</UL>

<P><STRONG><a name="[483]"></a>GCodeParser::linearval(char, float)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, g29.o(i._ZN11GCodeParser9linearvalEcf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = GCodeParser::linearval(char, float) &rArr; GCodeParser::value_linear_units() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_linear_units()
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M600()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M125()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G30()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
</UL>

<P><STRONG><a name="[47c]"></a>GCodeParser::ushortval(char, unsigned short)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, g27.o(i._ZN11GCodeParser9ushortvalEct))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GCodeParser::ushortval(char, unsigned short) &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M300()
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G27()
</UL>

<P><STRONG><a name="[497]"></a>GCodeParser::value_int()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, g42.o(i._ZN11GCodeParser9value_intEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GCodeParser::value_int() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_long()
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M145()
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G42()
</UL>

<P><STRONG><a name="[505]"></a>Temperature::_temp_error(heater_id_t, const char*, const char*)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, temperature.o(i._ZN11Temperature11_temp_errorE11heater_id_tPKcS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loud_kill(const char*, heater_id_t)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_refresh()
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(const float&, heater_id_t, signed char, bool)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::min_temp_error(heater_id_t)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::max_temp_error(heater_id_t)
</UL>

<P><STRONG><a name="[2e8]"></a>Temperature::lcd_preheat(unsigned char, signed char, signed char)</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, menu_temperature.o(i._ZN11Temperature11lcd_preheatEhaa))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Temperature::lcd_preheat(unsigned char, signed char, signed char) &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_temperature_cpp]::_MIN&lang;short, int&rang;(T1, T2)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()::[lambda() (instance 3)]::_FUN()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_preheat_end_m()
</UL>

<P><STRONG><a name="[4b5]"></a>Temperature::PID_autotune(const float&, heater_id_t, signed char, bool)</STRONG> (Thumb, 1952 bytes, Stack size 144 bytes, temperature.o(i._ZN11Temperature12PID_autotuneERKf11heater_id_tab))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = Temperature::PID_autotune(const float&, heater_id_t, signed char, bool) &rArr; MarlinUI::update() &rArr; ManualMove::task() &rArr; Planner::buffer_line(const float&, const float&, const float&, const float&, const float&, unsigned char, float) &rArr; Planner::buffer_segment(const float&, const float&, const float&, const float&, const float&, unsigned char, const float&) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&) &rArr;  idle(bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, long)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::checkExtruderAutoFans()
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
</UL>

<P><STRONG><a name="[4ad]"></a>Temperature::setTargetBed(short)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m140_m190.o(i._ZN11Temperature12setTargetBedEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Temperature::setTargetBed(short) &rArr; Temperature::start_watching_bed() &rArr; HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
</UL>

<P><STRONG><a name="[4ae]"></a>Temperature::wait_for_bed(bool)</STRONG> (Thumb, 410 bytes, Stack size 56 bytes, temperature.o(i._ZN11Temperature12wait_for_bedEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = Temperature::wait_for_bed(bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to temperature_cpp]::ABS&lang;float&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed_heating()
</UL>

<P><STRONG><a name="[50b]"></a>Temperature::heater_idle_t::update(const unsigned&)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature13heater_idle_t6updateERKj))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>

<P><STRONG><a name="[238]"></a>Temperature::manage_heater()</STRONG> (Thumb, 742 bytes, Stack size 24 bytes, temperature.o(i._ZN11Temperature13manage_heaterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::heater_idle_t::update(const unsigned&)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::get_pid_output_hotend(unsigned char)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::checkExtruderAutoFans()
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::get_pid_output_bed()
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::max_temp_error(heater_id_t)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_line_done(unsigned char&, char(&)[96], int&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segmented_line_to_destination(const float&, float)
</UL>

<P><STRONG><a name="[255]"></a>Temperature::set_fan_speed(unsigned char, unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, temperature.o(i._ZN11Temperature13set_fan_speedEht))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Temperature::set_fan_speed(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M107()
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M106()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_Fan0()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_fan_update()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cooldown()
</UL>

<P><STRONG><a name="[517]"></a>Temperature::getHeaterPower(heater_id_t)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature14getHeaterPowerE11heater_id_t))
<BR><BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>

<P><STRONG><a name="[50a]"></a>Temperature::max_temp_error(heater_id_t)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, temperature.o(i._ZN11Temperature14max_temp_errorE11heater_id_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Temperature::max_temp_error(heater_id_t) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::readings_ready()
</UL>

<P><STRONG><a name="[50f]"></a>Temperature::min_temp_error(heater_id_t)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, temperature.o(i._ZN11Temperature14min_temp_errorE11heater_id_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Temperature::min_temp_error(heater_id_t) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::readings_ready()
</UL>

<P><STRONG><a name="[510]"></a>Temperature::readings_ready()</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, temperature.o(i._ZN11Temperature14readings_readyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = Temperature::readings_ready() &rArr; Temperature::min_temp_error(heater_id_t) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempInfo::reset()
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::update_raw_temperatures()
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::min_temp_error(heater_id_t)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::max_temp_error(heater_id_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tick()
</UL>

<P><STRONG><a name="[5fb]"></a>Temperature::scaledFanSpeed(unsigned char, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, planner.o(i._ZN11Temperature14scaledFanSpeedEhh))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::check_axes_activity()
</UL>

<P><STRONG><a name="[271]"></a>Temperature::setTargetHotend(short, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, menu_temperature.o(i._ZN11Temperature15setTargetHotendEsh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Temperature::setTargetHotend(short, unsigned char) &rArr; Temperature::start_watching_hotend(unsigned char) &rArr; HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_temperature_cpp]::_MIN&lang;short, int&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pause_cpp]::ensure_safe_temperature(bool, PauseMode)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetHotend()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance_e_maybe()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 1)]::_FUN()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
</UL>

<P><STRONG><a name="[273]"></a>Temperature::wait_for_hotend(unsigned char, bool)</STRONG> (Thumb, 442 bytes, Stack size 72 bytes, temperature.o(i._ZN11Temperature15wait_for_hotendEhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restorer&lang;bool&rang;::~restorer()
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to temperature_cpp]::ABS&lang;float&rang;(T1)
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pause_cpp]::ensure_safe_temperature(bool, PauseMode)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::preheat_for_probing(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[335]"></a>Temperature::hotend_max_target(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_advanced.o(i._ZN11Temperature17hotend_max_targetEh))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetHotend()
</UL>

<P><STRONG><a name="[50e]"></a>Temperature::get_pid_output_bed()</STRONG> (Thumb, 452 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature18get_pid_output_bedEv))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>

<P><STRONG><a name="[bf]"></a>Temperature::start_watching_bed()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, temperature.o(i._ZN11Temperature18start_watching_bedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Temperature::start_watching_bed() &rArr; HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::preheat_for_probing(unsigned short, unsigned short)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetBed(short)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetBED()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu_temperature.o(i._Z16menu_temperaturev)
<LI> menu_tune.o(i._Z9menu_tunev)
</UL>
<P><STRONG><a name="[50c]"></a>Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short)</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, temperature.o(i._ZN11Temperature18tr_state_machine_t3runERKfS2_11heater_id_ttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>

<P><STRONG><a name="[12a]"></a>Temperature::tr_state_machine_t::tr_state_machine_t()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature18tr_state_machine_tC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> temperature.o(i.__sti___15_temperature_cpp_2f7cf00e)
</UL>
<P><STRONG><a name="[6e4]"></a>Temperature::tr_state_machine_t::tr_state_machine_t__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature18tr_state_machine_tC1Ev), UNUSED)

<P><STRONG><a name="[26b]"></a>Temperature::disable_all_heaters()</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, temperature.o(i._ZN11Temperature19disable_all_heatersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Temperature::disable_all_heaters() &rArr; Temperature::start_watching_hotend(unsigned char) &rArr; HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to temperature_cpp]::_MIN&lang;short, int&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::_outage()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(const float&, heater_id_t, signed char, bool)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cooldown()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loud_kill(const char*, heater_id_t)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>

<P><STRONG><a name="[4a7]"></a>Temperature::print_heater_states(unsigned char)</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, temperature.o(i._ZN11Temperature19print_heater_statesEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Temperature::print_heater_states(unsigned char) &rArr; [local to temperature_cpp]::print_heater_state(const float&, const float&, float, heater_id_t) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::getHeaterPower(heater_id_t)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(const float&, const float&, float, heater_id_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_report_temperatures()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M105()
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(const float&, heater_id_t, signed char, bool)
</UL>

<P><STRONG><a name="[4a8]"></a>Temperature::set_heating_message(unsigned char)</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, temperature.o(i._ZN11Temperature19set_heating_messageEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Temperature::set_heating_message(unsigned char) &rArr; MarlinUI::status_printf_P(unsigned char, const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_printf_P(unsigned char, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
</UL>

<P><STRONG><a name="[4a5]"></a>Temperature::auto_job_check_timer(bool, bool)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, temperature.o(i._ZN11Temperature20auto_job_check_timerEbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Temperature::auto_job_check_timer(bool, bool) &rArr; MarlinUI::reset_status(bool) &rArr; MarlinUI::set_status_P(const char*, signed char) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_over_threshold()
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
</UL>

<P><STRONG><a name="[519]"></a>Temperature::wait_for_bed_heating()</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, temperature.o(i._ZN11Temperature20wait_for_bed_heatingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = Temperature::wait_for_bed_heating() &rArr; Temperature::wait_for_bed(bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::preheat_for_probing(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[51c]"></a>Temperature::analog_to_celsius_bed(int)</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, temperature.o(i._ZN11Temperature21analog_to_celsius_bedEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Temperature::analog_to_celsius_bed(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
</UL>

<P><STRONG><a name="[508]"></a>Temperature::checkExtruderAutoFans()</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, temperature.o(i._ZN11Temperature21checkExtruderAutoFansEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Temperature::checkExtruderAutoFans() &rArr; PORT_ResetBitsMapp &rArr; PORT_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(const float&, heater_id_t, signed char, bool)
</UL>

<P><STRONG><a name="[50d]"></a>Temperature::get_pid_output_hotend(unsigned char)</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, temperature.o(i._ZN11Temperature21get_pid_output_hotendEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Temperature::get_pid_output_hotend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
</UL>

<P><STRONG><a name="[494]"></a>Temperature::start_watching_hotend(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, temperature.o(i._ZN11Temperature21start_watching_hotendEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Temperature::start_watching_hotend(unsigned char) &rArr; HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::reset_hotend_idle_timer(unsigned char)
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::preheat_for_probing(unsigned short, unsigned short)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::getHighESpeed()
</UL>

<P><STRONG><a name="[518]"></a>Temperature::auto_job_over_threshold()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, temperature.o(i._ZN11Temperature23auto_job_over_thresholdEv))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
</UL>

<P><STRONG><a name="[270]"></a>Temperature::reset_hotend_idle_timer(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pause.o(i._ZN11Temperature23reset_hotend_idle_timerEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Temperature::reset_hotend_idle_timer(unsigned char) &rArr; Temperature::start_watching_hotend(unsigned char) &rArr; HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_confirmation(bool, signed char)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
</UL>

<P><STRONG><a name="[511]"></a>Temperature::update_raw_temperatures()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, temperature.o(i._ZN11Temperature23update_raw_temperaturesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Temperature::update_raw_temperatures()
</UL>
<BR>[Calls]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempInfo::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::readings_ready()
</UL>

<P><STRONG><a name="[51b]"></a>Temperature::analog_to_celsius_hotend(int, unsigned char)</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, temperature.o(i._ZN11Temperature24analog_to_celsius_hotendEih))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Temperature::analog_to_celsius_hotend(int, unsigned char) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::updateTemperaturesFromRawValues()
</UL>

<P><STRONG><a name="[3a4]"></a>Temperature::auto_report_temperatures()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, temperature.o(i._ZN11Temperature24auto_report_temperaturesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Temperature::auto_report_temperatures() &rArr; Temperature::print_heater_states(unsigned char) &rArr; [local to temperature_cpp]::print_heater_state(const float&, const float&, float, heater_id_t) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
</UL>

<P><STRONG><a name="[507]"></a>Temperature::updateTemperaturesFromRawValues()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, temperature.o(i._ZN11Temperature31updateTemperaturesFromRawValuesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Temperature::updateTemperaturesFromRawValues() &rArr; Temperature::analog_to_celsius_hotend(int, unsigned char) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_refresh()
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(int, unsigned char)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_bed(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(const float&, heater_id_t, signed char, bool)
</UL>

<P><STRONG><a name="[51d]"></a>Temperature::init()</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, temperature.o(i._ZN11Temperature4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Temperature::init() &rArr; Temperature::analog_to_celsius_hotend(int, unsigned char) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_start(unsigned char, unsigned)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_adc_init()
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(int, unsigned char)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_bed(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[37a]"></a>Temperature::tick()</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, temperature.o(i._ZN11Temperature4tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Temperature::tick() &rArr; Temperature::readings_ready() &rArr; Temperature::min_temp_error(heater_id_t) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::step_axis(AxisEnum)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update_buttons()
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::poll()
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempInfo::sample(unsigned short)
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftPWM::add(unsigned char, unsigned char)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::readings_ready()
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::HAL_adc_start(unsigned)
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::HAL_adc_read()
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer41_zero_match_irq_cb()
</UL>

<P><STRONG><a name="[22a]"></a>MenuItemBase::_draw(bool, unsigned char, const char*, char, char)</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, ui_common.o(i._ZN12MenuItemBase5_drawEbhPKccc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(unsigned char*, signed char, const char*)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_item(unsigned char, bool)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_gcode::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_edit_mesh()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_button::draw(bool, unsigned char, const char*, ...)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_probe_offsets()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_controller_fan()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_ready()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_xyz_home()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media_filelist()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_step_mode()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_current()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
</UL>

<P><STRONG><a name="[528]"></a>ControllerFan::set_fan_speed(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, controllerfan.o(i._ZN13ControllerFan13set_fan_speedEh))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerFan::update()
</UL>

<P><STRONG><a name="[527]"></a>ControllerFan::setup()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, controllerfan.o(i._ZN13ControllerFan5setupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ControllerFan::setup() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[30c]"></a>ControllerFan::update()</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, controllerfan.o(i._ZN13ControllerFan6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ControllerFan::update() &rArr; fan_pwm_set_ratio(unsigned char, unsigned char) &rArr; TIMERA_SpecifyOutputSta
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerFan::set_fan_speed(unsigned char)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_pwm_set_ratio(unsigned char, unsigned char)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
</UL>

<P><STRONG><a name="[30f]"></a>MenuItem_bool::draw(bool, unsigned char, const char*, bool*, ...)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, menu_advanced.o(i._ZN13MenuItem_bool4drawEbhPKcPbz))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MenuItem_bool::draw(bool, unsigned char, const char*, bool*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_pause_option()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
</UL>

<P><STRONG><a name="[328]"></a>MenuItem_bool::action(const char*, bool*, void(*)())</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, menu_advanced.o(i._ZN13MenuItem_bool6actionEPKcPbPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MenuItem_bool::action(const char*, bool*, void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_controller_fan()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
</UL>

<P><STRONG><a name="[1be]"></a>HardwareSerial::_rx_complete_callback(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hardwareserial.o(i._ZN14HardwareSerial21_rx_complete_callbackEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardwareSerial::_rx_complete_callback(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART4_RIIrqHander
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART2_RIIrqHander
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_USART1_RIIrqHander
</UL>

<P><STRONG><a name="[163]"></a>HardwareSerial::read()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial4readEv))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_serial(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[161]"></a>HardwareSerial::flush()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial5flushEv))
<BR><BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[15f]"></a>HardwareSerial::write(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hardwareserial.o(i._ZN14HardwareSerial5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardwareSerial::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[232]"></a>HardwareSerial::write(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, marlincore.o(i._ZN14HardwareSerial5writeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_machine_info()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_xyz(const float&, const float&, const float&, const char*, const char*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintln_onoff(bool)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, char)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_spaces(unsigned char)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_report_temperatures()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_get_ic_registers(TMC2208Stepper, TMC_get_registers_enum)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_get_registers(TMC_get_registers_enum, bool, bool, bool, bool)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::drv_status_loop(TMC_drv_status_enum, bool, bool, bool, bool)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_debug_loop(TMC_debug_enum, bool, bool, bool, bool)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_2d_array(unsigned char, unsigned char, unsigned char, float(*)(unsigned char, unsigned char))
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)90, (char)48&rang;::printLabel()
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)89, (char)48&rang;::printLabel()
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)88, (char)48&rang;::printLabel()
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)69, (char)48&rang;::printLabel()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_long(unsigned, char)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmc_report_all(bool, bool, bool, bool)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M221()
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M220()
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M204()
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M114()
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M111()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()::[lambda(bool, const float&, const float&, const float&, const float&, bool) (instance 1)]::operator ()(bool, const float&, const float&, const float&, const float&, bool) const
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_detail()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_xyze(const XYZEval&lang;float&rang;&, unsigned char, unsigned char)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printLongPath(char*)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::removeFile(const char*)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(const float&, heater_id_t, signed char, bool)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to endstops_cpp]::print_es_state(bool, const char*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_and_warn(float&, unsigned char, const char*, const XYZEval&lang;float&rang;&)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;say_M569(bool, const char*, bool)
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to settings_cpp]::config_heading(bool, const char*, bool)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(const float&, const float&, float, heater_id_t)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;echo_write_to_file(const char*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;announceOpen(unsigned char, const char*)
</UL>

<P><STRONG><a name="[162]"></a>HardwareSerial::available()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial9availableEv))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[655]"></a>HardwareSerial::HardwareSerial(M4_USART_TypeDef*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerialC1EP16M4_USART_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_board_gpio_c_PIN_MAP
</UL>

<P><STRONG><a name="[6e5]"></a>HardwareSerial::HardwareSerial__sub_object(M4_USART_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerialC1EP16M4_USART_TypeDef), UNUSED)

<P><STRONG><a name="[52a]"></a>MarlinSettings::size_error(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, settings.o(i._ZN14MarlinSettings10size_errorEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MarlinSettings::size_error(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::datasize()
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[52c]"></a>MarlinSettings::postprocess()</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, settings.o(i._ZN14MarlinSettings11postprocessEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = MarlinSettings::postprocess() &rArr; set_z_fade_height(float, bool) &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_workspace_offset(AxisEnum)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_z_fade_height(float, bool)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_bed_level()
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_volumetric_multipliers()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_software_endstops(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[4bc]"></a>MarlinSettings::load()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, settings.o(i._ZN14MarlinSettings4loadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = MarlinSettings::load() &rArr; MarlinSettings::validate() &rArr; MarlinSettings::_load() &rArr; MarlinSettings::postprocess() &rArr; set_z_fade_height(float, bool) &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::validate()
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M501()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::load_settings()
</UL>

<P><STRONG><a name="[4bb]"></a>MarlinSettings::save()</STRONG> (Thumb, 1570 bytes, Stack size 200 bytes, settings.o(i._ZN14MarlinSettings4saveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MarlinSettings::save() &rArr; PersistentStore::access_finish() &rArr; eeprom_buffer_flush &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::access_finish()
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::access_start()
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;::get_stored_stealthChop()
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;::get_stored_stealthChop()
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;::get_stored_stealthChop()
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;::get_stored_stealthChop()
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::size_error(unsigned short)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M500()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::store_settings()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_eeprom()
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
</UL>

<P><STRONG><a name="[52e]"></a>MarlinSettings::_load()</STRONG> (Thumb, 2758 bytes, Stack size 144 bytes, settings.o(i._ZN14MarlinSettings5_loadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = MarlinSettings::_load() &rArr; MarlinSettings::postprocess() &rArr; set_z_fade_height(float, bool) &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::en_spreadCycle(bool)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::isnan(float)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::access_finish()
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::access_start()
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_language(unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::reset()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_stepper_drivers()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::size_error(unsigned short)
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to settings_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::validate()
</UL>

<P><STRONG><a name="[4bd]"></a>MarlinSettings::reset()</STRONG> (Thumb, 562 bytes, Stack size 32 bytes, settings.o(i._ZN14MarlinSettings5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = MarlinSettings::reset() &rArr; MarlinSettings::postprocess() &rArr; set_z_fade_height(float, bool) &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::enable(bool)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_bed_level()
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::reset()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_stepper_drivers()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to settings_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M502()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_settings()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_eeprom()
</UL>

<P><STRONG><a name="[4be]"></a>MarlinSettings::report(bool)</STRONG> (Thumb, 2302 bytes, Stack size 56 bytes, settings.o(i._ZN14MarlinSettings6reportEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MarlinSettings::report(bool) &rArr; report_M92(bool, signed char) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leveling_is_valid()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_M92(bool, signed char)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M710_report(bool)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;::get_stored_stealthChop()
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;::get_stored_stealthChop()
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;::get_stored_stealthChop()
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;::get_stored_stealthChop()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;say_units(bool)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;say_M906(bool)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;say_M569(bool, const char*, bool)
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to settings_cpp]::config_heading(bool, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M503()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_eeprom()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[52b]"></a>MarlinSettings::datasize()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, settings.o(i._ZN14MarlinSettings8datasizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::size_error(unsigned short)
</UL>

<P><STRONG><a name="[4bf]"></a>MarlinSettings::validate()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, settings.o(i._ZN14MarlinSettings8validateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = MarlinSettings::validate() &rArr; MarlinSettings::_load() &rArr; MarlinSettings::postprocess() &rArr; set_z_fade_height(float, bool) &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M504()
</UL>

<P><STRONG><a name="[2ac]"></a>MenuItem_gcode::draw(bool, unsigned char, const char*, ...)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, menu_bed_leveling.o(i._ZN14MenuItem_gcode4drawEbhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MenuItem_gcode::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_xyz_home()
</UL>

<P><STRONG><a name="[2ab]"></a>MenuItem_gcode::action(const char*, const char*)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, menu_bed_leveling.o(i._ZN14MenuItem_gcode6actionEPKcS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MenuItem_gcode::action(const char*, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::inject_P(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_xyz_home()
</UL>

<P><STRONG><a name="[53c]"></a>SoftwareSerial::stopListening()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, softwareserial.o(i._ZN14SoftwareSerial13stopListeningEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SoftwareSerial::stopListening() &rArr; SoftwareSerial::setRXTX(bool) &rArr; SoftwareSerial::setTX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setRXTX(bool)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setSpeed(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::listen()
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::postReadCommunication()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::beginSerial(unsigned)
</UL>

<P><STRONG><a name="[2fd]"></a>SoftwareSerial::handleInterrupt()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, softwareserial.o(i._ZN14SoftwareSerial15handleInterruptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SoftwareSerial::handleInterrupt() &rArr; SoftwareSerial::send() &rArr; SoftwareSerial::setRXTX(bool) &rArr; SoftwareSerial::setTX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::send()
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::recv()
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer02B_CallBack()
</UL>

<P><STRONG><a name="[166]"></a>SoftwareSerial::read()</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, softwareserial.o(i._ZN14SoftwareSerial4readEv))
<BR>[Address Reference Count : 1]<UL><LI> softwareserial.o(.constdata__ZTV14SoftwareSerial)
</UL>
<P><STRONG><a name="[53f]"></a>SoftwareSerial::recv()</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, softwareserial.o(i._ZN14SoftwareSerial4recvEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SoftwareSerial::recv() &rArr; PORT_GetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::handleInterrupt()
</UL>

<P><STRONG><a name="[540]"></a>SoftwareSerial::send()</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, softwareserial.o(i._ZN14SoftwareSerial4sendEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SoftwareSerial::send() &rArr; SoftwareSerial::setRXTX(bool) &rArr; SoftwareSerial::setTX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setRXTX(bool)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::handleInterrupt()
</UL>

<P><STRONG><a name="[541]"></a>SoftwareSerial::begin(long)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, softwareserial.o(i._ZN14SoftwareSerial5beginEl))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SoftwareSerial::begin(long) &rArr; SoftwareSerial::listen() &rArr; SoftwareSerial::stopListening() &rArr; SoftwareSerial::setRXTX(bool) &rArr; SoftwareSerial::setTX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setTX()
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setRX()
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::listen()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::beginSerial(unsigned)
</UL>

<P><STRONG><a name="[543]"></a>SoftwareSerial::setRX()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, softwareserial.o(i._ZN14SoftwareSerial5setRXEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SoftwareSerial::setRX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(unsigned char, WiringPinMode)
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setRXTX(bool)
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::begin(long)
</UL>

<P><STRONG><a name="[542]"></a>SoftwareSerial::setTX()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, softwareserial.o(i._ZN14SoftwareSerial5setTXEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SoftwareSerial::setTX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode(unsigned char, WiringPinMode)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setRXTX(bool)
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::begin(long)
</UL>

<P><STRONG><a name="[164]"></a>SoftwareSerial::write(unsigned char)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, softwareserial.o(i._ZN14SoftwareSerial5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SoftwareSerial::write(unsigned char) &rArr; SoftwareSerial::setRXTX(bool) &rArr; SoftwareSerial::setTX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setRXTX(bool)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setSpeed(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softwareserial.o(.constdata__ZTV14SoftwareSerial)
</UL>
<P><STRONG><a name="[544]"></a>SoftwareSerial::listen()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, softwareserial.o(i._ZN14SoftwareSerial6listenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SoftwareSerial::listen() &rArr; SoftwareSerial::stopListening() &rArr; SoftwareSerial::setRXTX(bool) &rArr; SoftwareSerial::setTX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setSpeed(unsigned)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::stopListening()
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::begin(long)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::preReadCommunication()
</UL>

<P><STRONG><a name="[53d]"></a>SoftwareSerial::setRXTX(bool)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, softwareserial.o(i._ZN14SoftwareSerial7setRXTXEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SoftwareSerial::setRXTX(bool) &rArr; SoftwareSerial::setTX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setTX()
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::setRX()
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::send()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::write(unsigned char)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::stopListening()
</UL>

<P><STRONG><a name="[53e]"></a>SoftwareSerial::setSpeed(unsigned)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, softwareserial.o(i._ZN14SoftwareSerial8setSpeedEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SoftwareSerial::setSpeed(unsigned) &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pclk1Freq()
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::listen()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::write(unsigned char)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::stopListening()
</UL>

<P><STRONG><a name="[165]"></a>SoftwareSerial::available()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, softwareserial.o(i._ZN14SoftwareSerial9availableEv))
<BR>[Address Reference Count : 1]<UL><LI> softwareserial.o(.constdata__ZTV14SoftwareSerial)
</UL>
<P><STRONG><a name="[569]"></a>SoftwareSerial::SoftwareSerial(unsigned short, unsigned short, bool)</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, softwareserial.o(i._ZN14SoftwareSerialC1Ettb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SoftwareSerial::SoftwareSerial(unsigned short, unsigned short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::TMC2208Stepper(unsigned short, unsigned short, float, unsigned char)
</UL>

<P><STRONG><a name="[6e6]"></a>SoftwareSerial::SoftwareSerial__sub_object(unsigned short, unsigned short, bool)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, softwareserial.o(i._ZN14SoftwareSerialC1Ettb), UNUSED)

<P><STRONG><a name="[16b]"></a>TMC2208Stepper::DRV_STATUS()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_status.o(i._ZN14TMC2208Stepper10DRV_STATUSEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMC2208Stepper::DRV_STATUS()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> chopconf.o(.constdata__ZTV14TMC2208Stepper)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
</UL>
<P><STRONG><a name="[2f8]"></a>TMC2208Stepper::beginSerial(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper11beginSerialEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = TMC2208Stepper::beginSerial(unsigned) &rArr; SoftwareSerial::begin(long) &rArr; SoftwareSerial::listen() &rArr; SoftwareSerial::stopListening() &rArr; SoftwareSerial::setRXTX(bool) &rArr; SoftwareSerial::setTX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::begin(long)
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::stopListening()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmc_serial_begin()
</UL>

<P><STRONG><a name="[548]"></a>TMC2208Stepper::serial_read()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper11serial_readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::serial_read()
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::_sendDatagram(unsigned char*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[545]"></a>TMC2208Stepper::pwm_ofs_auto()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper12pwm_ofs_autoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMC2208Stepper::pwm_ofs_auto() &rArr; TMC2208Stepper::PWM_AUTO()
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::PWM_AUTO()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[54a]"></a>TMC2208Stepper::serial_write(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper12serial_writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::serial_write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::write(unsigned char, unsigned)
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::_sendDatagram(unsigned char*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[547]"></a>TMC2208Stepper::_sendDatagram(unsigned char*, unsigned char, unsigned short)</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper13_sendDatagramEPhht))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TMC2208Stepper::_sendDatagram(unsigned char*, unsigned char, unsigned short) &rArr; delay &rArr; SysTick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::available()
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::serial_write(unsigned char)
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::serial_read()
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::read(unsigned char)
</UL>

<P><STRONG><a name="[54b]"></a>TMC2208Stepper::pwm_grad_auto()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper13pwm_grad_autoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMC2208Stepper::pwm_grad_auto() &rArr; TMC2208Stepper::PWM_AUTO()
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::PWM_AUTO()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[54c]"></a>TMC2208Stepper::pwm_scale_sum()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper13pwm_scale_sumEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMC2208Stepper::pwm_scale_sum() &rArr; TMC2208Stepper::PWM_SCALE()
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::PWM_SCALE()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[539]"></a>TMC2208Stepper::en_spreadCycle(bool)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gconf.o(i._ZN14TMC2208Stepper14en_spreadCycleEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::en_spreadCycle(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, bool)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, bool)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, bool)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, bool)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[54e]"></a>TMC2208Stepper::en_spreadCycle()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gconf.o(i._ZN14TMC2208Stepper14en_spreadCycleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMC2208Stepper::en_spreadCycle() &rArr; TMC2208Stepper::GCONF()
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::GCONF()
</UL>
<BR>[Called By]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)
</UL>

<P><STRONG><a name="[550]"></a>TMC2208Stepper::pwm_scale_auto()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper14pwm_scale_autoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMC2208Stepper::pwm_scale_auto() &rArr; TMC2208Stepper::PWM_SCALE()
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::PWM_SCALE()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[551]"></a>TMC2208Stepper::preReadCommunication()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper20preReadCommunicationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TMC2208Stepper::preReadCommunication() &rArr; SoftwareSerial::listen() &rArr; SoftwareSerial::stopListening() &rArr; SoftwareSerial::setRXTX(bool) &rArr; SoftwareSerial::setTX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::listen()
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSwitch::active()
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::read(unsigned char)
</UL>

<P><STRONG><a name="[553]"></a>TMC2208Stepper::postReadCommunication()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper21postReadCommunicationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TMC2208Stepper::postReadCommunication() &rArr; SoftwareSerial::stopListening() &rArr; SoftwareSerial::setRXTX(bool) &rArr; SoftwareSerial::setTX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::stopListening()
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::read(unsigned char)
</UL>

<P><STRONG><a name="[554]"></a>TMC2208Stepper::preWriteCommunication()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper21preWriteCommunicationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMC2208Stepper::preWriteCommunication()
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSwitch::active()
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::write(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[562]"></a>TMC2208Stepper::postWriteCommunication()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper22postWriteCommunicationEv))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::write(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[6c3]"></a>TMC2208Stepper::ot()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper2otEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::ot()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum)
</UL>

<P><STRONG><a name="[555]"></a>TMC2208Stepper::enn()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper3ennEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMC2208Stepper::enn() &rArr; TMC2208Stepper::IOIN()
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::IOIN()
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::isEnabled()
</UL>

<P><STRONG><a name="[6c0]"></a>TMC2208Stepper::ola()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper3olaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::ola()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum)
</UL>

<P><STRONG><a name="[6bf]"></a>TMC2208Stepper::olb()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper3olbEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::olb()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum)
</UL>

<P><STRONG><a name="[16f]"></a>TMC2208Stepper::tbl()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, chopconf.o(i._ZN14TMC2208Stepper3tblEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMC2208Stepper::tbl() &rArr; TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> chopconf.o(.constdata__ZTV14TMC2208Stepper)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
</UL>
<P><STRONG><a name="[556]"></a>TMC2208Stepper::IOIN()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper4IOINEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMC2208Stepper::IOIN()
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::enn()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
</UL>

<P><STRONG><a name="[16c]"></a>TMC2208Stepper::hend()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, chopconf.o(i._ZN14TMC2208Stepper4hendEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMC2208Stepper::hend() &rArr; TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> chopconf.o(.constdata__ZTV14TMC2208Stepper)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
</UL>
<P><STRONG><a name="[16e]"></a>TMC2208Stepper::mres()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, chopconf.o(i._ZN14TMC2208Stepper4mresEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMC2208Stepper::mres() &rArr; TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> chopconf.o(.constdata__ZTV14TMC2208Stepper)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
</UL>
<P><STRONG><a name="[6ac]"></a>TMC2208Stepper::otpw()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper4otpwEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::otpw()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum)
</UL>

<P><STRONG><a name="[376]"></a>TMC2208Stepper::push()</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper4pushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMC2208Stepper::push() &rArr; TMC2208Stepper::GCONF(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::GCONF(unsigned)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF(unsigned)
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TPWMTHRS(unsigned)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TPOWERDOWN(unsigned char)
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::SLAVECONF(unsigned short)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::VACTUAL(unsigned)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::PWMCONF(unsigned)
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::IHOLD_IRUN(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_trinamic_drivers()
</UL>

<P><STRONG><a name="[168]"></a>TMC2208Stepper::read(unsigned char)</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper4readEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = TMC2208Stepper::read(unsigned char) &rArr; TMC2208Stepper::preReadCommunication() &rArr; SoftwareSerial::listen() &rArr; SoftwareSerial::stopListening() &rArr; SoftwareSerial::setRXTX(bool) &rArr; SoftwareSerial::setTX() &rArr; pinMode(unsigned char, WiringPinMode) &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::postReadCommunication()
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::preReadCommunication()
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::calcCRC(unsigned char*, unsigned char)
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::_sendDatagram(unsigned char*, unsigned char, unsigned short)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> chopconf.o(.constdata__ZTV14TMC2208Stepper)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
</UL>
<P><STRONG><a name="[6c2]"></a>TMC2208Stepper::s2ga()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper4s2gaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::s2ga()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum)
</UL>

<P><STRONG><a name="[6c1]"></a>TMC2208Stepper::s2gb()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper4s2gbEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::s2gb()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum)
</UL>

<P><STRONG><a name="[6be]"></a>TMC2208Stepper::stst()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper4ststEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::stst()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum)
</UL>

<P><STRONG><a name="[5b8]"></a>TMC2208Stepper::t120()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper4t120Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::t120()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum)
</UL>

<P><STRONG><a name="[5b7]"></a>TMC2208Stepper::t143()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper4t143Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::t143()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum)
</UL>

<P><STRONG><a name="[5b6]"></a>TMC2208Stepper::t150()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper4t150Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::t150()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum)
</UL>

<P><STRONG><a name="[5b5]"></a>TMC2208Stepper::t157()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper4t157Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::t157()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum)
</UL>

<P><STRONG><a name="[561]"></a>TMC2208Stepper::toff()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, chopconf.o(i._ZN14TMC2208Stepper4toffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMC2208Stepper::toff() &rArr; TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::isEnabled()
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[558]"></a>TMC2208Stepper::GCONF(unsigned)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gconf.o(i._ZN14TMC2208Stepper5GCONFEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::GCONF(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::push()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)90, (char)48, (AxisEnum)2&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)89, (char)48, (AxisEnum)1&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)88, (char)48, (AxisEnum)0&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)69, (char)48, (AxisEnum)3&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
</UL>

<P><STRONG><a name="[54f]"></a>TMC2208Stepper::GCONF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gconf.o(i._ZN14TMC2208Stepper5GCONFEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMC2208Stepper::GCONF()
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::en_spreadCycle()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
</UL>

<P><STRONG><a name="[16d]"></a>TMC2208Stepper::hstrt()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, chopconf.o(i._ZN14TMC2208Stepper5hstrtEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMC2208Stepper::hstrt() &rArr; TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> chopconf.o(.constdata__ZTV14TMC2208Stepper)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
</UL>
<P><STRONG><a name="[5a5]"></a>TMC2208Stepper::s2vsa()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper5s2vsaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::s2vsa()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[5a6]"></a>TMC2208Stepper::s2vsb()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper5s2vsbEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::s2vsb()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[167]"></a>TMC2208Stepper::write(unsigned char, unsigned)</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper5writeEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TMC2208Stepper::write(unsigned char, unsigned) &rArr; delay &rArr; SysTick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::postWriteCommunication()
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::preWriteCommunication()
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::serial_write(unsigned char)
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::calcCRC(unsigned char*, unsigned char)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> chopconf.o(.constdata__ZTV14TMC2208Stepper)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
</UL>
<P><STRONG><a name="[563]"></a>TMC2208Stepper::intpol()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, chopconf.o(i._ZN14TMC2208Stepper6intpolEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMC2208Stepper::intpol() &rArr; TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[169]"></a>TMC2208Stepper::vsense(bool)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, chopconf.o(i._ZN14TMC2208Stepper6vsenseEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::vsense(bool)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> chopconf.o(.constdata__ZTV14TMC2208Stepper)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
</UL>
<P><STRONG><a name="[16a]"></a>TMC2208Stepper::vsense()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, chopconf.o(i._ZN14TMC2208Stepper6vsenseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMC2208Stepper::vsense() &rArr; TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> chopconf.o(.constdata__ZTV14TMC2208Stepper)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE)
<LI> trinamic.o(.constdata__ZTV9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE)
</UL>
<P><STRONG><a name="[55f]"></a>TMC2208Stepper::PWMCONF(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pwmconf.o(i._ZN14TMC2208Stepper7PWMCONFEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::PWMCONF(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::push()
</UL>

<P><STRONG><a name="[6bc]"></a>TMC2208Stepper::PWMCONF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwmconf.o(i._ZN14TMC2208Stepper7PWMCONFEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMC2208Stepper::PWMCONF()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
</UL>

<P><STRONG><a name="[55d]"></a>TMC2208Stepper::VACTUAL(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper7VACTUALEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::VACTUAL(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::push()
</UL>

<P><STRONG><a name="[560]"></a>TMC2208Stepper::calcCRC(unsigned char*, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper7calcCRCEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMC2208Stepper::calcCRC(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::write(unsigned char, unsigned)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::read(unsigned char)
</UL>

<P><STRONG><a name="[5a4]"></a>TMC2208Stepper::stealth()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper7stealthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::stealth()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[55e]"></a>TMC2208Stepper::CHOPCONF(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, chopconf.o(i._ZN14TMC2208Stepper8CHOPCONFEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::CHOPCONF(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::push()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)90, (char)48, (AxisEnum)2&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)89, (char)48, (AxisEnum)1&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)88, (char)48, (AxisEnum)0&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)69, (char)48, (AxisEnum)3&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
</UL>

<P><STRONG><a name="[557]"></a>TMC2208Stepper::CHOPCONF()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chopconf.o(i._ZN14TMC2208Stepper8CHOPCONFEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::vsense()
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::intpol()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::hstrt()
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::toff()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::mres()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::hend()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::tbl()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
</UL>

<P><STRONG><a name="[67f]"></a>TMC2208Stepper::OTP_PROG(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper8OTP_PROGEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::OTP_PROG(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)90, (char)48, (AxisEnum)2&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)89, (char)48, (AxisEnum)1&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)88, (char)48, (AxisEnum)0&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)69, (char)48, (AxisEnum)3&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
</UL>

<P><STRONG><a name="[546]"></a>TMC2208Stepper::PWM_AUTO()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper8PWM_AUTOEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMC2208Stepper::PWM_AUTO()
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::pwm_grad_auto()
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::pwm_ofs_auto()
</UL>

<P><STRONG><a name="[56a]"></a>TMC2208Stepper::defaults()</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper8defaultsEv))
<BR><BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::TMC2208Stepper(unsigned short, unsigned short, float, unsigned char)
</UL>

<P><STRONG><a name="[54d]"></a>TMC2208Stepper::PWM_SCALE()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper9PWM_SCALEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMC2208Stepper::PWM_SCALE()
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::pwm_scale_auto()
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::pwm_scale_sum()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
</UL>

<P><STRONG><a name="[55a]"></a>TMC2208Stepper::SLAVECONF(unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper9SLAVECONFEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::SLAVECONF(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::push()
</UL>

<P><STRONG><a name="[549]"></a>TMC2208Stepper::available()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper9availableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::available()
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::_sendDatagram(unsigned char*, unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[5b9]"></a>TMC2208Stepper::cs_actual()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_status.o(i._ZN14TMC2208Stepper9cs_actualEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMC2208Stepper::cs_actual()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum)
</UL>

<P><STRONG><a name="[564]"></a>TMC2208Stepper::isEnabled()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tmc2208stepper.o(i._ZN14TMC2208Stepper9isEnabledEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMC2208Stepper::isEnabled() &rArr; TMC2208Stepper::toff() &rArr; TMC2208Stepper::CHOPCONF()
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::toff()
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::enn()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[6bd]"></a>TMC2208Stepper::TMC2208Stepper(const TMC2208Stepper&)</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, tmc_util.o(i._ZN14TMC2208StepperC1ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
</UL>

<P><STRONG><a name="[6e7]"></a>TMC2208Stepper::TMC2208Stepper__sub_object(const TMC2208Stepper&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tmc_util.o(i._ZN14TMC2208StepperC1ERKS_), UNUSED)

<P><STRONG><a name="[565]"></a>TMC2208Stepper::TMC2208Stepper(unsigned short, unsigned short, float)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, trinamic.o(i._ZN14TMC2208StepperC1Ettf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TMC2208Stepper::TMC2208Stepper(unsigned short, unsigned short, float) &rArr; TMC2208Stepper::TMC2208Stepper(unsigned short, unsigned short, float, unsigned char) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::TMC2208Stepper(unsigned short, unsigned short, float, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_trinamic_cpp_stepperX
</UL>

<P><STRONG><a name="[6e8]"></a>TMC2208Stepper::TMC2208Stepper__sub_object(unsigned short, unsigned short, float)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, trinamic.o(i._ZN14TMC2208StepperC1Ettf), UNUSED)

<P><STRONG><a name="[566]"></a>TMC2208Stepper::TMC2208Stepper(unsigned short, unsigned short, float, unsigned char)</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, tmc2208stepper.o(i._ZN14TMC2208StepperC1Ettfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TMC2208Stepper::TMC2208Stepper(unsigned short, unsigned short, float, unsigned char) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareSerial::SoftwareSerial(unsigned short, unsigned short, bool)
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TMCStepper__sub_object(float)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::defaults()
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::TMC2208Stepper(unsigned short, unsigned short, float)
</UL>

<P><STRONG><a name="[6e9]"></a>TMC2208Stepper::TMC2208Stepper__sub_object(unsigned short, unsigned short, float, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, tmc2208stepper.o(i._ZN14TMC2208StepperC1Ettfh), UNUSED)

<P><STRONG><a name="[2aa]"></a>MenuItem_button::draw(bool, unsigned char, const char*, ...)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, menu_advanced.o(i._ZN15MenuItem_button4drawEbhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MenuItem_button::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_job_recovery()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_pause_option()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media_filelist()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
</UL>

<P><STRONG><a name="[33a]"></a>MenuItem_sdbase::draw(bool, unsigned char, const char*, CardReader&, bool)</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, ui_common.o(i._ZN15MenuItem_sdbase4drawEbhPKcR10CardReaderb))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MenuItem_sdbase::draw(bool, unsigned char, const char*, CardReader&, bool) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::add_text(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_item(unsigned char, bool)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media_filelist()
</UL>

<P><STRONG><a name="[312]"></a>MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ui_common.o(i._ZN15MenuItem_static4drawEhPKchS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char*, unsigned char)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(const char*, signed char, const char*)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_item(unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_job_recovery()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::synchronize(const char*)::[lambda() (instance 1)]::_FUN()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_pause_option()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_step_mode()
</UL>

<P><STRONG><a name="[530]"></a>PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, eeprom_flash.o(i._ZN15PersistentStore10write_dataERiPKhjPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*) &rArr; crc16(unsigned short*, const void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_buffered_write_byte
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_buffered_read_byte
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16(unsigned short*, const void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[52f]"></a>PersistentStore::access_start()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, eeprom_flash.o(i._ZN15PersistentStore12access_startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PersistentStore::access_start() &rArr; eeprom_buffer_fill &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_buffer_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[535]"></a>PersistentStore::access_finish()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, eeprom_flash.o(i._ZN15PersistentStore13access_finishEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PersistentStore::access_finish() &rArr; eeprom_buffer_flush &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[571]"></a>PersistentStore::FLASH_If_Erase(unsigned, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, eeprom_flash.o(i._ZN15PersistentStore14FLASH_If_EraseEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PersistentStore::FLASH_If_Erase(unsigned, unsigned) &rArr; FlashErasePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
</UL>

<P><STRONG><a name="[572]"></a>PersistentStore::FLASH_If_Write(unsigned, const void*, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, eeprom_flash.o(i._ZN15PersistentStore14FLASH_If_WriteEjPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PersistentStore::FLASH_If_Write(unsigned, const void*, unsigned) &rArr; Flash_Updata &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::write()
</UL>

<P><STRONG><a name="[536]"></a>PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, eeprom_flash.o(i._ZN15PersistentStore9read_dataERiPhjPtb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool) &rArr; crc16(unsigned short*, const void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_buffered_read_byte
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16(unsigned short*, const void*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int, unsigned char*, unsigned)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[351]"></a>PersistentStore::read_data(int, unsigned char*, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, menu.o(i._ZN15PersistentStore9read_dataEiPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PersistentStore::read_data(int, unsigned char*, unsigned) &rArr; PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool) &rArr; crc16(unsigned short*, const void*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_babystep_zoffset()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_start_selected_file()
</UL>

<P><STRONG><a name="[28f]"></a>soft_endstops_t::get_manual_axis_limits(AxisEnum, float&, float&)</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, menu_motion.o(i._ZN15soft_endstops_t22get_manual_axis_limitsE8AxisEnumRfS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = soft_endstops_t::get_manual_axis_limits(AxisEnum, float&, float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
</UL>

<P><STRONG><a name="[573]"></a>MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, menu.o(i._ZN16MenuEditItemBase11edit_screenEPFPKciEPFvPviE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::edit_screen()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::edit_screen()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::edit_screen()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::edit_screen()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::edit_screen()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::edit_screen()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::edit_screen()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::edit_screen()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::edit_screen()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::edit_screen()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::edit_screen()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::edit_screen()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::edit_screen()
</UL>

<P><STRONG><a name="[259]"></a>MenuEditItemBase::draw_edit_screen(const char*, const char*)</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, ui_320x240.o(i._ZN16MenuEditItemBase16draw_edit_screenEPKcS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::center(unsigned short)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::trim(unsigned char)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(const char*, signed char, const char*)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(const char*)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_line(unsigned char, unsigned short)
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::draw_edit_screen_buttons()
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_babystep_zoffset()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetHotend()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetBED()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_feedrate()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_Fan0()
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
</UL>

<P><STRONG><a name="[575]"></a>MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)</STRONG> (Thumb, 86 bytes, Stack size 36 bytes, menu.o(i._ZN16MenuEditItemBase16goto_edit_screenEPKcPviitPFvvES4_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::push_current_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::push_current_screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::action(const char*, unsigned*, unsigned, unsigned, void(*)(), bool)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::action(const char*, signed char*, signed char, signed char, void(*)(), bool)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::action(const char*, unsigned short*, unsigned short, unsigned short, void(*)(), bool)
</UL>

<P><STRONG><a name="[336]"></a>MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, ui_common.o(i._ZN16MenuEditItemBase4drawEbhPKcS1_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(const char*, signed char, const char*)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_item(unsigned char, bool)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::draw(bool, unsigned char, const char*, unsigned*, ...)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::draw(bool, unsigned char, const char*, float*, ...)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::draw(bool, unsigned char, const char*, signed char*, ...)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_bool::draw(bool, unsigned char, const char*, bool*, ...)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::draw(bool, unsigned char, const char*, unsigned short*, ...)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_controller_fan()
</UL>

<P><STRONG><a name="[576]"></a>MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, menu.o(i._ZN16MenuItem_confirm13select_screenEPKcS1_PFvvES3_S1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update_selection()
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()::[lambda() (instance 3)]::operator ()() const
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const
</UL>

<P><STRONG><a name="[2d5]"></a>MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, ui_320x240.o(i._ZN16MenuItem_confirm18draw_select_screenEPKcS1_bS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::center(unsigned short)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::trim(unsigned char)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(const char*)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_line(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_abort_pring()
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[368]"></a>MenuItem_confirm::draw(bool, unsigned char, const char*, ...)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, menu_advanced.o(i._ZN16MenuItem_confirm4drawEbhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MenuItem_confirm::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
</UL>

<P><STRONG><a name="[22c]"></a>MenuItem_submenu::draw(bool, unsigned char, const char*, ...)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, menu_advanced.o(i._ZN16MenuItem_submenu4drawEbhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MenuItem_submenu::draw(bool, unsigned char, const char*, ...) &rArr; MenuItemBase::_draw(bool, unsigned char, const char*, char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_ready()
</UL>

<P><STRONG><a name="[22b]"></a>MenuItem_submenu::action(const char*, void(*)())</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, menu_advanced.o(i._ZN16MenuItem_submenu6actionEPKcPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MenuItem_submenu::action(const char*, void(*)()) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::push_current_screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_ready()
</UL>

<P><STRONG><a name="[4b7]"></a>PrintJobRecovery::load()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerloss.o(i._ZN16PrintJobRecovery4loadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PrintJobRecovery::load() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::check()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
</UL>

<P><STRONG><a name="[279]"></a>PrintJobRecovery::save(bool, float)</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, powerloss.o(i._ZN16PrintJobRecovery4saveEbf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PrintJobRecovery::save(bool, float) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::write()
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::changed()
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::_outage()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M125()
</UL>

<P><STRONG><a name="[3d5]"></a>PrintJobRecovery::check()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, powerloss.o(i._ZN16PrintJobRecovery5checkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + In Cycle
<LI>Call Chain = PrintJobRecovery::check() &rArr;  GcodeSuite::process_subcommands_now_P(const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isMounted()
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::load()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
</UL>

<P><STRONG><a name="[4b8]"></a>PrintJobRecovery::debug(const char*)</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, powerloss.o(i._ZN16PrintJobRecovery5debugEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
</UL>

<P><STRONG><a name="[398]"></a>PrintJobRecovery::purge()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, powerloss.o(i._ZN16PrintJobRecovery5purgeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PrintJobRecovery::purge() &rArr; PersistentStore::FLASH_If_Erase(unsigned, unsigned) &rArr; FlashErasePage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::FLASH_If_Erase(unsigned, unsigned)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::changed()
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::check()
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_loss_recovery_cancel()
</UL>

<P><STRONG><a name="[577]"></a>PrintJobRecovery::write()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, powerloss.o(i._ZN16PrintJobRecovery5writeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PrintJobRecovery::write() &rArr; PersistentStore::FLASH_If_Write(unsigned, const void*, unsigned) &rArr; Flash_Updata &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::FLASH_If_Write(unsigned, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
</UL>

<P><STRONG><a name="[4b6]"></a>PrintJobRecovery::enable(bool)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, powerloss.o(i._ZN16PrintJobRecovery6enableEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PrintJobRecovery::enable(bool) &rArr; PrintJobRecovery::changed() &rArr; PrintJobRecovery::save(bool, float) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::changed()
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
</UL>

<P><STRONG><a name="[3a0]"></a>PrintJobRecovery::outage()</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, powerloss.o(i._ZN16PrintJobRecovery6outageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PrintJobRecovery::outage() &rArr; PrintJobRecovery::_outage() &rArr; PrintJobRecovery::save(bool, float) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::_outage()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
</UL>

<P><STRONG><a name="[4cb]"></a>PrintJobRecovery::resume()</STRONG> (Thumb, 850 bytes, Stack size 184 bytes, powerloss.o(i._ZN16PrintJobRecovery6resumeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + In Cycle
<LI>Call Chain = PrintJobRecovery::resume() &rArr;  GcodeSuite::process_subcommands_now_P(const char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now(char*)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_workspace_offset(AxisEnum)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::enable(bool)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89sprintf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1000()
</UL>

<P><STRONG><a name="[4b9]"></a>PrintJobRecovery::_outage()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, powerloss.o(i._ZN16PrintJobRecovery7_outageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PrintJobRecovery::_outage() &rArr; PrintJobRecovery::save(bool, float) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minkill(bool)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::outage()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M413()
</UL>

<P><STRONG><a name="[d6]"></a>PrintJobRecovery::changed()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, powerloss.o(i._ZN16PrintJobRecovery7changedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PrintJobRecovery::changed() &rArr; PrintJobRecovery::save(bool, float) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::enable(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(i._Z18menu_configurationv)
</UL>
<P><STRONG><a name="[499]"></a>PrintJobRecovery::prepare()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, powerloss.o(i._ZN16PrintJobRecovery7prepareEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = PrintJobRecovery::prepare() &rArr; CardReader::getAbsFilename(char*) &rArr; CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const &rArr; SdBaseFile::getDosName(char*) &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::getAbsFilename(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
</UL>

<P><STRONG><a name="[2c6]"></a>MenuItem_function::action(const char*, void(*)())</STRONG> (Thumb, 10 bytes, Stack size 16 bytes, menu_configuration.o(i._ZN17MenuItem_function6actionEPKcPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MenuItem_function::action(const char*, void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
</UL>

<P><STRONG><a name="[578]"></a>FilamentSensorSwitch::run()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, marlincore.o(i._ZN20FilamentSensorSwitch3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FilamentSensorSwitch::run() &rArr; PORT_GetBitMapp &rArr; PORT_GetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()
</UL>

<P><STRONG><a name="[579]"></a>MenuEditItemInfo_int3::strfunc(float)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, menu_advanced.o(i._ZN21MenuEditItemInfo_int37strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MenuEditItemInfo_int3::strfunc(float) &rArr; i16tostr3rj(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i16tostr3rj(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::to_string(int)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...)
</UL>

<P><STRONG><a name="[57a]"></a>MenuEditItemInfo_int8::strfunc(float)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, menu_advanced.o(i._ZN21MenuEditItemInfo_int87strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MenuEditItemInfo_int8::strfunc(float) &rArr; i8tostr3rj(signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i8tostr3rj(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::to_string(int)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::draw(bool, unsigned char, const char*, signed char*, ...)
</UL>

<P><STRONG><a name="[57b]"></a>MenuEditItemInfo_uint8::strfunc(float)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, menu_bed_leveling.o(i._ZN22MenuEditItemInfo_uint87strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MenuEditItemInfo_uint8::strfunc(float) &rArr; ui8tostr3rj(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui8tostr3rj(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::to_string(int)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
</UL>

<P><STRONG><a name="[57c]"></a>MenuEditItemInfo_float3::strfunc(float)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, menu_advanced.o(i._ZN23MenuEditItemInfo_float37strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MenuEditItemInfo_float3::strfunc(float) &rArr; i16tostr3rj(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i16tostr3rj(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::to_string(int)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[57d]"></a>MenuEditItemInfo_float5::strfunc(float)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, menu_advanced.o(i._ZN23MenuEditItemInfo_float57strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MenuEditItemInfo_float5::strfunc(float) &rArr; ftostr5rj(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr5rj(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::to_string(int)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[57e]"></a>MenuEditItemInfo_float43::strfunc(float)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, menu_advanced.o(i._ZN24MenuEditItemInfo_float437strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MenuEditItemInfo_float43::strfunc(float) &rArr; ftostr43sign(const float&, char) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr43sign(const float&, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::to_string(int)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[57f]"></a>MenuEditItemInfo_float51::strfunc(float)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, menu_advanced.o(i._ZN24MenuEditItemInfo_float517strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MenuEditItemInfo_float51::strfunc(float) &rArr; ftostr51rj(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr51rj(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::to_string(int)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[580]"></a>MenuEditItemInfo_percent::strfunc(float)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, menu_advanced.o(i._ZN24MenuEditItemInfo_percent7strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MenuEditItemInfo_percent::strfunc(float) &rArr; ui8tostr4pctrj(unsigned char) &rArr; pcttostrpctrj(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui8tostr4pctrj(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::to_string(int)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)
</UL>

<P><STRONG><a name="[581]"></a>MenuEditItemInfo_long5_25::strfunc(float)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, menu_advanced.o(i._ZN25MenuEditItemInfo_long5_257strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MenuEditItemInfo_long5_25::strfunc(float) &rArr; ftostr5rj(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr5rj(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::to_string(int)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::draw(bool, unsigned char, const char*, unsigned*, ...)
</UL>

<P><STRONG><a name="[582]"></a>MenuEditItemInfo_uint16_4::strfunc(float)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, menu_configuration.o(i._ZN25MenuEditItemInfo_uint16_47strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MenuEditItemInfo_uint16_4::strfunc(float) &rArr; ui16tostr4rj(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui16tostr4rj(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::to_string(int)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::draw(bool, unsigned char, const char*, unsigned short*, ...)
</UL>

<P><STRONG><a name="[583]"></a>MenuEditItemInfo_float5_25::strfunc(float)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, menu_advanced.o(i._ZN26MenuEditItemInfo_float5_257strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MenuEditItemInfo_float5_25::strfunc(float) &rArr; ftostr5rj(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr5rj(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::to_string(int)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[584]"></a>MenuEditItemInfo_float31sign::strfunc(float)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, menu_advanced.o(i._ZN28MenuEditItemInfo_float31sign7strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MenuEditItemInfo_float31sign::strfunc(float) &rArr; ftostr31sign(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr31sign(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::to_string(int)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[585]"></a>MenuEditItemInfo_float52sign::strfunc(float)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, menu_advanced.o(i._ZN28MenuEditItemInfo_float52sign7strfuncEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MenuEditItemInfo_float52sign::strfunc(float) &rArr; ftostr52sign(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr52sign(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::to_string(int)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::draw(bool, unsigned char, const char*, float*, ...)
</UL>

<P><STRONG><a name="[25c]"></a>TFT::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, menu_temperature.o(i._ZN3TFT13add_rectangleEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TFT::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetHotend()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetBED()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_feedrate()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_Fan0()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heater_status(unsigned short, unsigned short, signed char, char)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fan_status(unsigned short, unsigned short, bool, char)
</UL>

<P><STRONG><a name="[25b]"></a>TFT::set_background(unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu.o(i._ZN3TFT14set_backgroundEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TFT::set_background(unsigned short) &rArr; TFT_Queue::set_background(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::set_background(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetHotend()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetBED()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_feedrate()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_Fan0()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_unload_load_filament()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_message()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preheat_to_move_E()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_line(unsigned char, unsigned short)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heater_status(unsigned short, unsigned short, signed char, char)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fan_status(unsigned short, unsigned short, bool, char)
</UL>

<P><STRONG><a name="[574]"></a>TFT::draw_edit_screen_buttons()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ui_320x240.o(i._ZN3TFT24draw_edit_screen_buttonsEv))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
</UL>

<P><STRONG><a name="[5bf]"></a>TFT::init()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tft.o(i._ZN3TFT4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFT::init()
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SPI::Abort()
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SPI::Init()
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_IO::InitTFT()
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_lcd()
</UL>

<P><STRONG><a name="[25a]"></a>TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, menu.o(i._ZN3TFT6canvasEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetHotend()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetBED()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_feedrate()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_Fan0()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_unload_load_filament()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_message()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preheat_to_move_E()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_line(unsigned char, unsigned short)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heater_status(unsigned short, unsigned short, signed char, char)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fan_status(unsigned short, unsigned short, bool, char)
</UL>

<P><STRONG><a name="[25d]"></a>TFT::add_bar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, menu_temperature.o(i._ZN3TFT7add_barEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TFT::add_bar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_bar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::add_bar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetHotend()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetBED()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_feedrate()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_Fan0()
</UL>

<P><STRONG><a name="[2de]"></a>TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, menu.o(i._ZN3TFT8add_textEttt10TFT_Stringt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short) &rArr; TFT_Queue::add_text(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::add_text(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_unload_load_filament()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_hotend_status(unsigned char, unsigned char)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_message()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preheat_to_move_E()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heater_status(unsigned short, unsigned short, signed char, char)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fan_status(unsigned short, unsigned short, bool, char)
</UL>

<P><STRONG><a name="[313]"></a>TFT::add_text(unsigned short, unsigned short, unsigned short, const char*, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, menu_bed_leveling.o(i._ZN3TFT8add_textEtttPKct))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TFT::add_text(unsigned short, unsigned short, unsigned short, const char*, unsigned short) &rArr; TFT_Queue::add_text(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::add_text(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preheat_to_move_E()
</UL>

<P><STRONG><a name="[2da]"></a>TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, ui_320x240.o(i._ZN3TFT9add_imageEss11MarlinImagettt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemBase::_draw(bool, unsigned char, const char*, char, char)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdbase::draw(bool, unsigned char, const char*, CardReader&, bool)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heater_status(unsigned short, unsigned short, signed char, char)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fan_status(unsigned short, unsigned short, bool, char)
</UL>

<P><STRONG><a name="[24d]"></a>Print::print(const char*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_machine_info()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, const char*)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_xyze(const XYZEval&lang;float&rang;&, unsigned char, unsigned char)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printLongPath(char*)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_byte(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[3e1]"></a>Print::print(char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
</UL>

<P><STRONG><a name="[2c8]"></a>Print::print(double, int)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, print.o(i._ZN5Print5printEdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(double, int)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_2d_array(unsigned char, unsigned char, unsigned char, float(*)(unsigned char, unsigned char))
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()::[lambda(bool, const float&, const float&, const float&, const float&, bool) (instance 1)]::operator ()(bool, const float&, const float&, const float&, const float&, bool) const
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(const float&, const float&, float, heater_id_t)
</UL>

<P><STRONG><a name="[5a3]"></a>Print::print(unsigned char, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Print::print(unsigned char, int) &rArr; Print::print(unsigned long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[24f]"></a>Print::print(int, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_2d_array(unsigned char, unsigned char, unsigned char, float(*)(unsigned char, unsigned char))
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::get_target_extruder_from_command()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tool_change(unsigned char, bool)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_detail()
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::analog_to_celsius_hotend(int, unsigned char)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::_temp_error(heater_id_t, const char*, const char*)
</UL>

<P><STRONG><a name="[33f]"></a>Print::print(unsigned, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Print::print(unsigned, int) &rArr; Print::print(unsigned long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, unsigned)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[341]"></a>Print::print(long, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(long, int)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, long)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
</UL>

<P><STRONG><a name="[5c7]"></a>Print::print(unsigned long, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Print::print(unsigned long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
</UL>

<P><STRONG><a name="[5c6]"></a>Print::write(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, print.o(i._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>

<P><STRONG><a name="[160]"></a>Print::write(const unsigned char*, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, print.o(i._ZN5Print5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::write(const unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
<LI> print.o(.constdata__ZTV5Print)
<LI> stream.o(.constdata__ZTV6Stream)
<LI> softwareserial.o(.constdata__ZTV14SoftwareSerial)
</UL>
<P><STRONG><a name="[333]"></a>Print::println(const char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Print::println(const char*) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M118()
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_next_command()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[4ba]"></a>Print::println(double, int)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, print.o(i._ZN5Print7printlnEdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Print::println(double, int) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M420()
</UL>

<P><STRONG><a name="[588]"></a>Print::println(int, int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, print.o(i._ZN5Print7printlnEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Print::println(int, int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M115_cpp]::cap_line(const char*, bool)
</UL>

<P><STRONG><a name="[3dc]"></a>Print::println(unsigned, int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, print.o(i._ZN5Print7printlnEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Print::println(unsigned, int) &rArr; Print::print(unsigned, int) &rArr; Print::print(unsigned long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::report_status()
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>

<P><STRONG><a name="[3fd]"></a>Print::println(long, int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, print.o(i._ZN5Print7printlnEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::println(long, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::flush_and_request_resend()
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::gcode_line_error(const char*, signed char)
</UL>

<P><STRONG><a name="[5c8]"></a>Print::println()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, print.o(i._ZN5Print7printlnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::println() &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(long, int)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(double, int)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
</UL>

<P><STRONG><a name="[5c9]"></a>Probe::do_z_raise(float)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, probe.o(i._ZN5Probe10do_z_raiseEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = Probe::do_z_raise(float) &rArr; do_z_clearance(const float&, bool, bool, bool) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_z_clearance(const float&, bool, bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::set_deployed(bool)
</UL>

<P><STRONG><a name="[5ca]"></a>Probe::run_z_probe(bool)</STRONG> (Thumb, 554 bytes, Stack size 88 bytes, probe.o(i._ZN5Probe11run_z_probeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_z(const float&, const float&)
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_down_to_z(float, float)
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to probe_cpp]::ABS&lang;float&rang;(T1)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
</UL>

<P><STRONG><a name="[48f]"></a>Probe::set_deployed(bool)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, probe.o(i._ZN5Probe12set_deployedEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = Probe::set_deployed(bool) &rArr; Probe::do_z_raise(float) &rArr; do_z_clearance(const float&, bool, bool, bool) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_z_probe(bool)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(const XYval&lang;float&rang;&, const float&)
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::do_z_raise(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M402()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M401()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::stow()
</UL>

<P><STRONG><a name="[49d]"></a>Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, m48.o(i._ZN5Probe14probe_at_pointERK5XYvalIfE12ProbePtRaisehbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
</UL>

<P><STRONG><a name="[492]"></a>Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)</STRONG> (Thumb, 552 bytes, Stack size 64 bytes, probe.o(i._ZN5Probe14probe_at_pointERKfS1_12ProbePtRaisehbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_error_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_z(const float&, const float&)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::isnan(float)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::can_reach(const float&, const float&)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::set_deployed(bool)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(const XYZval&lang;float&rang;&, const float&)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::stow()
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_is_reachable(const float&, const float&)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::run_z_probe(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G30()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool)
</UL>

<P><STRONG><a name="[5cb]"></a>Probe::probe_down_to_z(float, float)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, probe.o(i._ZN5Probe15probe_down_to_zEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_from_steppers_for_axis(AxisEnum)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_z(const float&, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::run_z_probe(bool)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const
</UL>

<P><STRONG><a name="[48e]"></a>Probe::preheat_for_probing(unsigned short, unsigned short)</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, probe.o(i._ZN5Probe19preheat_for_probingEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = Probe::preheat_for_probing(unsigned short, unsigned short) &rArr; Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed_heating()
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to probe_cpp]::_MIN&lang;short, int&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
</UL>

<P><STRONG><a name="[5d0]"></a>Probe::stow()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, probe.o(i._ZN5Probe4stowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = Probe::stow() &rArr; Probe::set_deployed(bool) &rArr; Probe::do_z_raise(float) &rArr; do_z_clearance(const float&, bool, bool, bool) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::set_deployed(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
</UL>

<P><STRONG><a name="[488]"></a>Probe::max_x()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, g29.o(i._ZN5Probe5max_xEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Probe::max_x()
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to G29_cpp]::_MIN&lang;int, float&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::can_reach(const float&, const float&)
</UL>

<P><STRONG><a name="[48a]"></a>Probe::max_y()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, g29.o(i._ZN5Probe5max_yEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Probe::max_y()
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to G29_cpp]::_MIN&lang;int, float&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::can_reach(const float&, const float&)
</UL>

<P><STRONG><a name="[487]"></a>Probe::min_x()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, g29.o(i._ZN5Probe5min_xEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Probe::min_x()
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to G29_cpp]::_MAX&lang;int, float&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::can_reach(const float&, const float&)
</UL>

<P><STRONG><a name="[489]"></a>Probe::min_y()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, g29.o(i._ZN5Probe5min_yEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Probe::min_y()
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to G29_cpp]::_MAX&lang;int, float&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::can_reach(const float&, const float&)
</UL>

<P><STRONG><a name="[48d]"></a>Probe::can_reach(const XYval&lang;float&rang;&)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, g29.o(i._ZN5Probe9can_reachERK5XYvalIfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Probe::can_reach(const XYval&lang;float&rang;&) &rArr; Probe::can_reach(const float&, const float&) &rArr; Probe::min_y()
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::can_reach(const float&, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
</UL>

<P><STRONG><a name="[496]"></a>Probe::can_reach(const float&, const float&)</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, g29.o(i._ZN5Probe9can_reachERKfS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Probe::can_reach(const float&, const float&) &rArr; Probe::min_y()
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::min_y()
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::min_x()
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::max_y()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::max_x()
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G30()
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::can_reach(const XYval&lang;float&rang;&)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
</UL>

<P><STRONG><a name="[3a2]"></a>Buzzer::tick()</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, buzzer.o(i._ZN6Buzzer4tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Buzzer::tick() &rArr; tone(unsigned char, unsigned short, unsigned) &rArr; timer01B_set_overflow(unsigned short) &rArr; TIMER0_Cmd &rArr; [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned short, unsigned)
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue&lang;tone_t, (unsigned char)4&rang;::isEmpty()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::quick_feedback(bool)
</UL>

<P><STRONG><a name="[3bc]"></a>Buzzer::tone(unsigned short, unsigned short)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, buzzer.o(i._ZN6Buzzer4toneEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + In Cycle
<LI>Call Chain = Buzzer::tone(unsigned short, unsigned short) &rArr;  Temperature::manage_heater() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tick()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue&lang;tone_t, (unsigned char)4&rang;::isFull()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pause_cpp]::impatient_beep(signed char, bool)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M300()
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::completion_feedback(bool)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::buzz(long, unsigned short)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loud_kill(const char*, heater_id_t)
</UL>

<P><STRONG><a name="[637]"></a>CANVAS::AddRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 156 bytes, Stack size 28 bytes, canvas.o(i._ZN6CANVAS12AddRectangleEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CANVAS::AddRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::canvas(queueTask_t*)
</UL>

<P><STRONG><a name="[635]"></a>CANVAS::SetBackground(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, canvas.o(i._ZN6CANVAS13SetBackgroundEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CANVAS::SetBackground(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::canvas(queueTask_t*)
</UL>

<P><STRONG><a name="[5d5]"></a>CANVAS::New(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, canvas.o(i._ZN6CANVAS3NewEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CANVAS::New(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; TFT_IO::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_Address_Set(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_WR_DATA(unsigned short) &rArr; LCD_Writ_Bus(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_IO::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::canvas(queueTask_t*)
</UL>

<P><STRONG><a name="[636]"></a>CANVAS::AddBar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 28 bytes, canvas.o(i._ZN6CANVAS6AddBarEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CANVAS::AddBar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::canvas(queueTask_t*)
</UL>

<P><STRONG><a name="[5d7]"></a>CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, canvas.o(i._ZN6CANVAS7AddTextEtttPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::canvas(queueTask_t*)
</UL>

<P><STRONG><a name="[5d9]"></a>CANVAS::AddImage(short, short, MarlinImage, unsigned short*)</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, canvas.o(i._ZN6CANVAS8AddImageEss11MarlinImagePt))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CANVAS::AddImage(short, short, MarlinImage, unsigned short*) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::canvas(queueTask_t*)
</UL>

<P><STRONG><a name="[5d8]"></a>CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)</STRONG> (Thumb, 262 bytes, Stack size 52 bytes, canvas.o(i._ZN6CANVAS8AddImageEsshh11colorMode_tPhPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANVAS::AddImage(short, short, MarlinImage, unsigned short*)
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[634]"></a>CANVAS::Continue()</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, canvas.o(i._ZN6CANVAS8ContinueEv))
<BR><BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::canvas(queueTask_t*)
</UL>

<P><STRONG><a name="[5da]"></a>CANVAS::ToScreen()</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, canvas.o(i._ZN6CANVAS8ToScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CANVAS::ToScreen() &rArr; LCD_WR_DATA(unsigned short) &rArr; LCD_Writ_Bus(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::canvas(queueTask_t*)
</UL>

<P><STRONG><a name="[247]"></a>Nozzle::park(unsigned char, const XYZval&lang;float&rang;&)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nozzle.o(i._ZN6Nozzle4parkEhRK6XYZvalIfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = Nozzle::park(unsigned char, const XYZval&lang;float&rang;&) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_z(const float&, const float&)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy(const float&, const float&, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_print(const float&, const XYZval&lang;float&rang;&, const float&, bool)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G27()
</UL>

<P><STRONG><a name="[5db]"></a>Repeat::add_marker(unsigned, unsigned short)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, repeat.o(i._ZN6Repeat10add_markerEjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Repeat::add_marker(unsigned, unsigned short) &rArr; serial_echo_start() &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeat::early_parse_M808(char*)
</UL>

<P><STRONG><a name="[402]"></a>Repeat::early_parse_M808(char*)</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, repeat.o(i._ZN6Repeat16early_parse_M808EPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Repeat::early_parse_M808(char*) &rArr; Repeat::loop() &rArr; SdBaseFile::seekSet(unsigned) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeat::loop()
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeat::add_marker(unsigned, unsigned short)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
</UL>

<P><STRONG><a name="[5dc]"></a>Repeat::loop()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, repeat.o(i._ZN6Repeat4loopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Repeat::loop() &rArr; SdBaseFile::seekSet(unsigned) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Repeat::early_parse_M808(char*)
</UL>

<P><STRONG><a name="[fb]"></a>Repeat::cancel()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, repeat.o(i._ZN6Repeat6cancelEv))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M808()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[3e8]"></a>SdFile::write(const char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sdfile.o(i._ZN6SdFile5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = SdFile::write(const char*) &rArr; SdBaseFile::write(const void*, unsigned short) &rArr; SdBaseFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
</UL>

<P><STRONG><a name="[128]"></a>SdFile::SdFile()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cardreader.o(i._ZN6SdFileC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printLongPath(char*)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_cardreader_cpp_29701c05
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(i.__sti___14_cardreader_cpp_29701c05)
</UL>
<P><STRONG><a name="[6ea]"></a>SdFile::SdFile__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cardreader.o(i._ZN6SdFileC1Ev), UNUSED)

<P><STRONG><a name="[ac]"></a>SdFile::~SdFile()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, powerloss.o(i._ZN6SdFileD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SdFile::~SdFile() &rArr; SdBaseFile::close() &rArr; SdBaseFile::sync() &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::isOpen() const
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileExists(const char*)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::ls()
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printLongPath(char*)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByIndex(unsigned short)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::countFilesInWorkDir()
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::selectFileByName(const char*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> powerloss.o(i.__sti___13_powerloss_cpp_1e506b3c)
<LI> cardreader.o(i.<Func69>)
<LI> cardreader.o(i._ZN10CardReader10diveToFileEbRP6SdFilePKcb)
<LI> cardreader.o(i.__sti___14_cardreader_cpp_29701c05)
</UL>
<P><STRONG><a name="[6eb]"></a>SdFile::~SdFile__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, powerloss.o(i._ZN6SdFileD1Ev), UNUSED)

<P><STRONG><a name="[5d6]"></a>TFT_IO::set_window(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tft_io.o(i._ZN6TFT_IO10set_windowEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TFT_IO::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_Address_Set(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_WR_DATA(unsigned short) &rArr; LCD_Writ_Bus(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::fill(queueTask_t*)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANVAS::New(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[5c2]"></a>TFT_IO::InitTFT()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tft_io.o(i._ZN6TFT_IO7InitTFTEv))
<BR><BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::init()
</UL>

<P><STRONG><a name="[316]"></a>Planner::quick_stop()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner10quick_stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Planner::quick_stop() &rArr; Stepper::wake_up() &rArr; timer_enable_irq &rArr; timer42_irq_ctrl(en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::wake_up()
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::clear_block_buffer_runtime()
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_unload_load_filament()
</UL>

<P><STRONG><a name="[375]"></a>Planner::buffer_line(const float&, const float&, const float&, const float&, const float&, unsigned char, float)</STRONG> (Thumb, 112 bytes, Stack size 88 bytes, planner.o(i._ZN7Planner11buffer_lineERKfS1_S1_S1_S1_hf))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Planner::buffer_line(const float&, const float&, const float&, const float&, const float&, unsigned char, float) &rArr; Planner::buffer_segment(const float&, const float&, const float&, const float&, const float&, unsigned char, const float&) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&) &rArr;  idle(bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::apply_leveling(XYZval&lang;float&rang;&)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(const float&, const float&, const float&, const float&, const float&, unsigned char, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMove::task()
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segmented_line_to_destination(const float&, float)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_to_destination_cartesian()
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_to_current_position(const float&)
</UL>

<P><STRONG><a name="[5e0]"></a>Planner::recalculate()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner11recalculateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Planner::recalculate() &rArr; Planner::recalculate_trapezoids() &rArr; Planner::calculate_trapezoid_for_block(block_t*, const float&, const float&) &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::prev_block_index(unsigned char)
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass()
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
</UL>

<P><STRONG><a name="[244]"></a>Planner::synchronize()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner11synchronizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unscaled_e_move(const float&, const float&)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_print(const float&, const XYZval&lang;float&rang;&, const float&, bool)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::fileHasFinished()
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M400()
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M114()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M32()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_detail()
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::synchronize(const char*)
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_axis_position(AxisEnum, const int&)
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to(float, float, float, const float&)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[5e3]"></a>Planner::forward_pass()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, planner.o(i._ZN7Planner12forward_passEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Planner::forward_pass() &rArr; Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::next_block_index(unsigned char)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::is_block_busy(const block_t*)
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate()
</UL>

<P><STRONG><a name="[5e2]"></a>Planner::reverse_pass()</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, planner.o(i._ZN7Planner12reverse_passEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Planner::reverse_pass() &rArr; Planner::reverse_pass_kernel(block_t*, const block_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::prev_block_index(unsigned char)
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::next_block_index(unsigned char)
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass_kernel(block_t*, const block_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate()
</UL>

<P><STRONG><a name="[4b2]"></a>Planner::set_max_jerk(AxisEnum, float)</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, planner.o(i._ZN7Planner12set_max_jerkE8AxisEnumf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Planner::set_max_jerk(AxisEnum, float) &rArr; limit_and_warn(float&, unsigned char, const char*, const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_and_warn(float&, unsigned char, const char*, const XYZEval&lang;float&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M205()
</UL>

<P><STRONG><a name="[5e9]"></a>Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&)</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, planner.o(i._ZN7Planner13_buffer_stepsERK7XYZEvalIiEfhRKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + In Cycle
<LI>Call Chain = Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&) &rArr;  idle(bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::next_block_index(unsigned char)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate()
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(const float&, const float&, const float&, const float&, const float&, unsigned char, const float&)
</UL>

<P><STRONG><a name="[5eb]"></a>Planner::getHighESpeed()</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, planner.o(i._ZN7Planner13getHighESpeedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Planner::getHighESpeed() &rArr; Temperature::start_watching_hotend(unsigned char) &rArr; HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::next_block_index(unsigned char)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::check_axes_activity()
</UL>

<P><STRONG><a name="[377]"></a>Planner::apply_leveling(XYZval&lang;float&rang;&)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, planner.o(i._ZN7Planner14apply_levelingER6XYZvalIfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Planner::apply_leveling(XYZval&lang;float&rang;&) &rArr; bilinear_z_offset(const XYval&lang;float&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bilinear_z_offset(const XYval&lang;float&rang;&)
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::fade_scaling_factor_for_z(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_detail()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(const float&, const float&, const float&, const float&, const float&, unsigned char, float)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_position_mm(const float&, const float&, const float&, const float&)
</UL>

<P><STRONG><a name="[2bc]"></a>Planner::buffer_segment(const float&, const float&, const float&, const float&, const float&, unsigned char, const float&)</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, planner.o(i._ZN7Planner14buffer_segmentERKfS1_S1_S1_S1_hS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Planner::buffer_segment(const float&, const float&, const float&, const float&, const float&, unsigned char, const float&) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&) &rArr;  idle(bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::wake_up()
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_line(const float&, const float&, const float&, const float&, const float&, unsigned char, float)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[5ea]"></a>Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)</STRONG> (Thumb, 4480 bytes, Stack size 208 bytes, planner.o(i._ZN7Planner15_populate_blockEP7block_tbRK7XYZEvalIiEfhRKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&) &rArr; serial_echo_start() &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::wake_up()
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::max_allowable_speed_sqr(const float&, const float&, const float&)
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOMORE&lang;float, float&rang;(T1&, T2)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to planner_cpp]::_MIN&lang;float, float&rang;(T1, T2)
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to planner_cpp]::_MAX&lang;unsigned, unsigned&rang;(T1, T2)
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to planner_cpp]::_MAX&lang;int, &lang;int, int&rang;&rang;(T1, T2...)
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to planner_cpp]::_MAX&lang;float, float&rang;(T1, T2)
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to planner_cpp]::ABS&lang;int&rang;(T1)
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to planner_cpp]::ABS&lang;float&rang;(T1)
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
</UL>

<P><STRONG><a name="[32b]"></a>Planner::set_position_mm(const float&, const float&, const float&, const float&)</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, planner.o(i._ZN7Planner15set_position_mmERKfS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Planner::set_position_mm(const float&, const float&, const float&, const float&) &rArr; Planner::set_machine_position_mm(const float&, const float&, const float&, const float&) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::apply_leveling(XYZval&lang;float&rang;&)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(const float&, const float&, const float&, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
</UL>

<P><STRONG><a name="[5e7]"></a>Planner::next_block_index(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner16next_block_indexEh))
<BR><BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_current_block()
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::getHighESpeed()
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass()
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass()
</UL>

<P><STRONG><a name="[5e1]"></a>Planner::prev_block_index(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner16prev_block_indexEh))
<BR><BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass()
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate()
</UL>

<P><STRONG><a name="[4b1]"></a>Planner::set_max_feedrate(unsigned char, float)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner16set_max_feedrateEhf))
<BR><BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M203()
</UL>

<P><STRONG><a name="[378]"></a>Planner::unapply_leveling(XYZval&lang;float&rang;&)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, planner.o(i._ZN7Planner16unapply_levelingER6XYZvalIfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Planner::unapply_leveling(XYZval&lang;float&rang;&) &rArr; bilinear_z_offset(const XYval&lang;float&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bilinear_z_offset(const XYval&lang;float&rang;&)
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::fade_scaling_factor_for_z(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_from_steppers_for_axis(AxisEnum)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bed_leveling_enabled(bool)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_detail()
</UL>

<P><STRONG><a name="[5f6]"></a>Planner::buffer_sync_block()</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, planner.o(i._ZN7Planner17buffer_sync_blockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = Planner::buffer_sync_block() &rArr;  idle(bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::wake_up()
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::next_block_index(unsigned char)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(const float&)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(const float&, const float&, const float&, const float&)
</UL>

<P><STRONG><a name="[5f7]"></a>Planner::endstop_triggered(AxisEnum)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner17endstop_triggeredE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Planner::endstop_triggered(AxisEnum) &rArr; Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::wake_up() &rArr; timer_enable_irq &rArr; timer42_irq_ctrl(en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::endstop_triggered(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::update()
</UL>

<P><STRONG><a name="[5f9]"></a>Planner::get_current_block()</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, planner.o(i._ZN7Planner17get_current_blockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Planner::get_current_block()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::next_block_index(unsigned char)
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::clear_block_buffer_runtime()
</UL>
<BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[278]"></a>Planner::set_e_position_mm(const float&)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, planner.o(i._ZN7Planner17set_e_position_mmERKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = Planner::set_e_position_mm(const float&) &rArr; Stepper::set_axis_position(AxisEnum, const int&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_axis_position(AxisEnum, const int&)
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position_e()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
</UL>

<P><STRONG><a name="[4a6]"></a>Planner::autotemp_M104_M109()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner18autotemp_M104_M109Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Planner::autotemp_M104_M109() &rArr; GCodeParser::value_float() &rArr; __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seenval(char)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
</UL>

<P><STRONG><a name="[4a1]"></a>Planner::finish_and_disable()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner18finish_and_disableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = Planner::finish_and_disable() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all_steppers()
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
</UL>

<P><STRONG><a name="[30d]"></a>Planner::check_axes_activity()</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, planner.o(i._ZN7Planner19check_axes_activityEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Planner::check_axes_activity() &rArr; Planner::getHighESpeed() &rArr; Temperature::start_watching_hotend(unsigned char) &rArr; HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::scaledFanSpeed(unsigned char, unsigned char)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::getHighESpeed()
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
</UL>

<P><STRONG><a name="[5e6]"></a>Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, planner.o(i._ZN7Planner19forward_pass_kernelEPK7block_tPS0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::max_allowable_speed_sqr(const float&, const float&, const float&)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::is_block_busy(const block_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass()
</UL>

<P><STRONG><a name="[4a3]"></a>Planner::refresh_positioning()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner19refresh_positioningEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Planner::refresh_positioning() &rArr; Planner::set_position_mm(const float&, const float&, const float&, const float&) &rArr; Planner::set_machine_position_mm(const float&, const float&, const float&, const float&) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_position_mm(const float&, const float&, const float&, const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M92()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()::[lambda() (instance 7)]::_FUN()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()::[lambda() (instance 5)]::_FUN()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()::[lambda() (instance 3)]::_FUN()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[5e8]"></a>Planner::reverse_pass_kernel(block_t*, const block_t*)</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, planner.o(i._ZN7Planner19reverse_pass_kernelEP7block_tPKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Planner::reverse_pass_kernel(block_t*, const block_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::max_allowable_speed_sqr(const float&, const float&, const float&)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::is_block_busy(const block_t*)
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to planner_cpp]::_MIN&lang;float, float&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass()
</UL>

<P><STRONG><a name="[62b]"></a>Planner::block_buffer_runtime()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner20block_buffer_runtimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
</UL>

<P><STRONG><a name="[2ba]"></a>Planner::get_axis_position_mm(AxisEnum)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, planner.o(i._ZN7Planner20get_axis_position_mmE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Planner::get_axis_position_mm(AxisEnum)
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::position(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_current_from_steppers_for_axis(AxisEnum)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cartesian_from_steppers()
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_detail()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[4b0]"></a>Planner::set_max_acceleration(unsigned char, float)</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, planner.o(i._ZN7Planner20set_max_accelerationEhf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Planner::set_max_acceleration(unsigned char, float) &rArr; limit_and_warn(float&, unsigned char, const char*, const XYZEval&lang;float&rang;&) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_and_warn(float&, unsigned char, const char*, const XYZEval&lang;float&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
</UL>

<P><STRONG><a name="[5fc]"></a>Planner::triggered_position_mm(AxisEnum)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, planner.o(i._ZN7Planner21triggered_position_mmE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Planner::triggered_position_mm(AxisEnum)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::triggered_position(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
</UL>

<P><STRONG><a name="[5e4]"></a>Planner::recalculate_trapezoids()</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, planner.o(i._ZN7Planner22recalculate_trapezoidsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Planner::recalculate_trapezoids() &rArr; Planner::calculate_trapezoid_for_block(block_t*, const float&, const float&) &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::prev_block_index(unsigned char)
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::next_block_index(unsigned char)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::is_block_busy(const block_t*)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, const float&, const float&)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate()
</UL>

<P><STRONG><a name="[5f4]"></a>Planner::max_allowable_speed_sqr(const float&, const float&, const float&)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner23max_allowable_speed_sqrERKfS1_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass_kernel(block_t*, const block_t*)
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
</UL>

<P><STRONG><a name="[ed]"></a>Planner::refresh_frequency_limit()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, menu_advanced.o(i._ZN7Planner23refresh_frequency_limitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Planner::refresh_frequency_limit() &rArr; __hardfp_lroundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_accelerationv)
</UL>
<P><STRONG><a name="[2bb]"></a>Planner::set_machine_position_mm(const float&, const float&, const float&, const float&)</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, planner.o(i._ZN7Planner23set_machine_position_mmERKfS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Planner::set_machine_position_mm(const float&, const float&, const float&, const float&) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_position_mm(const float&, const float&, const float&, const float&)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[52d]"></a>Planner::reset_acceleration_rates()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, planner.o(i._ZN7Planner24reset_acceleration_ratesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Planner::reset_acceleration_rates()
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOLESS&lang;unsigned, unsigned&rang;(T1&, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_max_acceleration(unsigned char, float)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()::[lambda() (instance 7)]::_FUN()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()::[lambda() (instance 5)]::_FUN()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()::[lambda() (instance 3)]::_FUN()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[5ed]"></a>Planner::fade_scaling_factor_for_z(const float&)</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner25fade_scaling_factor_for_zERKf))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::unapply_leveling(XYZval&lang;float&rang;&)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::apply_leveling(XYZval&lang;float&rang;&)
</UL>

<P><STRONG><a name="[5de]"></a>Planner::clear_block_buffer_runtime()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner26clear_block_buffer_runtimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::quick_stop()
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_current_block()
</UL>

<P><STRONG><a name="[5fe]"></a>Planner::calculate_trapezoid_for_block(block_t*, const float&, const float&)</STRONG> (Thumb, 730 bytes, Stack size 104 bytes, planner.o(i._ZN7Planner29calculate_trapezoid_for_blockEP7block_tRKfS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Planner::calculate_trapezoid_for_block(block_t*, const float&, const float&) &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::estimate_acceleration_distance(const float&, const float&, const float&)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to planner_cpp]::NOLESS&lang;unsigned, unsigned&rang;(T1&, T2)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floorf
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
</UL>

<P><STRONG><a name="[601]"></a>Planner::estimate_acceleration_distance(const float&, const float&, const float&)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner30estimate_acceleration_distanceERKfS1_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, const float&, const float&)
</UL>

<P><STRONG><a name="[4af]"></a>Planner::calculate_volumetric_multipliers()</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner32calculate_volumetric_multipliersEv))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M200()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::postprocess()
</UL>

<P><STRONG><a name="[603]"></a>Planner::init()</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, planner.o(i._ZN7Planner4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::Planner()
</UL>

<P><STRONG><a name="[602]"></a>Planner::Planner()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, planner.o(i._ZN7PlannerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Planner::Planner()
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_planner_cpp_planner
</UL>

<P><STRONG><a name="[6ec]"></a>Planner::Planner__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, planner.o(i._ZN7PlannerC1Ev), UNUSED)

<P><STRONG><a name="[552]"></a>SSwitch::active()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, serial_switch.o(i._ZN7SSwitch6activeEv))
<BR><BR>[Called By]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::preWriteCommunication()
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::preReadCommunication()
</UL>

<P><STRONG><a name="[604]"></a>Sd2Card::writeBlock(unsigned, const unsigned char*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sdvolume.o(i._ZN7Sd2Card10writeBlockEjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlock(unsigned, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
</UL>

<P><STRONG><a name="[520]"></a>SoftPWM::add(unsigned char, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, temperature.o(i._ZN7SoftPWM3addEhh))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tick()
</UL>

<P><STRONG><a name="[605]"></a>Stepper::do_babystep(AxisEnum, bool)</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stepper.o(i._ZN7Stepper11do_babystepE8AxisEnumb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Stepper::do_babystep(AxisEnum, bool) &rArr; PORT_ResetBitsMapp &rArr; PORT_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_Delay1us
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::step_axis(AxisEnum)
</UL>

<P><STRONG><a name="[5ff]"></a>Stepper::set_position(const int&, const int&, const int&, const int&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stepper.o(i._ZN7Stepper12set_positionERKiS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = Stepper::set_position(const int&, const int&, const int&, const int&) &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::wake_up()
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::_set_position(const int&, const int&, const int&, const int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(const float&, const float&, const float&, const float&)
</UL>

<P><STRONG><a name="[606]"></a>Stepper::_set_position(const int&, const int&, const int&, const int&)</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, stepper.o(i._ZN7Stepper13_set_positionERKiS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Stepper::_set_position(const int&, const int&, const int&, const int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[5e5]"></a>Stepper::is_block_busy(const block_t*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper13is_block_busyEPK7block_t))
<BR><BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass_kernel(block_t*, const block_t*)
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass_kernel(const block_t*, block_t*, unsigned char)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::forward_pass()
</UL>

<P><STRONG><a name="[607]"></a>Stepper::set_directions(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stepper.o(i._ZN7Stepper14set_directionsEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Stepper::set_directions(unsigned char) &rArr; Stepper::set_directions() &rArr; PORT_ResetBitsMapp &rArr; PORT_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions()
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[36f]"></a>Stepper::set_directions()</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, stepper.o(i._ZN7Stepper14set_directionsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Stepper::set_directions() &rArr; PORT_ResetBitsMapp &rArr; PORT_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions(unsigned char)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trinamic_drivers()
</UL>

<P><STRONG><a name="[608]"></a>Stepper::AWAIT_LOW_PULSE()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stepper.o(i._ZN7Stepper15AWAIT_LOW_PULSEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Stepper::AWAIT_LOW_PULSE() &rArr; Stepper::AWAIT_TIMED_PULSE(unsigned char) &rArr; HAL_watchdog_refresh() &rArr; iwdg_feed &rArr; bsp_wdt_refresh() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_TIMED_PULSE(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
</UL>

<P><STRONG><a name="[60a]"></a>Stepper::block_phase_isr()</STRONG> (Thumb, 4160 bytes, Stack size 72 bytes, stepper.o(i._ZN7Stepper15block_phase_isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Stepper::block_phase_isr() &rArr; Endstops::update() &rArr; Planner::endstop_triggered(AxisEnum) &rArr; Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::wake_up() &rArr; timer_enable_irq &rArr; timer42_irq_ctrl(en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::update()
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_current_block()
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MAX&lang;unsigned long, unsigned long&rang;(T1, T2)
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MAX&lang;unsigned, unsigned long&rang;(T1, T2)
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions(unsigned char)
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::_set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
</UL>

<P><STRONG><a name="[60e]"></a>Stepper::pulse_phase_isr()</STRONG> (Thumb, 758 bytes, Stack size 24 bytes, stepper.o(i._ZN7Stepper15pulse_phase_isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Stepper::pulse_phase_isr() &rArr; Stepper::AWAIT_HIGH_PULSE() &rArr; Stepper::AWAIT_TIMED_PULSE(unsigned char) &rArr; HAL_watchdog_refresh() &rArr; iwdg_feed &rArr; bsp_wdt_refresh() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_count
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_HIGH_PULSE()
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_LOW_PULSE()
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
</UL>

<P><STRONG><a name="[610]"></a>Stepper::AWAIT_HIGH_PULSE()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stepper.o(i._ZN7Stepper16AWAIT_HIGH_PULSEEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Stepper::AWAIT_HIGH_PULSE() &rArr; Stepper::AWAIT_TIMED_PULSE(unsigned char) &rArr; HAL_watchdog_refresh() &rArr; iwdg_feed &rArr; bsp_wdt_refresh() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_TIMED_PULSE(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
</UL>

<P><STRONG><a name="[371]"></a>Stepper::report_positions()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stepper.o(i._ZN7Stepper16report_positionsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Stepper::report_positions() &rArr; Stepper::report_a_position(const XYZval&lang;int&rang;&) &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_a_position(const XYZval&lang;int&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position()
</UL>

<P><STRONG><a name="[609]"></a>Stepper::AWAIT_TIMED_PULSE(unsigned char)</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stepper.o(i._ZN7Stepper17AWAIT_TIMED_PULSEEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Stepper::AWAIT_TIMED_PULSE(unsigned char) &rArr; HAL_watchdog_refresh() &rArr; iwdg_feed &rArr; bsp_wdt_refresh() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_count
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MIN&lang;unsigned, unsigned long&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_HIGH_PULSE()
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_LOW_PULSE()
</UL>

<P><STRONG><a name="[5f8]"></a>Stepper::endstop_triggered(AxisEnum)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stepper.o(i._ZN7Stepper17endstop_triggeredE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::wake_up() &rArr; timer_enable_irq &rArr; timer42_irq_ctrl(en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::wake_up()
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
</UL>
<BR>[Called By]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::endstop_triggered(AxisEnum)
</UL>

<P><STRONG><a name="[39d]"></a>Stepper::report_a_position(const XYZval&lang;int&rang;&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stepper.o(i._ZN7Stepper17report_a_positionERK6XYZvalIiE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Stepper::report_a_position(const XYZval&lang;int&rang;&) &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_projected()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::report_positions()
</UL>

<P><STRONG><a name="[5fa]"></a>Stepper::set_axis_position(AxisEnum, const int&)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stepper.o(i._ZN7Stepper17set_axis_positionE8AxisEnumRKi))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = Stepper::set_axis_position(AxisEnum, const int&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(const float&)
</UL>

<P><STRONG><a name="[5fd]"></a>Stepper::triggered_position(AxisEnum)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper18triggered_positionE8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::triggered_position_mm(AxisEnum)
</UL>

<P><STRONG><a name="[37c]"></a>Stepper::isr()</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stepper.o(i._ZN7Stepper3isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Stepper::isr() &rArr; Stepper::block_phase_isr() &rArr; Endstops::update() &rArr; Planner::endstop_triggered(AxisEnum) &rArr; Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::wake_up() &rArr; timer_enable_irq &rArr; timer42_irq_ctrl(en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_count
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_set_compare(unsigned char, unsigned short)
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_zero_match_irq_cb()
</UL>

<P><STRONG><a name="[612]"></a>Stepper::init()</STRONG> (Thumb, 396 bytes, Stack size 8 bytes, stepper.o(i._ZN7Stepper4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Stepper::init() &rArr; HAL_timer_start(unsigned char, unsigned) &rArr; setup_step_tim &rArr; timer42_set_frequency(unsigned) &rArr; get_pclk1Freq() &rArr; CLK_GetClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBitsMapp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_start(unsigned char, unsigned)
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::wake_up()
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_directions(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[5dd]"></a>Stepper::suspend()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, planner.o(i._ZN7Stepper7suspendEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Stepper::suspend() &rArr; timer_enable_irq &rArr; timer42_irq_ctrl(en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_interrupt_enabled(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::quick_stop()
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::endstop_triggered(AxisEnum)
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
</UL>

<P><STRONG><a name="[5df]"></a>Stepper::wake_up()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, planner.o(i._ZN7Stepper7wake_upEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Stepper::wake_up() &rArr; timer_enable_irq &rArr; timer42_irq_ctrl(en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::quick_stop()
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::endstop_triggered(AxisEnum)
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::set_position(const int&, const int&, const int&, const int&)
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_sync_block()
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(const float&, const float&, const float&, const float&, const float&, unsigned char, const float&)
</UL>

<P><STRONG><a name="[39a]"></a>Stepper::position(AxisEnum)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stepper.o(i._ZN7Stepper8positionE8AxisEnum))
<BR><BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M114()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::get_axis_position_mm(AxisEnum)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_current_position_detail()
</UL>

<P><STRONG><a name="[5c0]"></a>TFT_SPI::Init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tft_spi.o(i._ZN7TFT_SPI4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::init()
</UL>

<P><STRONG><a name="[5c1]"></a>TFT_SPI::Abort()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tft_spi.o(i._ZN7TFT_SPI5AbortEv))
<BR><BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::reset()
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::init()
</UL>

<P><STRONG><a name="[632]"></a>TFT_SPI::isBusy()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tft_spi.o(i._ZN7TFT_SPI6isBusyEv))
<BR><BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::async()
</UL>

<P><STRONG><a name="[4b3]"></a>Babystep::add_mm(AxisEnum, const float&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, babystep.o(i._ZN8Babystep6add_mmE8AxisEnumRKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Babystep::add_mm(AxisEnum, const float&) &rArr; Babystep::add_steps(AxisEnum, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_steps(AxisEnum, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M290()
</UL>

<P><STRONG><a name="[352]"></a>Babystep::add_steps(AxisEnum, short)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, babystep.o(i._ZN8Babystep9add_stepsE8AxisEnums))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Babystep::add_steps(AxisEnum, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axes_should_home(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Babystep::add_mm(AxisEnum, const float&)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_babystep_zoffset()
</UL>

<P><STRONG><a name="[525]"></a>Babystep::step_axis(AxisEnum)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, babystep.o(i._ZN8Babystep9step_axisE8AxisEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Babystep::step_axis(AxisEnum) &rArr; Stepper::do_babystep(AxisEnum, bool) &rArr; PORT_ResetBitsMapp &rArr; PORT_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::do_babystep(AxisEnum, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tick()
</UL>

<P><STRONG><a name="[481]"></a>Endstops::not_homing()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, endstops.o(i._ZN8Endstops10not_homingEv))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[613]"></a>Endstops::event_handler()</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, endstops.o(i._ZN8Endstops13event_handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Endstops::event_handler() &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_printf_P(unsigned char, const char*, ...)
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::triggered_position_mm(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
</UL>

<P><STRONG><a name="[4aa]"></a>Endstops::report_states()</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, endstops.o(i._ZN8Endstops13report_statesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Endstops::report_states() &rArr; [local to endstops_cpp]::print_es_state(bool, const char*) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to endstops_cpp]::print_es_state(bool, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M119()
</UL>

<P><STRONG><a name="[5ce]"></a>Endstops::enable_z_probe(bool)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, endstops.o(i._ZN8Endstops14enable_z_probeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Endstops::enable_z_probe(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::resync()
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::set_deployed(bool)
</UL>

<P><STRONG><a name="[4ab]"></a>Endstops::enable_globally(bool)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, endstops.o(i._ZN8Endstops15enable_globallyEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Endstops::enable_globally(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::resync()
</UL>
<BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::init()
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M121()
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M120()
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
</UL>

<P><STRONG><a name="[2bd]"></a>Endstops::validate_homing_move()</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, endstops.o(i._ZN8Endstops20validate_homing_moveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Endstops::validate_homing_move() &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to G28_cpp]::quick_home_xy()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_homing_move(AxisEnum, float, float, bool)
</UL>

<P><STRONG><a name="[615]"></a>Endstops::init()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, endstops.o(i._ZN8Endstops4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Endstops::init() &rArr; Endstops::enable_globally(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[526]"></a>Endstops::poll()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, endstops.o(i._ZN8Endstops4pollEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Endstops::poll() &rArr; Endstops::update() &rArr; Planner::endstop_triggered(AxisEnum) &rArr; Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::wake_up() &rArr; timer_enable_irq &rArr; timer42_irq_ctrl(en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tick()
</UL>

<P><STRONG><a name="[47e]"></a>Endstops::enable(bool)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, endstops.o(i._ZN8Endstops6enableEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = Endstops::enable(bool) &rArr; Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::resync()
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[614]"></a>Endstops::resync()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, endstops.o(i._ZN8Endstops6resyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = Endstops::resync() &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_z_probe(bool)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable(bool)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_globally(bool)
</UL>

<P><STRONG><a name="[60d]"></a>Endstops::update()</STRONG> (Thumb, 502 bytes, Stack size 8 bytes, endstops.o(i._ZN8Endstops6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Endstops::update() &rArr; Planner::endstop_triggered(AxisEnum) &rArr; Stepper::endstop_triggered(AxisEnum) &rArr; Stepper::wake_up() &rArr; timer_enable_irq &rArr; timer42_irq_ctrl(en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::endstop_triggered(AxisEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::poll()
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[478]"></a>MarlinUI::has_status()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, marlinui.o(i._ZN8MarlinUI10has_statusEv))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
</UL>

<P><STRONG><a name="[334]"></a>MarlinUI::set_status(const char*, bool)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, marlinui.o(i._ZN8MarlinUI10set_statusEPKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MarlinUI::set_status(const char*, bool) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::finish_status(bool)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileWrite(char*)
</UL>

<P><STRONG><a name="[bc]"></a>MarlinUI::abort_print()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI11abort_printEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MarlinUI::abort_print() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu.o(i._Z15LCD_abort_pringv)
<LI> menu_main.o(i._ZZ9menu_mainvENKUlvE_clEv)
</UL>
<P><STRONG><a name="[2f0]"></a>MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, menu.o(i._ZN8MarlinUI11goto_screenEPFvvEthh))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::clear_lcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_show_message(PauseMessage, PauseMode, unsigned char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1000()
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::synchronize(const char*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_settings()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_screen()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::media_changed(unsigned char, unsigned char)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance_e_maybe()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_goto_manual_move(float, AxisEnum)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preheat_to_move_E()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 1)]::_FUN()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media_filelist()
</UL>

<P><STRONG><a name="[e8]"></a>MarlinUI::init_eeprom()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, marlinui.o(i._ZN8MarlinUI11init_eepromEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = MarlinUI::init_eeprom() &rArr; MarlinSettings::reset() &rArr; MarlinSettings::postprocess() &rArr; set_z_fade_height(float, bool) &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::completion_feedback(bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu_advanced.o(i._ZZ22menu_advanced_settingsvENKUlvE1_clEv)
<LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[3a6]"></a>MarlinUI::kill_screen(const char*, const char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, marlinui.o(i._ZN8MarlinUI11kill_screenEPKcS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_printf_P(unsigned char, const char*, ...)
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
</UL>

<P><STRONG><a name="[f9]"></a>MarlinUI::pause_print()</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI11pause_printEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = MarlinUI::pause_print() &rArr; MarlinUI::synchronize(const char*) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::inject_P(const char*)
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::synchronize(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[61b]"></a>MarlinUI::synchronize(const char*)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, menu.o(i._ZN8MarlinUI11synchronizeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = MarlinUI::synchronize(const char*) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen_no_defer()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::push_current_screen()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_print()
</UL>

<P><STRONG><a name="[27c]"></a>MarlinUI::reset_status(bool)</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, marlinui.o(i._ZN8MarlinUI12reset_statusEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MarlinUI::reset_status(bool) &rArr; MarlinUI::set_status_P(const char*, signed char) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsPaused()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::longest_filename()
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::resume_print()
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_start_selected_file()
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed_heating()
</UL>

<P><STRONG><a name="[ff]"></a>MarlinUI::resume_print()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI12resume_printEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MarlinUI::resume_print() &rArr; MarlinUI::reset_status(bool) &rArr; MarlinUI::set_status_P(const char*, signed char) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::inject_P(const char*)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isPaused()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[53a]"></a>MarlinUI::set_language(unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI12set_languageEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MarlinUI::set_language(unsigned char) &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[3f2]"></a>MarlinUI::set_status_P(const char*, signed char)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, marlinui.o(i._ZN8MarlinUI12set_status_PEPKca))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MarlinUI::set_status_P(const char*, signed char) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::finish_status(bool)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M0_M1()
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M303()
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M17()
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G4()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_alert_status_P(const char*)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_settings()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_screen()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::media_changed(unsigned char, unsigned char)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_language(unsigned char)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::resume_print()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_print()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::abort_print()
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed_heating()
</UL>

<P><STRONG><a name="[61d]"></a>MarlinUI::_get_progress()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI13_get_progressEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MarlinUI::_get_progress()
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isFileOpen()
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
</UL>

<P><STRONG><a name="[616]"></a>MarlinUI::finish_status(bool)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, marlinui.o(i._ZN8MarlinUI13finish_statusEb))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_printf_P(unsigned char, const char*, ...)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status(const char*, bool)
</UL>

<P><STRONG><a name="[cc]"></a>MarlinUI::load_settings()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI13load_settingsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = MarlinUI::load_settings() &rArr; MarlinSettings::load() &rArr; MarlinSettings::validate() &rArr; MarlinSettings::_load() &rArr; MarlinSettings::postprocess() &rArr; set_z_fade_height(float, bool) &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::completion_feedback(bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu_bed_leveling.o(i._Z17menu_bed_levelingv)
<LI> menu_configuration.o(i._Z18menu_configurationv)
</UL>
<P><STRONG><a name="[3d4]"></a>MarlinUI::media_changed(unsigned char, unsigned char)</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, marlinui.o(i._ZN8MarlinUI13media_changedEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MarlinUI::media_changed(unsigned char, unsigned char) &rArr; MarlinUI::quick_feedback(bool) &rArr; MarlinUI::buzz(long, unsigned short) &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr;  Temperature::manage_heater() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::quick_feedback(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
</UL>

<P><STRONG><a name="[10d]"></a>MarlinUI::status_screen()</STRONG> (Thumb, 606 bytes, Stack size 16 bytes, marlinui.o(i._ZN8MarlinUI13status_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = MarlinUI::status_screen() &rArr; MarlinUI::draw_status_screen(char) &rArr; draw_heater_status(unsigned short, unsigned short, signed char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsPaused()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsActive()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::inject_P(const char*)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::isPaused()
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> marlinui.o(i._ZN8MarlinUI14reset_settingsEv)
<LI> marlinui.o(i._ZZN8MarlinUI6updateEvENKUlvE_clEv)
<LI> marlinui.o(i.__sti___12_marlinui_cpp_ui)
<LI> menu.o(i._ZN8MarlinUI11goto_screenEPFvvEthh)
<LI> menu.o(i._ZN8MarlinUI16return_to_statusEv)
<LI> marlinui.o(i._ZN8MarlinUI16on_status_screenEv)
</UL>
<P><STRONG><a name="[61e]"></a>MarlinUI::quick_feedback(bool)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI14quick_feedbackEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MarlinUI::quick_feedback(bool) &rArr; MarlinUI::buzz(long, unsigned short) &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr;  Temperature::manage_heater() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tick()
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::buzz(long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::media_changed(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[d8]"></a>MarlinUI::reset_settings()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI14reset_settingsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = MarlinUI::reset_settings() &rArr; MarlinSettings::reset() &rArr; MarlinSettings::postprocess() &rArr; set_z_fade_height(float, bool) &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::inject_P(const char*)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::completion_feedback(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(i._Z18menu_configurationv)
</UL>
<P><STRONG><a name="[cb]"></a>MarlinUI::store_settings()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI14store_settingsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MarlinUI::store_settings() &rArr; MarlinSettings::save() &rArr; PersistentStore::access_finish() &rArr; eeprom_buffer_flush &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::completion_feedback(bool)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> menu_bed_leveling.o(i._Z17menu_bed_levelingv)
<LI> menu_configuration.o(i._Z18menu_configurationv)
<LI> menu_configuration.o(i._Z36_menu_configuration_preheat_settingsv)
</UL>
<P><STRONG><a name="[521]"></a>MarlinUI::update_buttons()</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, marlinui.o(i._ZN8MarlinUI14update_buttonsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MarlinUI::update_buttons() &rArr; PORT_GetBitMapp &rArr; PORT_GetBit
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tick()
</UL>

<P><STRONG><a name="[621]"></a>MarlinUI::show_bootscreen()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ui_320x240.o(i._ZN8MarlinUI15show_bootscreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = MarlinUI::show_bootscreen() &rArr; AC_PlayTune(unsigned char, const unsigned short*, unsigned char) &rArr; safe_delay(unsigned) &rArr; Temperature::manage_heater() &rArr; Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short) &rArr; Temperature::_temp_error(heater_id_t, const char*, const char*) &rArr; loud_kill(const char*, heater_id_t) &rArr; kill(const char*, const char*, bool) &rArr; MarlinUI::kill_screen(const char*, const char*) &rArr; MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_logo_secreen()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PlayTune(unsigned char, const unsigned short*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
</UL>

<P><STRONG><a name="[490]"></a>MarlinUI::status_printf_P(unsigned char, const char*, ...)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, marlinui.o(i._ZN8MarlinUI15status_printf_PEhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MarlinUI::status_printf_P(unsigned char, const char*, ...) &rArr; __c89vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::finish_status(bool)
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::kill_screen(const char*, const char*)
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_heating_message(unsigned char)
</UL>

<P><STRONG><a name="[61a]"></a>MarlinUI::draw_kill_screen()</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, ui_320x240.o(i._ZN8MarlinUI16draw_kill_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MarlinUI::draw_kill_screen() &rArr; TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::center(unsigned short)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::trim(unsigned char)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::reset()
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::sync()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::kill_screen(const char*, const char*)
</UL>

<P><STRONG><a name="[62a]"></a>MarlinUI::on_status_screen()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, marlinui.o(i._ZN8MarlinUI16on_status_screenEv))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
</UL>

<P><STRONG><a name="[bd]"></a>MarlinUI::return_to_status()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu.o(i._ZN8MarlinUI16return_to_statusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::kill_screen(const char*, const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::pause_show_message(PauseMessage, PauseMode, unsigned char)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_alert_status_P(const char*)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_power_loss_recovery_cancel()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::media_changed(unsigned char, unsigned char)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_language(unsigned char)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_eeprom()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::abort_print()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_job_recovery_cpp]::lcd_power_loss_recovery_resume()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_message()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preheat_pla()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preheat_ABS()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdcard_start_selected_file()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_cooldown()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(i._Z15LCD_abort_pringv)
</UL>
<P><STRONG><a name="[2d4]"></a>MarlinUI::update_selection()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, menu.o(i._ZN8MarlinUI16update_selectionEv))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_abort_pring()
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[2c5]"></a>MarlinUI::get_preheat_label(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, marlinui.o(i._ZN8MarlinUI17get_preheat_labelEh))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
</UL>

<P><STRONG><a name="[323]"></a>MarlinUI::draw_hotend_status(unsigned char, unsigned char)</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, ui_320x240.o(i._ZN8MarlinUI18draw_hotend_statusEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MarlinUI::draw_hotend_status(unsigned char, unsigned char) &rArr; TFT_String::set(const char*) &rArr; TFT_String::set(unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i16tostr3rj(short)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::center(unsigned short)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::trim(unsigned char)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(const char*)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(const char*)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_line(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
</UL>

<P><STRONG><a name="[61f]"></a>MarlinUI::draw_status_screen(char)</STRONG> (Thumb, 1046 bytes, Stack size 96 bytes, ui_320x240.o(i._ZN8MarlinUI18draw_status_screenEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = MarlinUI::draw_status_screen(char) &rArr; draw_heater_status(unsigned short, unsigned short, signed char, char) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, const char*, unsigned short)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i16tostr3rj(short)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr42_52(const float&)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsPaused()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsActive()
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::get_blink()
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_get_progress()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::center(unsigned short)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::trim(unsigned char)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::add_bar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toDigital(char*, bool) const
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set(const char*)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::add(unsigned char)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_heater_status(unsigned short, unsigned short, signed char, char)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_fan_status(unsigned short, unsigned short, bool, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_screen()
</UL>

<P><STRONG><a name="[274]"></a>MarlinUI::pause_show_message(PauseMessage, PauseMode, unsigned char)</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, menu_filament.o(i._ZN8MarlinUI18pause_show_messageE12PauseMessage9PauseModeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MarlinUI::pause_show_message(PauseMessage, PauseMode, unsigned char) &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_confirmation(bool, signed char)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_continue_prompt(bool)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unload_filament(const float&, bool, PauseMode)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M600()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M125()
</UL>

<P><STRONG><a name="[2b7]"></a>MarlinUI::set_alert_status_P(const char*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI18set_alert_status_PEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MarlinUI::set_alert_status_P(const char*) &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_status_P(const char*, signed char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M428()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_endstops()
</UL>

<P><STRONG><a name="[618]"></a>MarlinUI::completion_feedback(bool)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, menu.o(i._ZN8MarlinUI19completion_feedbackEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MarlinUI::completion_feedback(bool) &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr;  Temperature::manage_heater() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::store_settings()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_settings()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::load_settings()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_eeprom()
</UL>

<P><STRONG><a name="[2ef]"></a>MarlinUI::push_current_screen()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, menu.o(i._ZN8MarlinUI19push_current_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MarlinUI::push_current_screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_submenu::action(const char*, void(*)())
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::synchronize(const char*)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media_filelist()
</UL>

<P><STRONG><a name="[121]"></a>MarlinUI::goto_previous_screen()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, menu.o(i._ZN8MarlinUI20goto_previous_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MarlinUI::goto_previous_screen() &rArr; MarlinUI::_goto_previous_screen() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::_goto_previous_screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_abort_pring()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen_no_defer()
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 3]<UL><LI> menu_media.o(i._ZZN15MenuItem_sdfile6actionEPKcR10CardReaderENKUlvE_clEv)
<LI> menu_motion.o(i._ZZ27_menu_move_distance_e_maybevENKUlvE_clEv)
<LI> menu_main.o(i._ZZ9menu_mainvENKUlvE_clEv)
</UL>
<P><STRONG><a name="[229]"></a>MarlinUI::_goto_previous_screen()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, menu.o(i._ZN8MarlinUI21_goto_previous_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MarlinUI::_goto_previous_screen() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_edit_mesh()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_probe_offsets()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_controller_fan()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_ready()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_xyz_home()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media_filelist()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_step_mode()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_current()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
</UL>

<P><STRONG><a name="[254]"></a>MarlinUI::enable_encoder_multiplier(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, marlinui.o(i._ZN8MarlinUI25enable_encoder_multiplierEb))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_edit_mesh()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetHotend()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetBED()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_feedrate()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_Fan0()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_controller_fan()
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_goto_manual_move(float, AxisEnum)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
</UL>

<P><STRONG><a name="[256]"></a>MarlinUI::goto_previous_screen_no_defer()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu.o(i._ZN8MarlinUI29goto_previous_screen_no_deferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MarlinUI::goto_previous_screen_no_defer() &rArr; MarlinUI::goto_previous_screen() &rArr; MarlinUI::_goto_previous_screen() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::synchronize(const char*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_babystep_zoffset()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetHotend()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetBED()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_feedrate()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_Fan0()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_unload_load_filament()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
</UL>

<P><STRONG><a name="[620]"></a>MarlinUI::buzz(long, unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, marlinui.o(i._ZN8MarlinUI4buzzElt))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MarlinUI::buzz(long, unsigned short) &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr;  Temperature::manage_heater() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::quick_feedback(bool)
</UL>

<P><STRONG><a name="[619]"></a>MarlinUI::init()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MarlinUI::init() &rArr; MarlinUI::init_lcd() &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_lcd()
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::kill_screen(const char*, const char*)
</UL>

<P><STRONG><a name="[3a3]"></a>MarlinUI::update()</STRONG> (Thumb, 834 bytes, Stack size 40 bytes, marlinui.o(i._ZN8MarlinUI6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = MarlinUI::update() &rArr; ManualMove::task() &rArr; Planner::buffer_line(const float&, const float&, const float&, const float&, const float&, unsigned char, float) &rArr; Planner::buffer_segment(const float&, const float&, const float&, const float&, const float&, unsigned char, const float&) &rArr; Planner::_buffer_steps(const XYZEval&lang;int&rang;&, float, unsigned char, const float&) &rArr;  idle(bool) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PlayTune(unsigned char, const unsigned short*, unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::on_status_screen()
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::clear_lcd()
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::tft_idle()
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::block_buffer_runtime()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unload_load_filament()
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update_buttons()
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMove::task()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_endstops()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(const float&, heater_id_t, signed char, bool)
</UL>

<P><STRONG><a name="[3d1]"></a>MarlinUI::detected()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ui_common.o(i._ZN8MarlinUI8detectedEv))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::manage_media()
</UL>

<P><STRONG><a name="[628]"></a>MarlinUI::init_lcd()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ui_common.o(i._ZN8MarlinUI8init_lcdEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MarlinUI::init_lcd() &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::clear_lcd()
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_String::set_font(const unsigned char*)
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init()
</UL>

<P><STRONG><a name="[62c]"></a>MarlinUI::tft_idle()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ui_320x240.o(i._ZN8MarlinUI8tft_idleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MarlinUI::tft_idle() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::async()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
</UL>

<P><STRONG><a name="[617]"></a>MarlinUI::clear_lcd()</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ui_common.o(i._ZN8MarlinUI9clear_lcdEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::reset()
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init_lcd()
</UL>

<P><STRONG><a name="[626]"></a>MarlinUI::get_blink()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, marlinui.o(i._ZN8MarlinUI9get_blinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MarlinUI::get_blink()
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
</UL>

<P><STRONG><a name="[228]"></a>MarlinUI::use_click()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(i._ZN8MarlinUI9use_clickEv))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_edit_mesh()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_probe_offsets()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_job_recovery()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_babystep_zoffset()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetHotend()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_setTargetBED()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_feedrate()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_abort_pring()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_Fan0()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media()
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_unload_load_filament()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_pause_option()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_controller_fan()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_configuration()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_move()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_message()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_ready()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_xyz_home()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_move_xyz(const char*, AxisEnum)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_media_filelist()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_step_mode()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_current()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_preheat_m()
</UL>

<P><STRONG><a name="[4d5]"></a>SdVolume::cacheFlush()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sdvolume.o(i._ZN8SdVolume10cacheFlushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::remove()
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
</UL>

<P><STRONG><a name="[4d8]"></a>SdVolume::writeBlock(unsigned, const unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sdbasefile.o(i._ZN8SdVolume10writeBlockEjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SdVolume::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteBlock(unsigned, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
</UL>

<P><STRONG><a name="[4d9]"></a>SdVolume::cacheRawBlock(unsigned, bool)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sdvolume.o(i._ZN8SdVolume13cacheRawBlockEjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadBlock(unsigned, unsigned char*)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::init(Sd2Card*, unsigned char)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::cacheDirEntry(unsigned char)
</UL>

<P><STRONG><a name="[4ce]"></a>SdVolume::allocContiguous(unsigned, unsigned*)</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, sdvolume.o(i._ZN8SdVolume15allocContiguousEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addCluster()
</UL>

<P><STRONG><a name="[4d7]"></a>SdVolume::cacheSetBlockNumber(unsigned, bool)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN8SdVolume19cacheSetBlockNumberEjb))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
</UL>

<P><STRONG><a name="[3ef]"></a>SdVolume::init(Sd2Card*, unsigned char)</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, sdvolume.o(i._ZN8SdVolume4initEP7Sd2Cardh))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SdVolume::init(Sd2Card*, unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
</UL>

<P><STRONG><a name="[4e8]"></a>SdVolume::fatGet(unsigned, unsigned*)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sdvolume.o(i._ZN8SdVolume6fatGetEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::freeChain(unsigned)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::chainSize(unsigned, unsigned*)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
</UL>

<P><STRONG><a name="[4ef]"></a>SdVolume::fatPut(unsigned, unsigned)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, sdvolume.o(i._ZN8SdVolume6fatPutEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::freeChain(unsigned)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
</UL>

<P><STRONG><a name="[4de]"></a>SdVolume::chainSize(unsigned, unsigned*)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, sdvolume.o(i._ZN8SdVolume9chainSizeEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SdVolume::chainSize(unsigned, unsigned*) &rArr; SdVolume::fatGet(unsigned, unsigned*) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::isEOC(unsigned) const
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openRoot(SdVolume*)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4ee]"></a>SdVolume::freeChain(unsigned)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sdvolume.o(i._ZN8SdVolume9freeChainEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SdVolume::freeChain(unsigned) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::isEOC(unsigned) const
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
</UL>

<P><STRONG><a name="[512]"></a>TempInfo::reset()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, temperature.o(i._ZN8TempInfo5resetEv))
<BR><BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::readings_ready()
</UL>

<P><STRONG><a name="[524]"></a>TempInfo::sample(unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, temperature.o(i._ZN8TempInfo6sampleEt))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tick()
</UL>

<P><STRONG><a name="[51a]"></a>TempInfo::update()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, temperature.o(i._ZN8TempInfo6updateEv))
<BR><BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::update_raw_temperatures()
</UL>

<P><STRONG><a name="[4a0]"></a>Stopwatch::stop()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stopwatch.o(i._ZN9Stopwatch4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stopwatch::stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M81()
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M77()
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_job_check_timer(bool, bool)
</UL>

<P><STRONG><a name="[243]"></a>Stopwatch::pause()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stopwatch.o(i._ZN9Stopwatch5pauseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stopwatch::pause()
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_print(const float&, const XYZval&lang;float&rang;&, const float&, bool)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M76()
</UL>

<P><STRONG><a name="[62e]"></a>Stopwatch::reset()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stopwatch.o(i._ZN9Stopwatch5resetEv))
<BR><BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::resume(unsigned)
</UL>

<P><STRONG><a name="[27b]"></a>Stopwatch::start()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stopwatch.o(i._ZN9Stopwatch5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Stopwatch::start() &rArr; Stopwatch::duration()
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::reset()
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startOrResumeJob()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::resume_print()
</UL>

<P><STRONG><a name="[498]"></a>Stopwatch::resume(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stopwatch.o(i._ZN9Stopwatch6resumeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Stopwatch::resume(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M24()
</UL>

<P><STRONG><a name="[49a]"></a>Stopwatch::duration()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stopwatch.o(i._ZN9Stopwatch8durationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stopwatch::duration()
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M1001()
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
</UL>

<P><STRONG><a name="[5bd]"></a>TFT_Queue::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, tft_queue.o(i._ZN9TFT_Queue13add_rectangleEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TFT_Queue::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::handle_queue_overflow(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[631]"></a>TFT_Queue::finish_sketch()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tft_queue.o(i._ZN9TFT_Queue13finish_sketchEv))
<BR><BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::async()
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[5be]"></a>TFT_Queue::set_background(unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, tft_queue.o(i._ZN9TFT_Queue14set_backgroundEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TFT_Queue::set_background(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::handle_queue_overflow(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::set_background(unsigned short)
</UL>

<P><STRONG><a name="[62f]"></a>TFT_Queue::handle_queue_overflow(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tft_queue.o(i._ZN9TFT_Queue21handle_queue_overflowEt))
<BR><BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::add_text(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::set_background(unsigned short)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::add_bar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::add_rectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>

<P><STRONG><a name="[630]"></a>TFT_Queue::fill(queueTask_t*)</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, tft_queue.o(i._ZN9TFT_Queue4fillEP11queueTask_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TFT_Queue::fill(queueTask_t*) &rArr; TFT_IO::set_window(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_Address_Set(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; LCD_WR_DATA(unsigned short) &rArr; LCD_Writ_Bus(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA(unsigned short)
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_IO::set_window(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::async()
</UL>

<P><STRONG><a name="[624]"></a>TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 116 bytes, Stack size 28 bytes, tft_queue.o(i._ZN9TFT_Queue4fillEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::finish_sketch()
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::clear_lcd()
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
</UL>

<P><STRONG><a name="[625]"></a>TFT_Queue::sync()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ui_320x240.o(i._ZN9TFT_Queue4syncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = TFT_Queue::sync() &rArr; TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::async()
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
</UL>

<P><STRONG><a name="[62d]"></a>TFT_Queue::async()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tft_queue.o(i._ZN9TFT_Queue5asyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = TFT_Queue::async() &rArr; TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SPI::isBusy()
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::canvas(queueTask_t*)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::reset()
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::fill(queueTask_t*)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::finish_sketch()
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::tft_idle()
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::sync()
</UL>

<P><STRONG><a name="[623]"></a>TFT_Queue::reset()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tft_queue.o(i._ZN9TFT_Queue5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFT_Queue::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_SPI::Abort()
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::clear_lcd()
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_kill_screen()
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::async()
</UL>

<P><STRONG><a name="[633]"></a>TFT_Queue::canvas(queueTask_t*)</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, tft_queue.o(i._ZN9TFT_Queue6canvasEP11queueTask_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = TFT_Queue::canvas(queueTask_t*) &rArr; CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short) &rArr; CANVAS::AddImage(short, short, unsigned char, unsigned char, colorMode_t, unsigned char*, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANVAS::ToScreen()
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANVAS::Continue()
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANVAS::AddImage(short, short, MarlinImage, unsigned short*)
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANVAS::AddText(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANVAS::AddBar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANVAS::New(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANVAS::SetBackground(unsigned short)
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANVAS::AddRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::async()
</UL>

<P><STRONG><a name="[5c3]"></a>TFT_Queue::canvas(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tft_queue.o(i._ZN9TFT_Queue6canvasEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TFT_Queue::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::finish_sketch()
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::canvas(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[5c4]"></a>TFT_Queue::add_bar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, tft_queue.o(i._ZN9TFT_Queue7add_barEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TFT_Queue::add_bar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::handle_queue_overflow(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_bar(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[56b]"></a>TFT_Queue::add_text(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, tft_queue.o(i._ZN9TFT_Queue8add_textEtttPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TFT_Queue::add_text(unsigned short, unsigned short, unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::handle_queue_overflow(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, const char*, unsigned short)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_text(unsigned short, unsigned short, unsigned short, TFT_String, unsigned short)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdbase::draw(bool, unsigned char, const char*, CardReader&, bool)
</UL>

<P><STRONG><a name="[638]"></a>TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)</STRONG> (Thumb, 188 bytes, Stack size 52 bytes, tft_queue.o(i._ZN9TFT_Queue9add_imageEss11MarlinImagePt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::handle_queue_overflow(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[5c5]"></a>TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 194 bytes, Stack size 68 bytes, tft_queue.o(i._ZN9TFT_Queue9add_imageEss11MarlinImagettt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gradient(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[4d3]"></a>SdBaseFile::isDir() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK10SdBaseFile5isDirEv))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDirCache()
</UL>

<P><STRONG><a name="[4ea]"></a>SdBaseFile::isFile() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK10SdBaseFile6isFileEv))
<BR><BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[3d7]"></a>SdBaseFile::isOpen() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, powerloss.o(i._ZNK10SdBaseFile6isOpenEv))
<BR><BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::seekSet(unsigned)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::~SdFile()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::save(bool, float)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openFileRead(char*, unsigned char)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::mount()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printFilename()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::cd(const char*)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openRoot(SdVolume*)
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::sync()
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::~SdBaseFile()
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
</UL>

<P><STRONG><a name="[4cf]"></a>SdBaseFile::isRoot() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK10SdBaseFile6isRootEv))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const char*, unsigned char)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
</UL>

<P><STRONG><a name="[63a]"></a>duration_t::day() const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, m31.o(i._ZNK10duration_t3dayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = duration_t::day() const &rArr; duration_t::hour() const
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::hour() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toString(char*) const
</UL>

<P><STRONG><a name="[63b]"></a>duration_t::hour() const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, m31.o(i._ZNK10duration_t4hourEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = duration_t::hour() const
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::minute() const
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toString(char*) const
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::day() const
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toDigital(char*, bool) const
</UL>

<P><STRONG><a name="[63c]"></a>duration_t::minute() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m31.o(i._ZNK10duration_t6minuteEv))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toString(char*) const
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::hour() const
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toDigital(char*, bool) const
</UL>

<P><STRONG><a name="[49b]"></a>duration_t::toString(char*) const</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, m31.o(i._ZNK10duration_t8toStringEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = duration_t::toString(char*) const &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::minute() const
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::hour() const
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::day() const
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M31()
</UL>

<P><STRONG><a name="[627]"></a>duration_t::toDigital(char*, bool) const</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, ui_320x240.o(i._ZNK10duration_t9toDigitalEPcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = duration_t::toDigital(char*, bool) const &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::minute() const
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::hour() const
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::draw_status_screen(char)
</UL>

<P><STRONG><a name="[4e7]"></a>SdVolume::blockOfCluster(unsigned) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK8SdVolume14blockOfClusterEj))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
</UL>

<P><STRONG><a name="[4db]"></a>SdVolume::cacheBlockNumber() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK8SdVolume16cacheBlockNumberEv))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::open(SdBaseFile*, const unsigned char*, unsigned char)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4d6]"></a>SdVolume::clusterStartBlock(unsigned) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK8SdVolume17clusterStartBlockEj))
<BR><BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::read(void*, unsigned short)
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::addDirCluster()
</UL>

<P><STRONG><a name="[4eb]"></a>SdVolume::isEOC(unsigned) const</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sdbasefile.o(i._ZNK8SdVolume5isEOCEj))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::freeChain(unsigned)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::chainSize(unsigned, unsigned*)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::truncate(unsigned)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[485]"></a>std::isnan(float)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, abl.o(i._ZSt5isnanf))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to abl_cpp]::extrapolate_one_point(unsigned char, unsigned char, signed char, signed char)
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[3e7]"></a>std::strchr(char*, int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, parser.o(i._ZSt6strchrPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::strchr(char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::parse(char*)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::write_command(char*)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_serial_commands()
</UL>

<P><STRONG><a name="[568]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::TMC2208Stepper(unsigned short, unsigned short, float, unsigned char)
</UL>

<P><STRONG><a name="[642]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6ed]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1cc]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wdt_refresh()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_set_frequency(unsigned)
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_buffer_flush
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErasePage
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::get_sdcard_commands()
</UL>

<P><STRONG><a name="[6ee]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[6ef]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[644]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6f0]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2b6]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toString(char*) const
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_endstops()
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duration_t::toDigital(char*, bool) const
</UL>

<P><STRONG><a name="[3ec]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::resume()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
</UL>

<P><STRONG><a name="[6f1]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[645]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6f2]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[6f3]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[622]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::status_printf_P(unsigned char, const char*, ...)
</UL>

<P><STRONG><a name="[6f4]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[64c]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[6f5]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[656]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_temperature_cpp_2f7cf00e
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_cardreader_cpp_29701c05
</UL>

<P><STRONG><a name="[2b5]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::synchronize(const char*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_endstops()
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
</UL>

<P><STRONG><a name="[15e]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 3]<UL><LI> print.o(.constdata__ZTV5Print)
<LI> stream.o(.constdata__ZTV6Stream)
<LI> tmc2208stepper.o(.constdata__ZTV10TMCStepper)
</UL>
<P><STRONG><a name="[1ae]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[647]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[3b1]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
</UL>

<P><STRONG><a name="[3b3]"></a>__hardfp_ceilf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, const float&, const float&)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
</UL>

<P><STRONG><a name="[6f6]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[3b4]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
</UL>

<P><STRONG><a name="[2fe]"></a>__hardfp_floorf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, floorf.o(i.__hardfp_floorf))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bilinear_z_offset(const XYval&lang;float&rang;&)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, const float&, const float&)
</UL>

<P><STRONG><a name="[385]"></a>__hardfp_lroundf</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, lroundf.o(i.__hardfp_lroundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_lroundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_frequency_limit()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_e_position_mm(const float&)
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M201()
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_planner_cpp_planner
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::set_machine_position_mm(const float&, const float&, const float&, const float&)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::buffer_segment(const float&, const float&, const float&, const float&, const float&, unsigned char, const float&)
</UL>

<P><STRONG><a name="[222]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr5rj(const float&)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr52sign(const float&)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr41sign(const float&)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr31sign(const float&)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr42_52(const float&)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr51rj(const float&)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr43sign(const float&, char)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr53sign(const float&)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr63(const float&)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr52(const float&)
</UL>

<P><STRONG><a name="[6f7]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[3b5]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
</UL>

<P><STRONG><a name="[395]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to G28_cpp]::quick_home_xy()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, const float&, const float&)
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::recalculate_trapezoids()
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::getHighESpeed()
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segmented_line_to_destination(const float&, float)
</UL>

<P><STRONG><a name="[503]"></a>__hardfp_strtof</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strtof.o(i.__hardfp_strtof))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __hardfp_strtof &rArr; __strtof_int &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_float()
</UL>

<P><STRONG><a name="[197]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf(double, signed char, unsigned char, char*)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::process_injected_command_P()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homing_needed_error(unsigned char)
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::openAndPrintFile(const char*)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::printListing(SdFile, const char*)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::diveToFile(bool, SdFile*&, const char*, bool)
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[653]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[651]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[64e]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[650]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[652]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[64d]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[1ad]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtof_int
</UL>

<P><STRONG><a name="[64f]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[6f8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[6f9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[6fa]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[64b]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[1b9]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[65c]"></a>adc_dma_config</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, bsp_adc.o(i.adc_dma_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = adc_dma_config &rArr; DMA_InitChannel &rArr; DMA_ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[65d]"></a>adc_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_adc.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adc_init &rArr; adc_dma_config &rArr; DMA_InitChannel &rArr; DMA_ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_adc_cpp]::AdcTriggerConfig()
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_adc_cpp]::AdcChannelConfig()
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_adc_cpp]::AdcInitConfig()
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_adc_cpp]::adc_pin_init()
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConvert
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65f]"></a>clock_init</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, bsp_init.o(i.clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = clock_init &rArr; CLK_SetSysClkSource &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HS2HP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetLatency
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalConfig
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllConfig
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysClkConfig
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPeriClkSource
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[237]"></a>delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_tim0.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay &rArr; SysTick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::write(unsigned char, unsigned)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::read(unsigned char)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_delay(unsigned)
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::_sendDatagram(unsigned char*, unsigned char, unsigned short)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::show_bootscreen()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to temperature_cpp]::print_heater_state(const float&, const float&, float, heater_id_t)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)90, (char)48, (AxisEnum)2&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)89, (char)48, (AxisEnum)1&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)88, (char)48, (AxisEnum)0&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_init&lang;(char)69, (char)48, (AxisEnum)3&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)
</UL>

<P><STRONG><a name="[56f]"></a>eeprom_buffer_fill</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash.o(i.eeprom_buffer_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eeprom_buffer_fill &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::access_start()
</UL>

<P><STRONG><a name="[570]"></a>eeprom_buffer_flush</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, flash.o(i.eeprom_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eeprom_buffer_flush &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetFlagStatus
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FlashCmd
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::access_finish()
</UL>

<P><STRONG><a name="[56c]"></a>eeprom_buffered_read_byte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash.o(i.eeprom_buffered_read_byte))
<BR><BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::read_data(int&, unsigned char*, unsigned, unsigned short*, bool)
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>

<P><STRONG><a name="[56d]"></a>eeprom_buffered_write_byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(i.eeprom_buffered_write_byte))
<BR><BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PersistentStore::write_data(int&, const unsigned char*, unsigned, unsigned short*)
</UL>

<P><STRONG><a name="[280]"></a>enIrqRegistration</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.enIrqRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enIrqRegistration
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02B_init()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02A_init()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_init()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_init()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer41_init()
</UL>

<P><STRONG><a name="[670]"></a>endstop_pin_init</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, bsp_init.o(i.endstop_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = endstop_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[669]"></a>f_cpu_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup.o(i.f_cpu_init))
<BR><BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_clock
</UL>

<P><STRONG><a name="[125]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hc32f46x_utility.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugOutput(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[648]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = frexp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[667]"></a>get_all_clock</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, bsp_init.o(i.get_all_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = get_all_clock &rArr; CLK_GetPllClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_cpu_init
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPllClockFreq
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[672]"></a>heater_pin_init</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bsp_init.o(i.heater_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = heater_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wstring.o(i.isspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[34d]"></a>iwdg_feed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iwdg.o(i.iwdg_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iwdg_feed &rArr; bsp_wdt_refresh() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wdt_refresh()
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_watchdog_refresh()
</UL>

<P><STRONG><a name="[2b2]"></a>iwdg_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, iwdg.o(i.iwdg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iwdg_init &rArr; bsp_wdt_refresh() &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wdt_refresh()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wdt_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init()
</UL>

<P><STRONG><a name="[66a]"></a>led_pin_init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, bsp_init.o(i.led_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = led_pin_init &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66b]"></a>loop</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, marlincore.o(i.loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = loop &rArr; GCodeQueue::advance() &rArr; GCodeQueue::process_injected_command_P() &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::event_handler()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintJobRecovery::purge()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::set_fan_speed(unsigned char, unsigned short)
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::advance()
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::clear()
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::enqueue_one_P(const char*)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::endFilePrint()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickstop_stepper()
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>main</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = main &rArr; setup &rArr; GcodeSuite::process_subcommands_now_P(const char*) &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepper_pin_init
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_pin_init
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heater_pin_init
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_all_clock
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;endstop_pin_init
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init()
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerA2_bltouch_init()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02B_init()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02A_init()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_init()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sdio_init()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_pwm_init()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_init()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer41_init()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fan_pwm_init()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ots_init()
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scb_init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[308]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board_tim0.o(i.millis))
<BR><BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pause_cpp]::impatient_beep(signed char, bool)
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::_sendDatagram(unsigned char*, unsigned char, unsigned short)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_inactivity(bool)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::start()
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::stop()
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::check_axes_activity()
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tick()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerFan::update()
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::auto_report_temperatures()
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::manage_heater()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_user_response(unsigned, bool)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::duration()
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::pause()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_confirmation(bool, signed char)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M18_M84()
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G2_G3(bool)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M155()
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M85()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::T(signed char)
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::dwell(unsigned)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::PID_autotune(const float&, heater_id_t, signed char, bool)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unload_load_filament()
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::get_blink()
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update_buttons()
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::media_changed(unsigned char, unsigned char)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMove::task()
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMove::soon(AxisEnum)
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segmented_line_to_destination(const float&, float)
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tr_state_machine_t::run(const float&, const float&, heater_id_t, unsigned short, unsigned short)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::min_temp_error(heater_id_t)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::max_temp_error(heater_id_t)
</UL>

<P><STRONG><a name="[491]"></a>random</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, arduino.o(i.random))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = random
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
</UL>

<P><STRONG><a name="[674]"></a>setup</STRONG> (Thumb, 648 bytes, Stack size 24 bytes, marlincore.o(i.setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = setup &rArr; GcodeSuite::process_subcommands_now_P(const char*) &rArr; GcodeSuite::process_parsed_command(bool) &rArr; GcodeSuite::M48() &rArr; Probe::probe_at_point(const XYval&lang;float&rang;&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::probe_at_point(const float&, const float&, ProbePtRaise, unsigned char, bool, bool) &rArr; Probe::run_z_probe(bool) &rArr; Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode(unsigned char, WiringPinMode)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBitsMapp
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stopwatch::reset()
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::init()
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::show_bootscreen()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::init()
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::enable_z_probe(bool)
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::init()
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::load()
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControllerFan::setup()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::process_subcommands_now_P(const char*)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_init()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_clear_reset_source()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Configuration()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_get_reset_source()
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tmc_connection(bool, bool, bool, bool)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmc_serial_begin()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init()
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp_wifi_init()
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_powerhold()
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_killpin()
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d1]"></a>setup_step_tim</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board_tim0.o(i.setup_step_tim))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = setup_step_tim &rArr; timer42_set_frequency(unsigned) &rArr; get_pclk1Freq() &rArr; CLK_GetClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_set_frequency(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_start(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[2d2]"></a>setup_temp_tim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board_tim0.o(i.setup_temp_tim))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_start(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[3a5]"></a>shut_off_power</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_init.o(i.shut_off_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shut_off_power &rArr; PORT_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill(const char*, const char*, bool)
</UL>

<P><STRONG><a name="[671]"></a>stepper_pin_init</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, bsp_init.o(i.stepper_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stepper_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b9]"></a>steup_sdio</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, board_sdio.o(i.steup_sdio))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = steup_sdio &rArr; hal_sdio_init() &rArr; sdio_controller_init() &rArr; SDCARD_Init &rArr; [local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*) &rArr; SDMMC_Cmd6_SwitchFunc &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sdio_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init()
</UL>

<P><STRONG><a name="[51f]"></a>timer_enable_irq</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, board_tim0.o(i.timer_enable_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_enable_irq &rArr; timer42_irq_ctrl(en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_irq_ctrl(en_functional_state)
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::init()
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::wake_up()
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::suspend()
</UL>

<P><STRONG><a name="[60f]"></a>timer_get_count</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, board_tim0.o(i.timer_get_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_get_count &rArr; timer42_get_count()
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_get_count()
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::isr()
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_TIMED_PULSE(unsigned char)
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::pulse_phase_isr()
</UL>

<P><STRONG><a name="[38a]"></a>timer_irq_enabled</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, board_tim0.o(i.timer_irq_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_irq_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_irq_get()
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_interrupt_enabled(unsigned char)
</UL>

<P><STRONG><a name="[35a]"></a>timer_set_compare</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, board_tim0.o(i.timer_set_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_set_compare &rArr; timer42_set_compare(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_set_compare(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_timer_set_compare(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[66d]"></a>uart1_init</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, bsp_init.o(i.uart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uart1_init &rArr; USART_SetBaudrate &rArr; [local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_init_cpp]::__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_init_cpp]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_init_cpp]::__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66e]"></a>uart2_init</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, bsp_init.o(i.uart2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uart2_init &rArr; USART_SetBaudrate &rArr; [local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_init_cpp]::__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_init_cpp]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_init_cpp]::__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66f]"></a>uart4_init</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, bsp_init.o(i.uart4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uart4_init &rArr; USART_SetBaudrate &rArr; [local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_init_cpp]::__NVIC_ClearPendingIRQ(IRQn)
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_init_cpp]::__NVIC_SetPriority(IRQn, unsigned)
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to bsp_init_cpp]::__NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c9]"></a>void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m906.o(t._Z17tmc_print_currentI9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&) &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M906()
</UL>

<P><STRONG><a name="[4c6]"></a>void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m906.o(t._Z17tmc_print_currentI9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&) &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M906()
</UL>

<P><STRONG><a name="[4c7]"></a>void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m906.o(t._Z17tmc_print_currentI9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&) &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M906()
</UL>

<P><STRONG><a name="[4c8]"></a>void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m906.o(t._Z17tmc_print_currentI9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = void tmc_print_current&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&) &rArr; serial_echopair_PGM(const char*, int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M906()
</UL>

<P><STRONG><a name="[590]"></a>void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, bool)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, m569.o(t._Z19tmc_set_stealthChopI9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EEEvRT_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, bool) &rArr; TMC2208Stepper::en_spreadCycle(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::en_spreadCycle(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M569_cpp]::set_stealth_status(bool, signed char)
</UL>

<P><STRONG><a name="[58d]"></a>void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, bool)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, m569.o(t._Z19tmc_set_stealthChopI9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EEEvRT_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, bool) &rArr; TMC2208Stepper::en_spreadCycle(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::en_spreadCycle(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M569_cpp]::set_stealth_status(bool, signed char)
</UL>

<P><STRONG><a name="[58e]"></a>void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, bool)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, m569.o(t._Z19tmc_set_stealthChopI9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EEEvRT_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, bool) &rArr; TMC2208Stepper::en_spreadCycle(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::en_spreadCycle(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M569_cpp]::set_stealth_status(bool, signed char)
</UL>

<P><STRONG><a name="[58f]"></a>void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, bool)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, m569.o(t._Z19tmc_set_stealthChopI9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EEEvRT_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, bool) &rArr; TMC2208Stepper::en_spreadCycle(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::en_spreadCycle(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M569_cpp]::set_stealth_status(bool, signed char)
</UL>

<P><STRONG><a name="[58c]"></a>void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m569.o(t._Z22tmc_say_stealth_statusI9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::en_spreadCycle()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M569_cpp]::say_stealth_status()
</UL>

<P><STRONG><a name="[589]"></a>void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m569.o(t._Z22tmc_say_stealth_statusI9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::en_spreadCycle()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M569_cpp]::say_stealth_status()
</UL>

<P><STRONG><a name="[58a]"></a>void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m569.o(t._Z22tmc_say_stealth_statusI9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::en_spreadCycle()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M569_cpp]::say_stealth_status()
</UL>

<P><STRONG><a name="[58b]"></a>void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, m569.o(t._Z22tmc_say_stealth_statusI9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::en_spreadCycle()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to M569_cpp]::say_stealth_status()
</UL>

<P><STRONG><a name="[36e]"></a>void tmc_init&lang;(char)69, (char)48, (AxisEnum)3&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, trinamic.o(t._Z8tmc_initILc69ELc48EL8AxisEnum3EEvR9TMCMarlinI14TMC2208StepperXT_EXT0_EXT1_EEttjbRK16chopper_timing_tb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = void tmc_init&lang;(char)69, (char)48, (AxisEnum)3&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool) &rArr; delay &rArr; SysTick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::GCONF(unsigned)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF(unsigned)
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::OTP_PROG(unsigned short)
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::GSTAT(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trinamic_drivers()
</UL>

<P><STRONG><a name="[36b]"></a>void tmc_init&lang;(char)88, (char)48, (AxisEnum)0&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, trinamic.o(t._Z8tmc_initILc88ELc48EL8AxisEnum0EEvR9TMCMarlinI14TMC2208StepperXT_EXT0_EXT1_EEttjbRK16chopper_timing_tb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = void tmc_init&lang;(char)88, (char)48, (AxisEnum)0&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool) &rArr; delay &rArr; SysTick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::GCONF(unsigned)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF(unsigned)
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::OTP_PROG(unsigned short)
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::GSTAT(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trinamic_drivers()
</UL>

<P><STRONG><a name="[36c]"></a>void tmc_init&lang;(char)89, (char)48, (AxisEnum)1&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, trinamic.o(t._Z8tmc_initILc89ELc48EL8AxisEnum1EEvR9TMCMarlinI14TMC2208StepperXT_EXT0_EXT1_EEttjbRK16chopper_timing_tb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = void tmc_init&lang;(char)89, (char)48, (AxisEnum)1&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool) &rArr; delay &rArr; SysTick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::GCONF(unsigned)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF(unsigned)
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::OTP_PROG(unsigned short)
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::GSTAT(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trinamic_drivers()
</UL>

<P><STRONG><a name="[36d]"></a>void tmc_init&lang;(char)90, (char)48, (AxisEnum)2&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool)</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, trinamic.o(t._Z8tmc_initILc90ELc48EL8AxisEnum2EEvR9TMCMarlinI14TMC2208StepperXT_EXT0_EXT1_EEttjbRK16chopper_timing_tb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = void tmc_init&lang;(char)90, (char)48, (AxisEnum)2&rang;(TMCMarlin&lang;TMC2208Stepper, T1, T2, T3&rang;&, unsigned short, unsigned short, unsigned, bool, const chopper_timing_t&, bool) &rArr; delay &rArr; SysTick_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::GCONF(unsigned)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF(unsigned)
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::OTP_PROG(unsigned short)
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::GSTAT(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_trinamic_drivers()
</UL>

<P><STRONG><a name="[681]"></a>TMCStorage&lang;(char)69, (char)48&rang;::printLabel()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tmc_util.o(t._ZN10TMCStorageILc69ELc48EE10printLabelEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMCStorage&lang;(char)69, (char)48&rang;::printLabel() &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)
</UL>

<P><STRONG><a name="[682]"></a>TMCStorage&lang;(char)88, (char)48&rang;::printLabel()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tmc_util.o(t._ZN10TMCStorageILc88ELc48EE10printLabelEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMCStorage&lang;(char)88, (char)48&rang;::printLabel() &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)
</UL>

<P><STRONG><a name="[683]"></a>TMCStorage&lang;(char)89, (char)48&rang;::printLabel()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tmc_util.o(t._ZN10TMCStorageILc89ELc48EE10printLabelEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMCStorage&lang;(char)89, (char)48&rang;::printLabel() &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)
</UL>

<P><STRONG><a name="[684]"></a>TMCStorage&lang;(char)90, (char)48&rang;::printLabel()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tmc_util.o(t._ZN10TMCStorageILc90ELc48EE10printLabelEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TMCStorage&lang;(char)90, (char)48&rang;::printLabel() &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)
</UL>

<P><STRONG><a name="[514]"></a>HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, temperature.o(t._ZN11HeaterWatchILi2ELi3ELj90EE7restartEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_bed()
</UL>

<P><STRONG><a name="[5d4]"></a>CircularQueue&lang;tone_t, (unsigned char)4&rang;::isFull()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, buzzer.o(t._ZN13CircularQueueI6tone_tLh4EE6isFullEv))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[5d3]"></a>CircularQueue&lang;tone_t, (unsigned char)4&rang;::isEmpty()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, buzzer.o(t._ZN13CircularQueueI6tone_tLh4EE7isEmptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tick()
</UL>

<P><STRONG><a name="[139]"></a>TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::edit_screen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E6actionEPKcPsssPFvvEb)
</UL>
<P><STRONG><a name="[2ec]"></a>TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E4drawEbhPKcPsz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::draw(bool, unsigned char, const char*, short*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_int3::strfunc(float)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
</UL>

<P><STRONG><a name="[137]"></a>TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::load(void*, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E11edit_screenEv)
</UL>
<P><STRONG><a name="[686]"></a>TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::scale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)
</UL>

<P><STRONG><a name="[2eb]"></a>TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)</STRONG> (Thumb, 166 bytes, Stack size 80 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E6actionEPKcPsssPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::push_current_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::scale(float)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
</UL>

<P><STRONG><a name="[685]"></a>TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::unscale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::to_string(int)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[138]"></a>TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::to_string(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::to_string(int) &rArr; MenuEditItemInfo_int3::strfunc(float) &rArr; i16tostr3rj(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::unscale(float)
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_int3::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int3E11edit_screenEv)
</UL>
<P><STRONG><a name="[13c]"></a>TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::edit_screen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E6actionEPKcPaaaPFvvEb)
</UL>
<P><STRONG><a name="[384]"></a>TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::draw(bool, unsigned char, const char*, signed char*, ...)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E4drawEbhPKcPaz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::draw(bool, unsigned char, const char*, signed char*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_int8::strfunc(float)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
</UL>

<P><STRONG><a name="[13a]"></a>TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::load(void*, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E11edit_screenEv)
</UL>
<P><STRONG><a name="[68a]"></a>TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::scale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::action(const char*, signed char*, signed char, signed char, void(*)(), bool)
</UL>

<P><STRONG><a name="[383]"></a>TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::action(const char*, signed char*, signed char, signed char, void(*)(), bool)</STRONG> (Thumb, 166 bytes, Stack size 80 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E6actionEPKcPaaaPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::action(const char*, signed char*, signed char, signed char, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::push_current_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::scale(float)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
</UL>

<P><STRONG><a name="[689]"></a>TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::unscale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::to_string(int)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[13b]"></a>TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::to_string(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::to_string(int) &rArr; MenuEditItemInfo_int8::strfunc(float) &rArr; i8tostr3rj(signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::unscale(float)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_int8::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI21MenuEditItemInfo_int8E11edit_screenEv)
</UL>
<P><STRONG><a name="[13f]"></a>TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::edit_screen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E6actionEPKcPhhhPFvvEb)
</UL>
<P><STRONG><a name="[2c2]"></a>TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E4drawEbhPKcPhz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_uint8::strfunc(float)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_edit_mesh()
</UL>

<P><STRONG><a name="[13d]"></a>TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::load(void*, int)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E11edit_screenEv)
</UL>
<P><STRONG><a name="[68c]"></a>TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::scale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)
</UL>

<P><STRONG><a name="[2c1]"></a>TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)</STRONG> (Thumb, 164 bytes, Stack size 80 bytes, menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E6actionEPKcPhhhPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::push_current_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::scale(float)
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_bed_leveling_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_bed_leveling_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_edit_mesh()
</UL>

<P><STRONG><a name="[68b]"></a>TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::unscale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::to_string(int)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[13e]"></a>TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::to_string(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::to_string(int) &rArr; MenuEditItemInfo_uint8::strfunc(float) &rArr; ui8tostr3rj(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::unscale(float)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_uint8::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_bed_leveling.o(t._ZN13TMenuEditItemI22MenuEditItemInfo_uint8E11edit_screenEv)
</UL>
<P><STRONG><a name="[142]"></a>TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::edit_screen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E6actionEPKcPfffPFvvEb)
</UL>
<P><STRONG><a name="[311]"></a>TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float3::strfunc(float)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
</UL>

<P><STRONG><a name="[140]"></a>TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::load(void*, int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E11edit_screenEv)
</UL>
<P><STRONG><a name="[690]"></a>TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::scale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::action(const char*, float*, float, float, void(*)(), bool)
</UL>

<P><STRONG><a name="[310]"></a>TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::action(const char*, float*, float, float, void(*)(), bool)</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E6actionEPKcPfffPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::action(const char*, float*, float, float, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::push_current_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::scale(float)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_bed_leveling()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
</UL>

<P><STRONG><a name="[68f]"></a>TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::unscale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::to_string(int)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[141]"></a>TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::to_string(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::to_string(int) &rArr; MenuEditItemInfo_float3::strfunc(float) &rArr; i16tostr3rj(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::unscale(float)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float3::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float3E11edit_screenEv)
</UL>
<P><STRONG><a name="[145]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::edit_screen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E6actionEPKcPfffPFvvEb)
</UL>
<P><STRONG><a name="[36a]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float5::strfunc(float)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
</UL>

<P><STRONG><a name="[143]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::load(void*, int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E11edit_screenEv)
</UL>
<P><STRONG><a name="[692]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::scale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool)
</UL>

<P><STRONG><a name="[369]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool)</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E6actionEPKcPfffPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::push_current_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::scale(float)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_velocity()
</UL>

<P><STRONG><a name="[691]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::unscale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::to_string(int)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[144]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::to_string(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::to_string(int) &rArr; MenuEditItemInfo_float5::strfunc(float) &rArr; ftostr5rj(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::unscale(float)
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float5::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI23MenuEditItemInfo_float5E11edit_screenEv)
</UL>
<P><STRONG><a name="[148]"></a>TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::edit_screen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E6actionEPKcPfffPFvvEb)
</UL>
<P><STRONG><a name="[2c4]"></a>TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float43::strfunc(float)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_edit_mesh()
</UL>

<P><STRONG><a name="[146]"></a>TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::load(void*, int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E11edit_screenEv)
</UL>
<P><STRONG><a name="[694]"></a>TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::scale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::action(const char*, float*, float, float, void(*)(), bool)
</UL>

<P><STRONG><a name="[2c3]"></a>TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::action(const char*, float*, float, float, void(*)(), bool)</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E6actionEPKcPfffPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::action(const char*, float*, float, float, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::push_current_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::scale(float)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_edit_mesh()
</UL>

<P><STRONG><a name="[693]"></a>TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::unscale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::to_string(int)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[147]"></a>TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::to_string(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::to_string(int) &rArr; MenuEditItemInfo_float43::strfunc(float) &rArr; ftostr43sign(const float&, char) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::unscale(float)
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float43::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float43E11edit_screenEv)
</UL>
<P><STRONG><a name="[14b]"></a>TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::edit_screen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E6actionEPKcPfffPFvvEb)
</UL>
<P><STRONG><a name="[387]"></a>TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float51::strfunc(float)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()
</UL>

<P><STRONG><a name="[149]"></a>TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::load(void*, int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E11edit_screenEv)
</UL>
<P><STRONG><a name="[696]"></a>TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::scale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::action(const char*, float*, float, float, void(*)(), bool)
</UL>

<P><STRONG><a name="[386]"></a>TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::action(const char*, float*, float, float, void(*)(), bool)</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E6actionEPKcPfffPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::action(const char*, float*, float, float, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::push_current_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::scale(float)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_steps_per_mm()
</UL>

<P><STRONG><a name="[695]"></a>TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::unscale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::to_string(int)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[14a]"></a>TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::to_string(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::to_string(int) &rArr; MenuEditItemInfo_float51::strfunc(float) &rArr; ftostr51rj(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::unscale(float)
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float51::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_float51E11edit_screenEv)
</UL>
<P><STRONG><a name="[14e]"></a>TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::edit_screen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE6actionEPKcPhhhPFvvEb)
</UL>
<P><STRONG><a name="[2ee]"></a>TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE4drawEbhPKcPhz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::draw(bool, unsigned char, const char*, unsigned char*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_percent::strfunc(float)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_controller_fan()
</UL>

<P><STRONG><a name="[14c]"></a>TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::load(void*, int)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE11edit_screenEv)
</UL>
<P><STRONG><a name="[698]"></a>TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::scale(float)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)
</UL>

<P><STRONG><a name="[2ed]"></a>TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)</STRONG> (Thumb, 164 bytes, Stack size 80 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE6actionEPKcPhhhPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::push_current_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::scale(float)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tune()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_temperature()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_configuration_preheat_settings()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_controller_fan()
</UL>

<P><STRONG><a name="[697]"></a>TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::unscale(float)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::to_string(int)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[14d]"></a>TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::to_string(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::to_string(int) &rArr; MenuEditItemInfo_percent::strfunc(float) &rArr; ui8tostr4pctrj(unsigned char) &rArr; pcttostrpctrj(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::unscale(float)
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_percent::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI24MenuEditItemInfo_percentE11edit_screenEv)
</UL>
<P><STRONG><a name="[151]"></a>TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::edit_screen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E6actionEPKcPjjjPFvvEb)
</UL>
<P><STRONG><a name="[382]"></a>TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::draw(bool, unsigned char, const char*, unsigned*, ...)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E4drawEbhPKcPjz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::draw(bool, unsigned char, const char*, unsigned*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_long5_25::strfunc(float)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
</UL>

<P><STRONG><a name="[14f]"></a>TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::load(void*, int)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E11edit_screenEv)
</UL>
<P><STRONG><a name="[69a]"></a>TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::scale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::action(const char*, unsigned*, unsigned, unsigned, void(*)(), bool)
</UL>

<P><STRONG><a name="[381]"></a>TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::action(const char*, unsigned*, unsigned, unsigned, void(*)(), bool)</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E6actionEPKcPjjjPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::action(const char*, unsigned*, unsigned, unsigned, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::push_current_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::scale(float)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
</UL>

<P><STRONG><a name="[699]"></a>TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::unscale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::to_string(int)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[150]"></a>TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::to_string(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::to_string(int) &rArr; MenuEditItemInfo_long5_25::strfunc(float) &rArr; ftostr5rj(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::unscale(float)
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_long5_25::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_long5_25E11edit_screenEv)
</UL>
<P><STRONG><a name="[154]"></a>TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::edit_screen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E6actionEPKcPtttPFvvEb)
</UL>
<P><STRONG><a name="[2f2]"></a>TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::draw(bool, unsigned char, const char*, unsigned short*, ...)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E4drawEbhPKcPtz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::draw(bool, unsigned char, const char*, unsigned short*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_uint16_4::strfunc(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_controller_fan()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_current()
</UL>

<P><STRONG><a name="[152]"></a>TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::load(void*, int)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E11edit_screenEv)
</UL>
<P><STRONG><a name="[69c]"></a>TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::scale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::action(const char*, unsigned short*, unsigned short, unsigned short, void(*)(), bool)
</UL>

<P><STRONG><a name="[2f1]"></a>TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::action(const char*, unsigned short*, unsigned short, unsigned short, void(*)(), bool)</STRONG> (Thumb, 164 bytes, Stack size 80 bytes, menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E6actionEPKcPtttPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::action(const char*, unsigned short*, unsigned short, unsigned short, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::push_current_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_configuration_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_configuration_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::scale(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_controller_fan()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_tmc_current()
</UL>

<P><STRONG><a name="[69b]"></a>TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::unscale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::to_string(int)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[153]"></a>TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::to_string(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::to_string(int) &rArr; MenuEditItemInfo_uint16_4::strfunc(float) &rArr; ui16tostr4rj(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::unscale(float)
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_uint16_4::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(t._ZN13TMenuEditItemI25MenuEditItemInfo_uint16_4E11edit_screenEv)
</UL>
<P><STRONG><a name="[157]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::edit_screen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E6actionEPKcPfffPFvvEb)
</UL>
<P><STRONG><a name="[380]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float5_25::strfunc(float)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
</UL>

<P><STRONG><a name="[155]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::load(void*, int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E11edit_screenEv)
</UL>
<P><STRONG><a name="[6a0]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::scale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::action(const char*, float*, float, float, void(*)(), bool)
</UL>

<P><STRONG><a name="[37f]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::action(const char*, float*, float, float, void(*)(), bool)</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E6actionEPKcPfffPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::action(const char*, float*, float, float, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::push_current_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::scale(float)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
</UL>

<P><STRONG><a name="[69f]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::unscale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::to_string(int)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[156]"></a>TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::to_string(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::to_string(int) &rArr; MenuEditItemInfo_float5_25::strfunc(float) &rArr; ftostr5rj(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::unscale(float)
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float5_25::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI26MenuEditItemInfo_float5_25E11edit_screenEv)
</UL>
<P><STRONG><a name="[15a]"></a>TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::edit_screen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE6actionEPKcPfffPFvvEb)
</UL>
<P><STRONG><a name="[32a]"></a>TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float31sign::strfunc(float)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_probe_offsets()
</UL>

<P><STRONG><a name="[158]"></a>TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::load(void*, int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE11edit_screenEv)
</UL>
<P><STRONG><a name="[6a2]"></a>TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::scale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
</UL>

<P><STRONG><a name="[329]"></a>TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::action(const char*, float*, float, float, void(*)(), bool)</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE6actionEPKcPfffPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::action(const char*, float*, float, float, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::push_current_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::scale(float)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_probe_offsets()
</UL>

<P><STRONG><a name="[6a1]"></a>TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::unscale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::to_string(int)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[159]"></a>TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::to_string(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::to_string(int) &rArr; MenuEditItemInfo_float31sign::strfunc(float) &rArr; ftostr31sign(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::unscale(float)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float31sign::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float31signE11edit_screenEv)
</UL>
<P><STRONG><a name="[15d]"></a>TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::edit_screen()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE11edit_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::edit_screen() &rArr; MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int)) &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::edit_screen(const char*(*)(int), void(*)(void*, int))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE6actionEPKcPfffPFvvEb)
</UL>
<P><STRONG><a name="[327]"></a>TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::draw(bool, unsigned char, const char*, float*, ...)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE4drawEbhPKcPfz))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::draw(bool, unsigned char, const char*, float*, ...) &rArr; MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float52sign::strfunc(float)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw(bool, unsigned char, const char*, const char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
</UL>

<P><STRONG><a name="[15b]"></a>TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::load(void*, int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE4loadEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::load(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::unscale(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE11edit_screenEv)
</UL>
<P><STRONG><a name="[6a4]"></a>TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::scale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE5scaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
</UL>

<P><STRONG><a name="[326]"></a>TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool)</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE6actionEPKcPfffPFvvEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool) &rArr; MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool) &rArr; MarlinUI::push_current_screen()
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::scale(float)
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::goto_edit_screen(const char*, void*, int, int, unsigned short, void(*)(), void(*)(), bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_jerk()
</UL>

<P><STRONG><a name="[6a3]"></a>TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::unscale(float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE7unscaleEf))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::to_string(int)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::load(void*, int)
</UL>

<P><STRONG><a name="[15c]"></a>TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::to_string(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE9to_stringEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::to_string(int) &rArr; MenuEditItemInfo_float52sign::strfunc(float) &rArr; ftostr52sign(const float&) &rArr; __hardfp_powf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::unscale(float)
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemInfo_float52sign::strfunc(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(t._ZN13TMenuEditItemI28MenuEditItemInfo_float52signE11edit_screenEv)
</UL>
<P><STRONG><a name="[39e]"></a>TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, marlincore.o(t._ZN16TFilamentMonitorI23RunoutResponseDebounced20FilamentSensorSwitchE3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::run() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilamentSensorSwitch::run()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::synchronize()
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_filament_runout()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printingIsActive()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
</UL>

<P><STRONG><a name="[d0]"></a>TFilamentMonitor&lang;RunoutResponseDebounced, FilamentSensorSwitch&rang;::reset()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, menu_configuration.o(t._ZN16TFilamentMonitorI23RunoutResponseDebounced20FilamentSensorSwitchE5resetEv))
<BR><BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu_filament.o(i._Z17menu_pause_optionv)
<LI> menu_configuration.o(i._Z18menu_configurationv)
</UL>
<P><STRONG><a name="[513]"></a>restorer&lang;bool&rang;::~restorer()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, temperature.o(t._ZN8restorerIbED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
</UL>

<P><STRONG><a name="[6fb]"></a>restorer&lang;bool&rang;::~restorer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, temperature.o(t._ZN8restorerIbED1Ev), UNUSED)

<P><STRONG><a name="[6a7]"></a>TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;::rms_current()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tmc_util.o(t._ZN9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE11rms_currentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;::rms_current() &rArr; TMCStepper::rms_current() &rArr; TMCStepper::cs2rms(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current()
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[534]"></a>TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;::get_stored_stealthChop()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, settings.o(t._ZN9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EE22get_stored_stealthChopEv))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[6b1]"></a>TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;::rms_current()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tmc_util.o(t._ZN9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE11rms_currentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;::rms_current() &rArr; TMCStepper::rms_current() &rArr; TMCStepper::cs2rms(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[531]"></a>TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;::get_stored_stealthChop()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, settings.o(t._ZN9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EE22get_stored_stealthChopEv))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[6b3]"></a>TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;::rms_current()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tmc_util.o(t._ZN9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE11rms_currentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;::rms_current() &rArr; TMCStepper::rms_current() &rArr; TMCStepper::cs2rms(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[532]"></a>TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;::get_stored_stealthChop()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, settings.o(t._ZN9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EE22get_stored_stealthChopEv))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>

<P><STRONG><a name="[6b5]"></a>TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;::rms_current()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tmc_util.o(t._ZN9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE11rms_currentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;::rms_current() &rArr; TMCStepper::rms_current() &rArr; TMCStepper::cs2rms(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[533]"></a>TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;::get_stored_stealthChop()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, settings.o(t._ZN9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EE22get_stored_stealthChopEv))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[598]"></a>[local to bsp_adc_cpp]::adc_pin_init()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_adc.o(i._ZN33_INTERNAL_11_bsp_adc_cpp_adc_init12adc_pin_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = [local to bsp_adc_cpp]::adc_pin_init() &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[599]"></a>[local to bsp_adc_cpp]::AdcInitConfig()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_adc.o(i._ZN33_INTERNAL_11_bsp_adc_cpp_adc_init13AdcInitConfigEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to bsp_adc_cpp]::AdcInitConfig() &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg3PeriphClockCmd
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[59b]"></a>[local to bsp_adc_cpp]::AdcChannelConfig()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bsp_adc.o(i._ZN33_INTERNAL_11_bsp_adc_cpp_adc_init16AdcChannelConfigEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [local to bsp_adc_cpp]::AdcChannelConfig() &rArr; ADC_AddAdcChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AddAdcChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[59d]"></a>[local to bsp_adc_cpp]::AdcTriggerConfig()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_adc.o(i._ZN33_INTERNAL_11_bsp_adc_cpp_adc_init16AdcTriggerConfigEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to bsp_adc_cpp]::AdcTriggerConfig() &rArr; ADC_TriggerSrcCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TriggerSrcCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[67d]"></a>[local to bsp_init_cpp]::__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_init.o(i._ZN34_INTERNAL_12_bsp_init_cpp_efd8dd3116__NVIC_EnableIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[67b]"></a>[local to bsp_init_cpp]::__NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_init.o(i._ZN34_INTERNAL_12_bsp_init_cpp_efd8dd3118__NVIC_SetPriorityE4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to bsp_init_cpp]::__NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[67c]"></a>[local to bsp_init_cpp]::__NVIC_ClearPendingIRQ(IRQn)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_init.o(i._ZN34_INTERNAL_12_bsp_init_cpp_efd8dd3122__NVIC_ClearPendingIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>

<P><STRONG><a name="[2a5]"></a>[local to bsp_sdio_cpp]::SdiocInitPins()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, bsp_sdio.o(i._ZN34_INTERNAL_12_bsp_sdio_cpp_98f0653513SdiocInitPinsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = [local to bsp_sdio_cpp]::SdiocInitPins() &rArr; PORT_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sdio_init()
</UL>

<P><STRONG><a name="[283]"></a>[local to bsp_timer_cpp]::__NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_timer.o(i._ZN35_INTERNAL_13_bsp_timer_cpp_f2615aa416__NVIC_EnableIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02B_init()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02A_init()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_init()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_init()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer41_init()
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_irq_ctrl(en_functional_state)
</UL>

<P><STRONG><a name="[281]"></a>[local to bsp_timer_cpp]::__NVIC_SetPriority(IRQn, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_timer.o(i._ZN35_INTERNAL_13_bsp_timer_cpp_f2615aa418__NVIC_SetPriorityE4IRQnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to bsp_timer_cpp]::__NVIC_SetPriority(IRQn, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02B_init()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02A_init()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_init()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_init()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer41_init()
</UL>

<P><STRONG><a name="[282]"></a>[local to bsp_timer_cpp]::__NVIC_ClearPendingIRQ(IRQn)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_timer.o(i._ZN35_INTERNAL_13_bsp_timer_cpp_f2615aa422__NVIC_ClearPendingIRQE4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02B_init()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer02A_init()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer01B_init()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer42_init()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer41_init()
</UL>

<P><STRONG><a name="[1e4]"></a>[local to sd_card_c]::SdCardInitSd(stc_sd_handle*)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a12SdCardInitSdEP13stc_sd_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to sd_card_c]::SdCardInitSd(stc_sd_handle*) &rArr; SDMMC_Cmd7_SelectDeselectCard &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd9_SendCSD
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd7_SelectDeselectCard
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd3_SendRelativeAddr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd2_AllSendCID
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[1e3]"></a>[local to sd_card_c]::SdCardPowerON(stc_sd_handle*)</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a13SdCardPowerONEP13stc_sd_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = [local to sd_card_c]::SdCardPowerON(stc_sd_handle*) &rArr; SDMMC_Cmd55_AppCmd &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd8_SendIfCond
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd0_GoIdleState
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd41_SdSendOpCond
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[1e2]"></a>[local to sd_card_c]::SdCardInitHost(const stc_sd_handle*)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a14SdCardInitHostEPK13stc_sd_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to sd_card_c]::SdCardInitHost(const stc_sd_handle*) &rArr; SDIOC_Init &rArr; [local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetMode
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[1e6]"></a>[local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*)</STRONG> (Thumb, 328 bytes, Stack size 104 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a14SdCardSetSpeedEP13stc_sd_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = [local to sd_card_c]::SdCardSetSpeed(stc_sd_handle*) &rArr; SDMMC_Cmd6_SwitchFunc &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd6_SwitchFunc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetSpeedMode
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetClk
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ReadBuffer
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetNormalIrqFlag
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ConfigData
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearNormalIrqFlag
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[1eb]"></a>[local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)</STRONG> (Thumb, 212 bytes, Stack size 88 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a16DmaSdiocRxConfigEP14M4_DMA_TypeDef14en_dma_channelP16M4_SDIOC_TypeDefPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [local to sd_card_c]::DmaSdiocRxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short) &rArr; DMA_InitChannel &rArr; DMA_ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_ReadBlocks
</UL>

<P><STRONG><a name="[1f3]"></a>[local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short)</STRONG> (Thumb, 212 bytes, Stack size 88 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a16DmaSdiocTxConfigEP14M4_DMA_TypeDef14en_dma_channelP16M4_SDIOC_TypeDefPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [local to sd_card_c]::DmaSdiocTxConfig(M4_DMA_TypeDef*, en_dma_channel, M4_SDIOC_TypeDef*, unsigned char*, unsigned short) &rArr; DMA_InitChannel &rArr; DMA_ChannelCfg
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTriggerSrc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIrqFlag
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[1e5]"></a>[local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a17SdCardSetBusWidthEP13stc_sd_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to sd_card_c]::SdCardSetBusWidth(stc_sd_handle*) &rArr; SDMMC_Cmd55_AppCmd &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd6_SetBusWidth
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetBusWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_Init
</UL>

<P><STRONG><a name="[1f7]"></a>[local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sd_card.o(i._ZN30_INTERNAL_9_sd_card_c_c2602c0a22SdCardCheckReayForDataEP13stc_sd_handlej))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd13_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDCARD_WriteBlocks
</UL>

<P><STRONG><a name="[205]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp1EP16M4_SDIOC_TypeDefPjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd7_SelectDeselectCard
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd6_SwitchFunc
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd25_WriteMultipleBlock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd24_WriteSingleBlock
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd18_ReadMultipleBlock
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd17_ReadSingleBlock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd13_SendStatus
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd6_SetBusWidth
</UL>

<P><STRONG><a name="[20a]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp2EP16M4_SDIOC_TypeDefPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd9_SendCSD
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd2_AllSendCID
</UL>

<P><STRONG><a name="[203]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp3EP16M4_SDIOC_TypeDefPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd41_SdSendOpCond
</UL>

<P><STRONG><a name="[20c]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp6EP16M4_SDIOC_TypeDefPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd3_SendRelativeAddr
</UL>

<P><STRONG><a name="[211]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_GetCmdResp7EP16M4_SDIOC_TypeDefPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd8_SendIfCond
</UL>

<P><STRONG><a name="[201]"></a>[local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f17SDMMC_WaitBusIdleEP16M4_SDIOC_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_WaitBusIdle(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd9_SendCSD
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd8_SendIfCond
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd7_SelectDeselectCard
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd6_SwitchFunc
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd55_AppCmd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd3_SendRelativeAddr
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd2_AllSendCID
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd25_WriteMultipleBlock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd24_WriteSingleBlock
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd18_ReadMultipleBlock
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd17_ReadSingleBlock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd16_SetBlockLength
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd13_SendStatus
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd0_GoIdleState
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd6_SetBusWidth
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Acmd41_SdSendOpCond
</UL>

<P><STRONG><a name="[207]"></a>[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f18SDMMC_WaitResponseEP16M4_SDIOC_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetNormalIrqFlag
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_ClearNormalIrqFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp7(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp6(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp3(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp2(M4_SDIOC_TypeDef*, unsigned*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Cmd0_GoIdleState
</UL>

<P><STRONG><a name="[5a0]"></a>[local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sdmmc_cmd.o(i._ZN33_INTERNAL_11_sdmmc_cmd_c_1dd5230f22SDMMC_GetCardDetectionEP16M4_SDIOC_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[170]"></a>__sti___12_board_gpio_c_PIN_MAP</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, board_gpio.o(i.__sti___12_board_gpio_c_PIN_MAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___12_board_gpio_c_PIN_MAP
</UL>
<BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial(M4_USART_TypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board_gpio.o(.init_array)
</UL>
<P><STRONG><a name="[1d3]"></a>[local to hc32f46x_ots_c]::OTS_Trimming()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hc32f46x_ots.o(i._ZN36_INTERNAL_14_hc32f46x_ots_c_OTS_Init12OTS_TrimmingEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTS_Init
</UL>

<P><STRONG><a name="[1fa]"></a>[local to hc32f46x_sdioc_c]::SdiocGetClkDiv(unsigned, unsigned)</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, hc32f46x_sdioc.o(i._ZN38_INTERNAL_16_hc32f46x_sdioc_c_89428c0814SdiocGetClkDivEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to hc32f46x_sdioc_c]::SdiocGetClkDiv(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_SetClk
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_Init
</UL>

<P><STRONG><a name="[1f9]"></a>[local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hc32f46x_sdioc.o(i._ZN38_INTERNAL_16_hc32f46x_sdioc_c_89428c0821SdiocGetInternDataPtrEPK16M4_SDIOC_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to hc32f46x_sdioc_c]::SdiocGetInternDataPtr(const M4_SDIOC_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIOC_IrqHandler
</UL>

<P><STRONG><a name="[217]"></a>[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, hc32f46x_timer0.o(i._ZN39_INTERNAL_17_hc32f46x_timer0_c_4644dad510AsyncDelayEP15M4_TMR0_TypeDef15en_tim0_channel19en_functional_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::TIMER0_GetClkMode(M4_TMR0_TypeDef*, en_tim0_channel)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IntCmd
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
</UL>

<P><STRONG><a name="[5bb]"></a>[local to hc32f46x_timer0_c]::TIMER0_GetClkMode(M4_TMR0_TypeDef*, en_tim0_channel)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32f46x_timer0.o(i._ZN39_INTERNAL_17_hc32f46x_timer0_c_4644dad517TIMER0_GetClkModeEP15M4_TMR0_TypeDef15en_tim0_channel))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_timer0_c]::AsyncDelay(M4_TMR0_TypeDef*, en_tim0_channel, en_functional_state)
</UL>

<P><STRONG><a name="[5ba]"></a>[local to hc32f46x_usart_c]::UsartGetClk(const M4_USART_TypeDef*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hc32f46x_usart.o(i._ZN38_INTERNAL_16_hc32f46x_usart_c_0262f0bf11UsartGetClkEPK16M4_USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to hc32f46x_usart_c]::UsartGetClk(const M4_USART_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetClkSyncBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetUartBaudrate(M4_USART_TypeDef*, unsigned)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned)
</UL>

<P><STRONG><a name="[21b]"></a>[local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned)</STRONG> (Thumb, 340 bytes, Stack size 80 bytes, hc32f46x_usart.o(i._ZN38_INTERNAL_16_hc32f46x_usart_c_0262f0bf13SetScBaudrateEP16M4_USART_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to hc32f46x_usart_c]::SetScBaudrate(M4_USART_TypeDef*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::UsartGetClk(const M4_USART_TypeDef*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[21d]"></a>[local to hc32f46x_usart_c]::SetUartBaudrate(M4_USART_TypeDef*, unsigned)</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, hc32f46x_usart.o(i._ZN38_INTERNAL_16_hc32f46x_usart_c_0262f0bf15SetUartBaudrateEP16M4_USART_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [local to hc32f46x_usart_c]::SetUartBaudrate(M4_USART_TypeDef*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::UsartGetClk(const M4_USART_TypeDef*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[21c]"></a>[local to hc32f46x_usart_c]::SetClkSyncBaudrate(M4_USART_TypeDef*, unsigned)</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, hc32f46x_usart.o(i._ZN38_INTERNAL_16_hc32f46x_usart_c_0262f0bf18SetClkSyncBaudrateEP16M4_USART_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [local to hc32f46x_usart_c]::SetClkSyncBaudrate(M4_USART_TypeDef*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to hc32f46x_usart_c]::UsartGetClk(const M4_USART_TypeDef*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[171]"></a>__sti___14_MarlinCore_cpp_card</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, marlincore.o(i.__sti___14_MarlinCore_cpp_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __sti___14_MarlinCore_cpp_card &rArr; CardReader::CardReader() &rArr; gpio_set_mode(unsigned char, WiringPinMode) &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::CardReader()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> marlincore.o(.init_array)
</UL>
<P><STRONG><a name="[172]"></a>__sti___12_e_parser_cpp_ec3e43ca</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, e_parser.o(i.__sti___12_e_parser_cpp_ec3e43ca))
<BR>[Address Reference Count : 1]<UL><LI> e_parser.o(.init_array)
</UL>
<P><STRONG><a name="[2a8]"></a>[local to pause_cpp]::impatient_beep(signed char, bool)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, pause.o(i._ZN30_INTERNAL_9_pause_cpp_331f730f14impatient_beepEab))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = [local to pause_cpp]::impatient_beep(signed char, bool) &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr;  Temperature::manage_heater() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer::tone(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_impatient_beep(signed char)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_confirmation(bool, signed char)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode)
</UL>

<P><STRONG><a name="[275]"></a>[local to pause_cpp]::ensure_safe_temperature(bool, PauseMode)</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, pause.o(i._ZN30_INTERNAL_9_pause_cpp_331f730f23ensure_safe_temperatureEb9PauseMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = [local to pause_cpp]::ensure_safe_temperature(bool, PauseMode) &rArr; Temperature::wait_for_hotend(unsigned char, bool) &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle(bool)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_confirmation(bool, signed char)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unload_filament(const float&, bool, PauseMode)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_filament(const float&, const float&, const float&, signed char, bool, bool, PauseMode)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_print(const float&, const float&, const float&, signed char, short)
</UL>

<P><STRONG><a name="[173]"></a>__sti___17_power_monitor_cpp_21bb0df9</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, power_monitor.o(i.__sti___17_power_monitor_cpp_21bb0df9))
<BR>[Address Reference Count : 1]<UL><LI> power_monitor.o(.init_array)
</UL>
<P><STRONG><a name="[174]"></a>__sti___13_powerloss_cpp_1e506b3c</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, powerloss.o(i.__sti___13_powerloss_cpp_1e506b3c))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sti___13_powerloss_cpp_1e506b3c &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> powerloss.o(.init_array)
</UL>
<P><STRONG><a name="[5a2]"></a>[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, tmc_util.o(i._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e11_tmc_statusER14TMC2208Stepper14TMC_debug_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::stealth()
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::s2vsb()
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::s2vsa()
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::intpol()
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::pwm_scale_auto()
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::pwm_scale_sum()
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::pwm_grad_auto()
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::pwm_ofs_auto()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_truefalse(bool)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[2cd]"></a>[local to tmc_util_cpp]::tmc_debug_loop(TMC_debug_enum, bool, bool, bool, bool)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tmc_util.o(i._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e14tmc_debug_loopE14TMC_debug_enumbbbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = [local to tmc_util_cpp]::tmc_debug_loop(TMC_debug_enum, bool, bool, bool, bool) &rArr; void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum) &rArr; TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;::rms_current() &rArr; TMCStepper::rms_current() &rArr; TMCStepper::cs2rms(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmc_report_all(bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[2ce]"></a>[local to tmc_util_cpp]::drv_status_loop(TMC_drv_status_enum, bool, bool, bool, bool)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tmc_util.o(i._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e15drv_status_loopE19TMC_drv_status_enumbbbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [local to tmc_util_cpp]::drv_status_loop(TMC_drv_status_enum, bool, bool, bool, bool) &rArr; void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum) &rArr; [local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmc_report_all(bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[31f]"></a>[local to tmc_util_cpp]::tmc_get_registers(TMC_get_registers_enum, bool, bool, bool, bool)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tmc_util.o(i._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e17tmc_get_registersE22TMC_get_registers_enumbbbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = [local to tmc_util_cpp]::tmc_get_registers(TMC_get_registers_enum, bool, bool, bool, bool) &rArr; void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum) &rArr; print_hex_long(unsigned, char) &rArr; print_hex_byte(unsigned char) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmc_get_registers(bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[5b3]"></a>[local to tmc_util_cpp]::tmc_get_ic_registers(TMC2208Stepper, TMC_get_registers_enum)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tmc_util.o(i._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e20tmc_get_ic_registersE14TMC2208Stepper22TMC_get_registers_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to tmc_util_cpp]::tmc_get_ic_registers(TMC2208Stepper, TMC_get_registers_enum) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)
</UL>

<P><STRONG><a name="[5b4]"></a>[local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tmc_util.o(i._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e21_tmc_parse_drv_statusER14TMC2208Stepper19TMC_drv_status_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::cs_actual()
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::t157()
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::t150()
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::t143()
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::t120()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum)
</UL>

<P><STRONG><a name="[5aa]"></a>void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e10tmc_statusI9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EEEEvRT_14TMC_debug_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum) &rArr; TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;::rms_current() &rArr; TMCStepper::rms_current() &rArr; TMCStepper::cs2rms(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::cs_actual()
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::otpw()
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::toff()
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::isEnabled()
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::ihold()
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::irun()
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TSTEP()
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::MSCNT()
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::hysteresis_start()
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::hysteresis_end()
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::microsteps()
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::blank_time()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_truefalse(bool)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;::rms_current()
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)69, (char)48&rang;::printLabel()
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_debug_loop(TMC_debug_enum, bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[5a7]"></a>void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e10tmc_statusI9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EEEEvRT_14TMC_debug_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum) &rArr; TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;::rms_current() &rArr; TMCStepper::rms_current() &rArr; TMCStepper::cs2rms(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::cs_actual()
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::otpw()
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::toff()
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::isEnabled()
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::ihold()
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::irun()
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TSTEP()
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::MSCNT()
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::hysteresis_start()
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::hysteresis_end()
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::microsteps()
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::blank_time()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_truefalse(bool)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;::rms_current()
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)88, (char)48&rang;::printLabel()
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_debug_loop(TMC_debug_enum, bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[5a8]"></a>void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e10tmc_statusI9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EEEEvRT_14TMC_debug_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum) &rArr; TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;::rms_current() &rArr; TMCStepper::rms_current() &rArr; TMCStepper::cs2rms(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::cs_actual()
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::otpw()
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::toff()
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::isEnabled()
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::ihold()
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::irun()
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TSTEP()
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::MSCNT()
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::hysteresis_start()
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::hysteresis_end()
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::microsteps()
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::blank_time()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_truefalse(bool)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;::rms_current()
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)89, (char)48&rang;::printLabel()
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_debug_loop(TMC_debug_enum, bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[5a9]"></a>void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e10tmc_statusI9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EEEEvRT_14TMC_debug_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum) &rArr; TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;::rms_current() &rArr; TMCStepper::rms_current() &rArr; TMCStepper::cs2rms(unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::cs_actual()
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::otpw()
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::toff()
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::isEnabled()
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::ihold()
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::irun()
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TSTEP()
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::MSCNT()
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::hysteresis_start()
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::hysteresis_end()
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::microsteps()
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::blank_time()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprint_truefalse(bool)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_status(TMC2208Stepper&, TMC_debug_enum)
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;::rms_current()
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)90, (char)48&rang;::printLabel()
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_debug_loop(TMC_debug_enum, bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[6a9]"></a>void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e12print_vsenseI9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EEEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[6b2]"></a>void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e12print_vsenseI9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EEEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[6b4]"></a>void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e12print_vsenseI9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EEEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[6b6]"></a>void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e12print_vsenseI9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EEEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void [local to tmc_util_cpp]::print_vsense&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void [local to tmc_util_cpp]::tmc_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_debug_enum)
</UL>

<P><STRONG><a name="[349]"></a>bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e15test_connectionI9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EEEEbRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::test_connection()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)69, (char)48&rang;::printLabel()
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tmc_connection(bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[346]"></a>bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e15test_connectionI9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EEEEbRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::test_connection()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)88, (char)48&rang;::printLabel()
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tmc_connection(bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[347]"></a>bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e15test_connectionI9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EEEEbRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::test_connection()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)89, (char)48&rang;::printLabel()
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tmc_connection(bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[348]"></a>bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e15test_connectionI9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EEEEbRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bool [local to tmc_util_cpp]::test_connection&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::test_connection()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)90, (char)48&rang;::printLabel()
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_tmc_connection(bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[5b2]"></a>void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum)</STRONG> (Thumb, 270 bytes, Stack size 88 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e17tmc_get_registersI9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EEEEvRT_22TMC_get_registers_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_get_registers_enum) &rArr; print_hex_long(unsigned, char) &rArr; print_hex_byte(unsigned char) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::GCONF()
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF()
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::PWM_SCALE()
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::IOIN()
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::PWMCONF()
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::IHOLD_IRUN()
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TPWMTHRS()
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TSTEP()
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::GSTAT()
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TPOWERDOWN()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_get_ic_registers(TMC2208Stepper, TMC_get_registers_enum)
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)69, (char)48&rang;::printLabel()
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::TMC2208Stepper(const TMC2208Stepper&)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_long(unsigned, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_get_registers(TMC_get_registers_enum, bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[5af]"></a>void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum)</STRONG> (Thumb, 270 bytes, Stack size 88 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e17tmc_get_registersI9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EEEEvRT_22TMC_get_registers_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_get_registers_enum) &rArr; print_hex_long(unsigned, char) &rArr; print_hex_byte(unsigned char) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::GCONF()
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF()
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::PWM_SCALE()
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::IOIN()
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::PWMCONF()
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::IHOLD_IRUN()
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TPWMTHRS()
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TSTEP()
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::GSTAT()
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TPOWERDOWN()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_get_ic_registers(TMC2208Stepper, TMC_get_registers_enum)
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)88, (char)48&rang;::printLabel()
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::TMC2208Stepper(const TMC2208Stepper&)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_long(unsigned, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_get_registers(TMC_get_registers_enum, bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[5b0]"></a>void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum)</STRONG> (Thumb, 270 bytes, Stack size 88 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e17tmc_get_registersI9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EEEEvRT_22TMC_get_registers_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_get_registers_enum) &rArr; print_hex_long(unsigned, char) &rArr; print_hex_byte(unsigned char) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::GCONF()
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF()
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::PWM_SCALE()
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::IOIN()
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::PWMCONF()
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::IHOLD_IRUN()
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TPWMTHRS()
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TSTEP()
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::GSTAT()
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TPOWERDOWN()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_get_ic_registers(TMC2208Stepper, TMC_get_registers_enum)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)89, (char)48&rang;::printLabel()
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::TMC2208Stepper(const TMC2208Stepper&)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_long(unsigned, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_get_registers(TMC_get_registers_enum, bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[5b1]"></a>void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum)</STRONG> (Thumb, 270 bytes, Stack size 88 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e17tmc_get_registersI9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EEEEvRT_22TMC_get_registers_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = void [local to tmc_util_cpp]::tmc_get_registers&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_get_registers_enum) &rArr; print_hex_long(unsigned, char) &rArr; print_hex_byte(unsigned char) &rArr; Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::GCONF()
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::CHOPCONF()
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::PWM_SCALE()
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::IOIN()
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::PWMCONF()
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::IHOLD_IRUN()
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TPWMTHRS()
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TSTEP()
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::GSTAT()
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::TPOWERDOWN()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_get_ic_registers(TMC2208Stepper, TMC_get_registers_enum)
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)90, (char)48&rang;::printLabel()
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::TMC2208Stepper(const TMC2208Stepper&)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_long(unsigned, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::tmc_get_registers(TMC_get_registers_enum, bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[5ae]"></a>void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum)</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e20tmc_parse_drv_statusI9TMCMarlinI14TMC2208StepperLc69ELc48EL8AxisEnum3EEEEvRT_19TMC_drv_status_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, TMC_drv_status_enum) &rArr; [local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::stst()
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::s2gb()
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::s2ga()
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::otpw()
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::olb()
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::ola()
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::ot()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum)
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)69, (char)48&rang;::printLabel()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_long(unsigned, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::drv_status_loop(TMC_drv_status_enum, bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[5ab]"></a>void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum)</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e20tmc_parse_drv_statusI9TMCMarlinI14TMC2208StepperLc88ELc48EL8AxisEnum0EEEEvRT_19TMC_drv_status_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, TMC_drv_status_enum) &rArr; [local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::stst()
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::s2gb()
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::s2ga()
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::otpw()
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::olb()
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::ola()
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::ot()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum)
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)88, (char)48&rang;::printLabel()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_long(unsigned, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::drv_status_loop(TMC_drv_status_enum, bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[5ac]"></a>void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum)</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e20tmc_parse_drv_statusI9TMCMarlinI14TMC2208StepperLc89ELc48EL8AxisEnum1EEEEvRT_19TMC_drv_status_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, TMC_drv_status_enum) &rArr; [local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::stst()
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::s2gb()
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::s2ga()
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::otpw()
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::olb()
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::ola()
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::ot()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum)
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)89, (char)48&rang;::printLabel()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_long(unsigned, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::drv_status_loop(TMC_drv_status_enum, bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[5ad]"></a>void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum)</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, tmc_util.o(t._ZN34_INTERNAL_12_tmc_util_cpp_4fb95e3e20tmc_parse_drv_statusI9TMCMarlinI14TMC2208StepperLc90ELc48EL8AxisEnum2EEEEvRT_19TMC_drv_status_enum))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = void [local to tmc_util_cpp]::tmc_parse_drv_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, TMC_drv_status_enum) &rArr; [local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::stst()
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::s2gb()
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::s2ga()
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::otpw()
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::olb()
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::ola()
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::ot()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::_tmc_parse_drv_status(TMC2208Stepper&, TMC_drv_status_enum)
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStorage&lang;(char)90, (char)48&rang;::printLabel()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex_long(unsigned, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tmc_util_cpp]::drv_status_loop(TMC_drv_status_enum, bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[587]"></a>[local to abl_cpp]::bed_level_virt_cmr(const float*, unsigned char, float)</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, abl.o(i._ZN28_INTERNAL_7_abl_cpp_5ad24c4b18bed_level_virt_cmrEPKfhf))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to abl_cpp]::bed_level_virt_2cmr(unsigned char, unsigned char, const float&, const float&)
</UL>

<P><STRONG><a name="[37d]"></a>[local to abl_cpp]::bed_level_virt_2cmr(unsigned char, unsigned char, const float&, const float&)</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, abl.o(i._ZN28_INTERNAL_7_abl_cpp_5ad24c4b19bed_level_virt_2cmrEhhRKfS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = [local to abl_cpp]::bed_level_virt_2cmr(unsigned char, unsigned char, const float&, const float&) &rArr; bed_level_virt_coord(unsigned char, unsigned char) &rArr;  bed_level_virt_coord(unsigned char, unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to abl_cpp]::bed_level_virt_cmr(const float*, unsigned char, float)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_level_virt_coord(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bed_level_virt_interpolate()
</UL>

<P><STRONG><a name="[397]"></a>[local to abl_cpp]::extrapolate_one_point(unsigned char, unsigned char, signed char, signed char)</STRONG> (Thumb, 372 bytes, Stack size 80 bytes, abl.o(i._ZN28_INTERNAL_7_abl_cpp_5ad24c4b21extrapolate_one_pointEhhaa))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [local to abl_cpp]::extrapolate_one_point(unsigned char, unsigned char, signed char, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::isnan(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extrapolate_unprobed_bed_level()
</UL>

<P><STRONG><a name="[f4]"></a>print_bilinear_leveling_grid()::[lambda(unsigned char, unsigned char) (instance 1)]::_FUN(unsigned char, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, abl.o(i._ZZ28print_bilinear_leveling_gridvENUlhhE_4_FUNEhh))
<BR>[Address Reference Count : 1]<UL><LI> abl.o(i._Z28print_bilinear_leveling_gridv)
</UL>
<P><STRONG><a name="[f5]"></a>print_bilinear_leveling_grid_virt()::[lambda(unsigned char, unsigned char) (instance 1)]::_FUN(unsigned char, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, abl.o(i._ZZ33print_bilinear_leveling_grid_virtvENUlhhE_4_FUNEhh))
<BR>[Address Reference Count : 1]<UL><LI> abl.o(i._Z33print_bilinear_leveling_grid_virtv)
</UL>
<P><STRONG><a name="[2ff]"></a>decltype(((const param#1+const param#2))) [local to abl_cpp]::_MIN&lang;int, int&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, abl.o(t._ZN28_INTERNAL_7_abl_cpp_5ad24c4b4_MINIiiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bilinear_z_offset(const XYval&lang;float&rang;&)
</UL>

<P><STRONG><a name="[175]"></a>__sti___9_queue_cpp_queue</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, queue.o(i.__sti___9_queue_cpp_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___9_queue_cpp_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeQueue::GCodeQueue()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> queue.o(.init_array)
</UL>
<P><STRONG><a name="[48b]"></a>decltype(((const param#1+const param#2))) [local to G29_cpp]::_MAX&lang;int, float&rang;(T1, T2)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, g29.o(t._ZN28_INTERNAL_7_G29_cpp_b59c42574_MAXIifEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::min_y()
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::min_x()
</UL>

<P><STRONG><a name="[48c]"></a>decltype(((const param#1+const param#2))) [local to G29_cpp]::_MIN&lang;float, float&rang;(T1, T2)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, g29.o(t._ZN28_INTERNAL_7_G29_cpp_b59c42574_MINIffEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
</UL>

<P><STRONG><a name="[5d2]"></a>decltype(((const param#1+const param#2))) [local to G29_cpp]::_MIN&lang;int, float&rang;(T1, T2)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, g29.o(t._ZN28_INTERNAL_7_G29_cpp_b59c42574_MINIifEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::max_y()
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::max_x()
</UL>

<P><STRONG><a name="[493]"></a>decltype(((const param#1+const param#2))) [local to G29_cpp]::_MIN&lang;short, int&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, g29.o(t._ZN28_INTERNAL_7_G29_cpp_b59c42574_MINIsiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
</UL>

<P><STRONG><a name="[486]"></a>void [local to G29_cpp]::LIMIT&lang;signed char, int, int&rang;(T1&, T2, T3)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, g29.o(t._ZN28_INTERNAL_7_G29_cpp_b59c42575LIMITIaiiEEvRT_T0_T1_))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G29()
</UL>

<P><STRONG><a name="[480]"></a>[local to G28_cpp]::quick_home_xy()</STRONG> (Thumb, 414 bytes, Stack size 72 bytes, g28.o(i._ZN28_INTERNAL_7_G28_cpp_b45e286013quick_home_xyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = [local to G28_cpp]::quick_home_xy() &rArr; do_blocking_move_to_xy(const float&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_plan_position()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_dir(AxisEnum)
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_length(AxisEnum)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::validate_homing_move()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_blocking_move_to_xy(const float&, const float&, const float&)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::G28()
</UL>

<P><STRONG><a name="[49f]"></a>GcodeSuite::M48()::[lambda(bool, const float&, const float&, const float&, const float&, bool) (instance 1)]::operator ()(bool, const float&, const float&, const float&, const float&, bool) const</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, m48.o(i._ZZN10GcodeSuite3M48EvENKUlbRKfS1_S1_S1_bE_clEbS1_S1_S1_S1_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GcodeSuite::M48()::[lambda(bool, const float&, const float&, const float&, const float&, bool) (instance 1)]::operator ()(bool, const float&, const float&, const float&, const float&, bool) const &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
</UL>

<P><STRONG><a name="[49e]"></a>void [local to M48_cpp]::LIMIT&lang;float, int, int&rang;(T1&, T2, T3)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, m48.o(t._ZN28_INTERNAL_7_M48_cpp_db856f1d5LIMITIfiiEEvRT_T0_T1_))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M48()
</UL>

<P><STRONG><a name="[4c2]"></a>const T1 [local to M600_cpp]::ABS&lang;float&rang;(T1)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m600.o(t._ZN29_INTERNAL_8_M600_cpp_d43b58b83ABSIfEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M600()
</UL>

<P><STRONG><a name="[4c3]"></a>const T1 [local to M603_cpp]::ABS&lang;float&rang;(T1)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, m603.o(t._ZN29_INTERNAL_8_M603_cpp_d67de6e13ABSIfEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M603()
</UL>

<P><STRONG><a name="[4c4]"></a>void [local to M603_cpp]::NOMORE&lang;float, int&rang;(T1&, T2)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, m603.o(t._ZN29_INTERNAL_8_M603_cpp_d67de6e16NOMOREIfiEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M603()
</UL>

<P><STRONG><a name="[4c1]"></a>[local to M569_cpp]::say_stealth_status()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m569.o(i._ZN29_INTERNAL_8_M569_cpp_b921463b18say_stealth_statusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to M569_cpp]::say_stealth_status() &rArr; void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_say_stealth_status&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M569()
</UL>

<P><STRONG><a name="[4c0]"></a>[local to M569_cpp]::set_stealth_status(bool, signed char)</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, m569.o(i._ZN29_INTERNAL_8_M569_cpp_b921463b18set_stealth_statusEba))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to M569_cpp]::set_stealth_status(bool, signed char) &rArr; GCodeParser::value_byte() &rArr; GCodeParser::value_long() &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::seen(char)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GCodeParser::value_byte()
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)90, (char)48, (AxisEnum)2&rang;&rang;(T1&, bool)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)89, (char)48, (AxisEnum)1&rang;&rang;(T1&, bool)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)88, (char)48, (AxisEnum)0&rang;&rang;(T1&, bool)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void tmc_set_stealthChop&lang;TMCMarlin&lang;TMC2208Stepper, (char)69, (char)48, (AxisEnum)3&rang;&rang;(T1&, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M569()
</UL>

<P><STRONG><a name="[4a9]"></a>[local to M115_cpp]::cap_line(const char*, bool)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, m115.o(i._ZN29_INTERNAL_8_M115_cpp_d86c21268cap_lineEPKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [local to M115_cpp]::cap_line(const char*, bool) &rArr; Print::println(int, int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M115()
</UL>

<P><STRONG><a name="[3b2]"></a>const T1 [local to G2_G3_cpp]::ABS&lang;float&rang;(T1)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, g2_g3.o(t._ZN30_INTERNAL_9_G2_G3_cpp_e4fdbed73ABSIfEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plan_arc(const XYZEval&lang;float&rang;&, const XYval&lang;float&rang;&, bool, unsigned char)
</UL>

<P><STRONG><a name="[4a4]"></a>decltype(((const param#1+const param#2))) [local to M104_M109_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m104_m109.o(t._ZN35_INTERNAL_13_M104_M109_cpp_61122c744_MINIhiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M109()
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M104()
</UL>

<P><STRONG><a name="[4ac]"></a>decltype(((const param#1+const param#2))) [local to M140_M190_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, m140_m190.o(t._ZN35_INTERNAL_13_M140_M190_cpp_e97913ff4_MINIhiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M190()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GcodeSuite::M140()
</UL>

<P><STRONG><a name="[305]"></a>[local to fontutils_cpp]::utf8_is_start_byte_of_char(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fontutils.o(i._ZN35_INTERNAL_13_fontutils_cpp_ae2a2fdb26utf8_is_start_byte_of_charEh))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>

<P><STRONG><a name="[629]"></a>MarlinUI::update()::[lambda() (instance 1)]::operator ()() const</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, marlinui.o(i._ZZN8MarlinUI6updateEvENKUlvE_clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MarlinUI::update()::[lambda() (instance 1)]::operator ()() const &rArr; MarlinUI::quick_feedback(bool) &rArr; MarlinUI::buzz(long, unsigned short) &rArr; Buzzer::tone(unsigned short, unsigned short) &rArr;  Temperature::manage_heater() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBitMapp
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::quick_feedback(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::update()
</UL>

<P><STRONG><a name="[176]"></a>__sti___12_marlinui_cpp_ui</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, marlinui.o(i.__sti___12_marlinui_cpp_ui))
<BR>[Address Reference Count : 1]<UL><LI> marlinui.o(.init_array)
</UL>
<P><STRONG><a name="[10e]"></a>MarlinUI::synchronize(const char*)::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, menu.o(i._ZZN8MarlinUI11synchronizeEPKcENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MarlinUI::synchronize(const char*)::[lambda() (instance 1)]::_FUN() &rArr; MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_static::draw(unsigned char, const char*, unsigned char, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(i._ZN8MarlinUI11synchronizeEPKc)
</UL>
<P><STRONG><a name="[63d]"></a>menu_advanced_settings()::[lambda() (instance 3)]::operator ()() const</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, menu_advanced.o(i._ZZ22menu_advanced_settingsvENKUlvE1_clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = menu_advanced_settings()::[lambda() (instance 3)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()::[lambda() (instance 3)]::_FUN()
</UL>

<P><STRONG><a name="[e7]"></a>menu_advanced_settings()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_advanced.o(i._ZZ22menu_advanced_settingsvENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = menu_advanced_settings()::[lambda() (instance 3)]::_FUN() &rArr; menu_advanced_settings()::[lambda() (instance 3)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_settings()::[lambda() (instance 3)]::operator ()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[e0]"></a>menu_advanced_settings()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, menu_advanced.o(i._ZZ22menu_advanced_settingsvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = menu_advanced_settings()::[lambda() (instance 1)]::_FUN() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z22menu_advanced_settingsv)
</UL>
<P><STRONG><a name="[ea]"></a>menu_advanced_acceleration()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = menu_advanced_acceleration()::[lambda() (instance 3)]::_FUN() &rArr; Planner::reset_acceleration_rates()
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_accelerationv)
</UL>
<P><STRONG><a name="[eb]"></a>menu_advanced_acceleration()::[lambda() (instance 5)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE3_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = menu_advanced_acceleration()::[lambda() (instance 5)]::_FUN() &rArr; Planner::reset_acceleration_rates()
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_accelerationv)
</UL>
<P><STRONG><a name="[ec]"></a>menu_advanced_acceleration()::[lambda() (instance 7)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE5_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = menu_advanced_acceleration()::[lambda() (instance 7)]::_FUN() &rArr; Planner::reset_acceleration_rates()
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_accelerationv)
</UL>
<P><STRONG><a name="[ee]"></a>menu_advanced_acceleration()::[lambda() (instance 9)]::_FUN()</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE7_4_FUNEv))
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_accelerationv)
</UL>
<P><STRONG><a name="[e9]"></a>menu_advanced_acceleration()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_advanced.o(i._ZZ26menu_advanced_accelerationvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = menu_advanced_acceleration()::[lambda() (instance 1)]::_FUN() &rArr; Planner::reset_acceleration_rates()
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_accelerationv)
</UL>
<P><STRONG><a name="[f0]"></a>menu_advanced_steps_per_mm()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = menu_advanced_steps_per_mm()::[lambda() (instance 3)]::_FUN() &rArr; Planner::refresh_positioning() &rArr; Planner::set_position_mm(const float&, const float&, const float&, const float&) &rArr; Planner::set_machine_position_mm(const float&, const float&, const float&, const float&) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
</UL>
<P><STRONG><a name="[f1]"></a>menu_advanced_steps_per_mm()::[lambda() (instance 5)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE3_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = menu_advanced_steps_per_mm()::[lambda() (instance 5)]::_FUN() &rArr; Planner::refresh_positioning() &rArr; Planner::set_position_mm(const float&, const float&, const float&, const float&) &rArr; Planner::set_machine_position_mm(const float&, const float&, const float&, const float&) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
</UL>
<P><STRONG><a name="[f2]"></a>menu_advanced_steps_per_mm()::[lambda() (instance 7)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE5_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = menu_advanced_steps_per_mm()::[lambda() (instance 7)]::_FUN() &rArr; Planner::refresh_positioning() &rArr; Planner::set_position_mm(const float&, const float&, const float&, const float&) &rArr; Planner::set_machine_position_mm(const float&, const float&, const float&, const float&) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
</UL>
<P><STRONG><a name="[ef]"></a>menu_advanced_steps_per_mm()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_advanced.o(i._ZZ26menu_advanced_steps_per_mmvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = menu_advanced_steps_per_mm()::[lambda() (instance 1)]::_FUN() &rArr; Planner::refresh_positioning() &rArr; Planner::set_position_mm(const float&, const float&, const float&, const float&) &rArr; Planner::set_machine_position_mm(const float&, const float&, const float&, const float&) &rArr; Stepper::set_position(const int&, const int&, const int&, const int&) &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::refresh_positioning()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_advanced.o(i._Z26menu_advanced_steps_per_mmv)
</UL>
<P><STRONG><a name="[687]"></a>decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN39_INTERNAL_17_menu_advanced_cpp_05cde99b4_MAXIfiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::action(const char*, unsigned*, unsigned, unsigned, void(*)(), bool)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::action(const char*, signed char*, signed char, signed char, void(*)(), bool)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)
</UL>

<P><STRONG><a name="[37e]"></a>decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MAX&lang;unsigned, unsigned&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN39_INTERNAL_17_menu_advanced_cpp_05cde99b4_MAXIjjEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_advanced_acceleration()
</UL>

<P><STRONG><a name="[688]"></a>decltype(((const param#1+const param#2))) [local to menu_advanced_cpp]::_MIN&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, menu_advanced.o(t._ZN39_INTERNAL_17_menu_advanced_cpp_05cde99b4_MINIfiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float52sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float31sign&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5_25&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_long5_25&rang;::action(const char*, unsigned*, unsigned, unsigned, void(*)(), bool)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_percent&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float51&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float43&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float5&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_float3&rang;::action(const char*, float*, float, float, void(*)(), bool)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int8&rang;::action(const char*, signed char*, signed char, signed char, void(*)(), bool)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_int3&rang;::action(const char*, short*, short, short, void(*)(), bool)
</UL>

<P><STRONG><a name="[c9]"></a>menu_bed_leveling()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu_bed_leveling.o(i._ZZ17menu_bed_levelingvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = menu_bed_leveling()::[lambda() (instance 1)]::_FUN() &rArr; set_z_fade_height(float, bool) &rArr; set_bed_leveling_enabled(bool) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_z_fade_height(float, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_bed_leveling.o(i._Z17menu_bed_levelingv)
</UL>
<P><STRONG><a name="[68d]"></a>decltype(((const param#1+const param#2))) [local to menu_bed_leveling_cpp]::_MAX&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, menu_bed_leveling.o(t._ZN43_INTERNAL_21_menu_bed_leveling_cpp_fc4a6ae34_MAXIfiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)
</UL>

<P><STRONG><a name="[68e]"></a>decltype(((const param#1+const param#2))) [local to menu_bed_leveling_cpp]::_MIN&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, menu_bed_leveling.o(t._ZN43_INTERNAL_21_menu_bed_leveling_cpp_fc4a6ae34_MINIfiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint8&rang;::action(const char*, unsigned char*, unsigned char, unsigned char, void(*)(), bool)
</UL>

<P><STRONG><a name="[f6]"></a>_menu_configuration_preheat_settings()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, menu_configuration.o(i._ZZ36_menu_configuration_preheat_settingsvENUlvE_4_FUNEv))
<BR>[Address Reference Count : 1]<UL><LI> menu_configuration.o(i._Z36_menu_configuration_preheat_settingsv)
</UL>
<P><STRONG><a name="[69d]"></a>decltype(((const param#1+const param#2))) [local to menu_configuration_cpp]::_MAX&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, menu_configuration.o(t._ZN44_INTERNAL_22_menu_configuration_cpp_9529fbd34_MAXIfiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::action(const char*, unsigned short*, unsigned short, unsigned short, void(*)(), bool)
</UL>

<P><STRONG><a name="[69e]"></a>decltype(((const param#1+const param#2))) [local to menu_configuration_cpp]::_MIN&lang;float, int&rang;(T1, T2)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, menu_configuration.o(t._ZN44_INTERNAL_22_menu_configuration_cpp_9529fbd34_MINIfiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMenuEditItem&lang;MenuEditItemInfo_uint16_4&rang;::action(const char*, unsigned short*, unsigned short, unsigned short, void(*)(), bool)
</UL>

<P><STRONG><a name="[322]"></a>[local to menu_filament_cpp]::pause_header()</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, menu_filament.o(i._ZN39_INTERNAL_17_menu_filament_cpp_7bf341f812pause_headerEv))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lcd_pause_message(const char*)
</UL>

<P><STRONG><a name="[d1]"></a>menu_pause_option()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu_filament.o(i._ZZ17menu_pause_optionvENUlvE1_4_FUNEv))
<BR>[Address Reference Count : 1]<UL><LI> menu_filament.o(i._Z17menu_pause_optionv)
</UL>
<P><STRONG><a name="[cf]"></a>menu_pause_option()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, menu_filament.o(i._ZZ17menu_pause_optionvENUlvE_4_FUNEv))
<BR>[Address Reference Count : 1]<UL><LI> menu_filament.o(i._Z17menu_pause_optionv)
</UL>
<P><STRONG><a name="[cd]"></a>[local to menu_job_recovery_cpp]::lcd_power_loss_recovery_resume()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu_job_recovery.o(i._ZN43_INTERNAL_21_menu_job_recovery_cpp_ae259b3f30lcd_power_loss_recovery_resumeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = [local to menu_job_recovery_cpp]::lcd_power_loss_recovery_resume() &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::return_to_status()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_job_recovery.o(i._Z17menu_job_recoveryv)
</UL>
<P><STRONG><a name="[5bc]"></a>[local to menu_language_cpp]::set_lcd_language(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, menu_language.o(i._ZN39_INTERNAL_17_menu_language_cpp_e79bc25216set_lcd_languageEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = [local to menu_language_cpp]::set_lcd_language(unsigned char) &rArr; MarlinSettings::save() &rArr; PersistentStore::access_finish() &rArr; eeprom_buffer_flush &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::reset_status(bool)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::save()
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::set_language(unsigned char)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 1)]::_FUN()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_language()::[lambda() (instance 3)]::_FUN()
</UL>

<P><STRONG><a name="[b4]"></a>menu_language()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_language.o(i._ZZ13menu_languagevENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = menu_language()::[lambda() (instance 3)]::_FUN() &rArr; [local to menu_language_cpp]::set_lcd_language(unsigned char) &rArr; MarlinSettings::save() &rArr; PersistentStore::access_finish() &rArr; eeprom_buffer_flush &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_language.o(i._Z13menu_languagev)
</UL>
<P><STRONG><a name="[b3]"></a>menu_language()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_language.o(i._ZZ13menu_languagevENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = menu_language()::[lambda() (instance 1)]::_FUN() &rArr; [local to menu_language_cpp]::set_lcd_language(unsigned char) &rArr; MarlinSettings::save() &rArr; PersistentStore::access_finish() &rArr; eeprom_buffer_flush &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_language_cpp]::set_lcd_language(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_language.o(i._Z13menu_languagev)
</UL>
<P><STRONG><a name="[b0]"></a>menu_ready()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu_main.o(i._ZZ10menu_readyvENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = menu_ready()::[lambda() (instance 3)]::_FUN() &rArr; _menu_move_distance_e_maybe() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance_e_maybe()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z10menu_readyv)
</UL>
<P><STRONG><a name="[af]"></a>menu_ready()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu_main.o(i._ZZ10menu_readyvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = menu_ready()::[lambda() (instance 1)]::_FUN() &rArr; _menu_move_distance_e_maybe() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance_e_maybe()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z10menu_readyv)
</UL>
<P><STRONG><a name="[63f]"></a>menu_main()::[lambda() (instance 1)]::operator ()() const</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, menu_main.o(i._ZZ9menu_mainvENKUlvE_clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = menu_main()::[lambda() (instance 1)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()::[lambda() (instance 1)]::_FUN()
</UL>

<P><STRONG><a name="[fa]"></a>menu_main()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_main.o(i._ZZ9menu_mainvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = menu_main()::[lambda() (instance 1)]::_FUN() &rArr; menu_main()::[lambda() (instance 1)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_main()::[lambda() (instance 1)]::operator ()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_main.o(i._Z9menu_mainv)
</UL>
<P><STRONG><a name="[640]"></a>MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, menu_media.o(i._ZZN15MenuItem_sdfile6actionEPKcR10CardReaderENKUlvE_clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::_FUN()
</UL>

<P><STRONG><a name="[da]"></a>MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_media.o(i._ZZN15MenuItem_sdfile6actionEPKcR10CardReaderENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::_FUN() &rArr; MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_sdfile::action(const char*, CardReader&)::[lambda() (instance 1)]::operator ()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_media.o(i._Z19menu_media_filelistv)
</UL>
<P><STRONG><a name="[de]"></a>[local to menu_motion_cpp]::lcd_move_e()</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, menu_motion.o(i._ZN37_INTERNAL_15_menu_motion_cpp_1861504310lcd_move_eEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = [local to menu_motion_cpp]::lcd_move_e() &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftostr41sign(const float&)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualMove::soon(AxisEnum)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::use_click()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_previous_screen_no_defer()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEditItemBase::draw_edit_screen(const char*, const char*)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_goto_manual_move(float, AxisEnum)::[lambda() (instance 1)]::_FUN()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z20LCD_goto_manual_movef8AxisEnum)
</UL>
<P><STRONG><a name="[df]"></a>LCD_goto_manual_move(float, AxisEnum)::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_motion.o(i._ZZ20LCD_goto_manual_movef8AxisEnumENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LCD_goto_manual_move(float, AxisEnum)::[lambda() (instance 1)]::_FUN() &rArr; [local to menu_motion_cpp]::lcd_move_e() &rArr; MenuEditItemBase::draw_edit_screen(const char*, const char*) &rArr; TFT_String::set(const char*, signed char, const char*) &rArr; TFT_String::set(unsigned char*, signed char, const char*) &rArr; TFT_String::add(unsigned char*, signed char, unsigned char*) &rArr; TFT_String::add(unsigned char*, unsigned char) &rArr; get_utf8_value_cb(unsigned char*, unsigned char(*)(unsigned char*), unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to menu_motion_cpp]::lcd_move_e()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z20LCD_goto_manual_movef8AxisEnum)
</UL>
<P><STRONG><a name="[63e]"></a>_menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, menu_motion.o(i._ZZ27_menu_move_distance_e_maybevENKUlvE_clEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance_e_maybe()::[lambda() (instance 1)]::_FUN()
</UL>

<P><STRONG><a name="[f3]"></a>_menu_move_distance_e_maybe()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, menu_motion.o(i._ZZ27_menu_move_distance_e_maybevENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _menu_move_distance_e_maybe()::[lambda() (instance 1)]::_FUN() &rArr; _menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const &rArr; MenuItem_confirm::select_screen(const char*, const char*, void(*)(), void(*)(), const char*, const char*, const char*) &rArr; MenuItem_confirm::draw_select_screen(const char*, const char*, bool, const char*, const char*, const char*) &rArr; TFT::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short, unsigned short, unsigned short) &rArr; TFT_Queue::add_image(short, short, MarlinImage, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z27_menu_move_distance_e_maybev)
</UL>
<P><STRONG><a name="[106]"></a>menu_move()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu_motion.o(i._ZZ9menu_movevENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = menu_move()::[lambda() (instance 3)]::_FUN() &rArr; LCD_goto_manual_move(float, AxisEnum) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_goto_manual_move(float, AxisEnum)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z9menu_movev)
</UL>
<P><STRONG><a name="[107]"></a>menu_move()::[lambda() (instance 5)]::_FUN()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu_motion.o(i._ZZ9menu_movevENUlvE3_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = menu_move()::[lambda() (instance 5)]::_FUN() &rArr; LCD_goto_manual_move(float, AxisEnum) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_goto_manual_move(float, AxisEnum)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z9menu_movev)
</UL>
<P><STRONG><a name="[105]"></a>menu_move()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu_motion.o(i._ZZ9menu_movevENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = menu_move()::[lambda() (instance 1)]::_FUN() &rArr; LCD_goto_manual_move(float, AxisEnum) &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_goto_manual_move(float, AxisEnum)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._Z9menu_movev)
</UL>
<P><STRONG><a name="[120]"></a>_menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menu_motion.o(i._ZZZ27_menu_move_distance_e_maybevENKUlvE_clEvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _menu_move_distance_e_maybe()::[lambda() (instance 1)]::operator ()() const::[lambda() (instance 1)]::_FUN() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_motion.o(i._ZZ27_menu_move_distance_e_maybevENKUlvE_clEv)
</UL>
<P><STRONG><a name="[bb]"></a>menu_preheat_m()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, menu_temperature.o(i._ZZ14menu_preheat_mvENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = menu_preheat_m()::[lambda() (instance 3)]::_FUN() &rArr; Temperature::lcd_preheat(unsigned char, signed char, signed char) &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_temperature.o(i._Z14menu_preheat_mv)
</UL>
<P><STRONG><a name="[b9]"></a>menu_preheat_m()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, menu_temperature.o(i._ZZ14menu_preheat_mvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = menu_preheat_m()::[lambda() (instance 1)]::_FUN() &rArr; Temperature::lcd_preheat(unsigned char, signed char, signed char) &rArr; MarlinUI::return_to_status() &rArr; MarlinUI::goto_screen(void(*)(), unsigned short, unsigned char, unsigned char) &rArr; MarlinUI::clear_lcd() &rArr; TFT_Queue::fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_temperature.o(i._Z14menu_preheat_mv)
</UL>
<P><STRONG><a name="[be]"></a>menu_temperature()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_temperature.o(i._ZZ16menu_temperaturevENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = menu_temperature()::[lambda() (instance 1)]::_FUN() &rArr; Temperature::start_watching_hotend(unsigned char) &rArr; HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_temperature.o(i._Z16menu_temperaturev)
</UL>
<P><STRONG><a name="[506]"></a>decltype(((const param#1+const param#2))) [local to menu_temperature_cpp]::_MIN&lang;short, int&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menu_temperature.o(t._ZN42_INTERNAL_20_menu_temperature_cpp_66fc3edd4_MINIsiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::setTargetHotend(short, unsigned char)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::lcd_preheat(unsigned char, signed char, signed char)
</UL>

<P><STRONG><a name="[c4]"></a>menu_tmc_current()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, menu_tmc.o(i._ZZ16menu_tmc_currentvENUlvE1_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = menu_tmc_current()::[lambda() (instance 3)]::_FUN() &rArr; TMCStepper::rms_current(unsigned short) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tmc.o(i._Z16menu_tmc_currentv)
</UL>
<P><STRONG><a name="[c5]"></a>menu_tmc_current()::[lambda() (instance 5)]::_FUN()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, menu_tmc.o(i._ZZ16menu_tmc_currentvENUlvE3_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = menu_tmc_current()::[lambda() (instance 5)]::_FUN() &rArr; TMCStepper::rms_current(unsigned short) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tmc.o(i._Z16menu_tmc_currentv)
</UL>
<P><STRONG><a name="[c6]"></a>menu_tmc_current()::[lambda() (instance 7)]::_FUN()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, menu_tmc.o(i._ZZ16menu_tmc_currentvENUlvE5_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = menu_tmc_current()::[lambda() (instance 7)]::_FUN() &rArr; TMCStepper::rms_current(unsigned short) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tmc.o(i._Z16menu_tmc_currentv)
</UL>
<P><STRONG><a name="[c3]"></a>menu_tmc_current()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, menu_tmc.o(i._ZZ16menu_tmc_currentvENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = menu_tmc_current()::[lambda() (instance 1)]::_FUN() &rArr; TMCStepper::rms_current(unsigned short) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMCStepper::rms_current(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tmc.o(i._Z16menu_tmc_currentv)
</UL>
<P><STRONG><a name="[10a]"></a>menu_tune()::[lambda() (instance 3)]::_FUN()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, menu_tune.o(i._ZZ9menu_tunevENUlvE1_4_FUNEv))
<BR>[Address Reference Count : 1]<UL><LI> menu_tune.o(i._Z9menu_tunev)
</UL>
<P><STRONG><a name="[109]"></a>menu_tune()::[lambda() (instance 1)]::_FUN()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu_tune.o(i._ZZ9menu_tunevENUlvE_4_FUNEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = menu_tune()::[lambda() (instance 1)]::_FUN() &rArr; Temperature::start_watching_hotend(unsigned char) &rArr; HeaterWatch&lang;(int)2, (int)3, (unsigned)90&rang;::restart(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::start_watching_hotend(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu_tune.o(i._Z9menu_tunev)
</UL>
<P><STRONG><a name="[257]"></a>void [local to menu_tune_cpp]::LIMIT&lang;short, int, int&rang;(T1&, T2, T3)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, menu_tune.o(t._ZN35_INTERNAL_13_menu_tune_cpp_499e3b725LIMITIsiiEEvRT_T0_T1_))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_feedrate()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_set_Fan0()
</UL>

<P><STRONG><a name="[177]"></a>__sti___13_tft_image_cpp_NoLogo</STRONG> (Thumb, 590 bytes, Stack size 0 bytes, tft_image.o(i.__sti___13_tft_image_cpp_NoLogo))
<BR>[Address Reference Count : 1]<UL><LI> tft_image.o(.init_array)
</UL>
<P><STRONG><a name="[178]"></a>__sti___14_ui_320x240_cpp_d571d997</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ui_320x240.o(i.__sti___14_ui_320x240_cpp_d571d997))
<BR>[Address Reference Count : 1]<UL><LI> ui_320x240.o(.init_array)
</UL>
<P><STRONG><a name="[179]"></a>__sti___10_buzzer_cpp_f84fbc67</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, buzzer.o(i.__sti___10_buzzer_cpp_f84fbc67))
<BR>[Address Reference Count : 1]<UL><LI> buzzer.o(.init_array)
</UL>
<P><STRONG><a name="[17a]"></a>__sti___11_encoder_cpp_95db355f</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, encoder.o(i.__sti___11_encoder_cpp_95db355f))
<BR>[Address Reference Count : 1]<UL><LI> encoder.o(.init_array)
</UL>
<P><STRONG><a name="[5a1]"></a>[local to endstops_cpp]::print_es_state(bool, const char*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, endstops.o(i._ZN34_INTERNAL_12_endstops_cpp_endstops14print_es_stateEbPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [local to endstops_cpp]::print_es_state(bool, const char*) &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Endstops::report_states()
</UL>

<P><STRONG><a name="[17b]"></a>__sti___12_endstops_cpp_endstops</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, endstops.o(i.__sti___12_endstops_cpp_endstops))
<BR>[Address Reference Count : 1]<UL><LI> endstops.o(.init_array)
</UL>
<P><STRONG><a name="[38e]"></a>const T1 [local to motion_cpp]::ABS&lang;float&rang;(T1)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motion.o(t._ZN32_INTERNAL_10_motion_cpp_db549edf3ABSIfEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_line_to_destination()
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;segmented_line_to_destination(const float&, float)
</UL>

<P><STRONG><a name="[2bf]"></a>void [local to motion_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motion.o(t._ZN32_INTERNAL_10_motion_cpp_db549edf6NOLESSIffEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_z_clearance(const float&, bool, bool, bool)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_motion_limits(XYZval&lang;float&rang;&)
</UL>

<P><STRONG><a name="[32d]"></a>void [local to motion_cpp]::NOMORE&lang;float, float&rang;(T1&, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motion.o(t._ZN32_INTERNAL_10_motion_cpp_db549edf6NOMOREIffEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_motion_limits(XYZval&lang;float&rang;&)
</UL>

<P><STRONG><a name="[17c]"></a>__sti___11_planner_cpp_planner</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, planner.o(i.__sti___11_planner_cpp_planner))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___11_planner_cpp_planner &rArr; __hardfp_lroundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::Planner()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_lroundf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> planner.o(.init_array)
</UL>
<P><STRONG><a name="[5ee]"></a>const T1 [local to planner_cpp]::ABS&lang;float&rang;(T1)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner3ABSIfEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
</UL>

<P><STRONG><a name="[5ef]"></a>const T1 [local to planner_cpp]::ABS&lang;int&rang;(T1)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner3ABSIiEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
</UL>

<P><STRONG><a name="[5f3]"></a>decltype(((const param#1+const param#2))) [local to planner_cpp]::_MAX&lang;float, float&rang;(T1, T2)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner4_MAXIffEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
</UL>

<P><STRONG><a name="[5f2]"></a>const T1 [local to planner_cpp]::_MAX&lang;int, &lang;int, int&rang;&rang;(T1, T2...)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner4_MAXIiJiiEEEKT_S1_DpT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = const T1 [local to planner_cpp]::_MAX&lang;int, &lang;int, int&rang;&rang;(T1, T2...)
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decltype(((const param#1+const param#2))) [local to planner_cpp]::_MAX&lang;int, int&rang;(T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
</UL>

<P><STRONG><a name="[6a6]"></a>decltype(((const param#1+const param#2))) [local to planner_cpp]::_MAX&lang;int, int&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner4_MAXIiiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1 [local to planner_cpp]::_MAX&lang;int, &lang;int, int&rang;&rang;(T1, T2...)
</UL>

<P><STRONG><a name="[5f0]"></a>decltype(((const param#1+const param#2))) [local to planner_cpp]::_MAX&lang;unsigned, unsigned&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner4_MAXIjjEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
</UL>

<P><STRONG><a name="[5f5]"></a>decltype(((const param#1+const param#2))) [local to planner_cpp]::_MIN&lang;float, float&rang;(T1, T2)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner4_MINIffEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reverse_pass_kernel(block_t*, const block_t*)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
</UL>

<P><STRONG><a name="[5ec]"></a>void [local to planner_cpp]::NOLESS&lang;float, float&rang;(T1&, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner6NOLESSIffEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::getHighESpeed()
</UL>

<P><STRONG><a name="[600]"></a>void [local to planner_cpp]::NOLESS&lang;unsigned, unsigned&rang;(T1&, T2)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner6NOLESSIjjEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::reset_acceleration_rates()
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::calculate_trapezoid_for_block(block_t*, const float&, const float&)
</UL>

<P><STRONG><a name="[5f1]"></a>void [local to planner_cpp]::NOMORE&lang;float, float&rang;(T1&, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, planner.o(t._ZN32_INTERNAL_11_planner_cpp_planner6NOMOREIffEEvRT_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Planner::_populate_block(block_t*, bool, const XYZEval&lang;int&rang;&, float, unsigned char, const float&)
</UL>

<P><STRONG><a name="[5cc]"></a>Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, probe.o(i._ZZN5Probe11run_z_probeEbENKUlPKcRKffbfE_clES1_S3_fbf))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = Probe::run_z_probe(bool)::[lambda(const char*, const float&, float, bool, float) (instance 1)]::operator ()(const char*, const float&, float, bool, float) const &rArr; Probe::probe_down_to_z(float, float) &rArr; do_blocking_move_to_z(const float&, const float&) &rArr; do_blocking_move_to_xy_z(const XYval&lang;float&rang;&, const float&, const float&) &rArr; do_blocking_move_to(float, float, float, const float&) &rArr; Planner::synchronize() &rArr; idle(bool) &rArr; manage_inactivity(bool) &rArr; GCodeQueue::get_available_commands() &rArr; GCodeQueue::get_sdcard_commands() &rArr; CardReader::fileHasFinished() &rArr;  Planner::synchronize() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::probe_down_to_z(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::run_z_probe(bool)
</UL>

<P><STRONG><a name="[17d]"></a>__sti___9_probe_cpp_ae5cdc06</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, probe.o(i.__sti___9_probe_cpp_ae5cdc06))
<BR>[Address Reference Count : 1]<UL><LI> probe.o(.init_array)
</UL>
<P><STRONG><a name="[5cd]"></a>const T1 [local to probe_cpp]::ABS&lang;float&rang;(T1)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, probe.o(t._ZN30_INTERNAL_9_probe_cpp_ae5cdc063ABSIfEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::run_z_probe(bool)
</UL>

<P><STRONG><a name="[5d1]"></a>decltype(((const param#1+const param#2))) [local to probe_cpp]::_MIN&lang;short, int&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, probe.o(t._ZN30_INTERNAL_9_probe_cpp_ae5cdc064_MINIsiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Probe::preheat_for_probing(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[53b]"></a>[local to settings_cpp]::config_heading(bool, const char*, bool)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, settings.o(i._ZN34_INTERNAL_12_settings_cpp_7a1ff5ce14config_headingEbPKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to settings_cpp]::config_heading(bool, const char*, bool) &rArr; serial_echo_start() &rArr; serialprintPGM(const char*) &rArr; HardwareSerial::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echo_start()
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::report(bool)
</UL>

<P><STRONG><a name="[538]"></a>decltype(((const param#1+const param#2))) [local to settings_cpp]::_MIN&lang;unsigned char, int&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, settings.o(t._ZN34_INTERNAL_12_settings_cpp_7a1ff5ce4_MINIhiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::reset()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarlinSettings::_load()
</UL>

<P><STRONG><a name="[60b]"></a>decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MAX&lang;unsigned, unsigned long&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stepper.o(t._ZN33_INTERNAL_11_stepper_cpp_209733ab4_MAXIjmEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[60c]"></a>decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MAX&lang;unsigned long, unsigned long&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stepper.o(t._ZN33_INTERNAL_11_stepper_cpp_209733ab4_MAXImmEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::block_phase_isr()
</UL>

<P><STRONG><a name="[611]"></a>decltype(((const param#1+const param#2))) [local to stepper_cpp]::_MIN&lang;unsigned, unsigned long&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stepper.o(t._ZN33_INTERNAL_11_stepper_cpp_209733ab4_MINIjmEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stepper::AWAIT_TIMED_PULSE(unsigned char)
</UL>

<P><STRONG><a name="[523]"></a>[local to temperature_cpp]::HAL_adc_read()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, temperature.o(i._ZN37_INTERNAL_15_temperature_cpp_2f7cf00e12HAL_adc_readEv))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tick()
</UL>

<P><STRONG><a name="[522]"></a>[local to temperature_cpp]::HAL_adc_start(unsigned)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, temperature.o(i._ZN37_INTERNAL_15_temperature_cpp_2f7cf00e13HAL_adc_startEj))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::tick()
</UL>

<P><STRONG><a name="[516]"></a>[local to temperature_cpp]::print_heater_state(const float&, const float&, float, heater_id_t)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, temperature.o(i._ZN37_INTERNAL_15_temperature_cpp_2f7cf00e18print_heater_stateERKfS1_f11heater_id_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [local to temperature_cpp]::print_heater_state(const float&, const float&, float, heater_id_t) &rArr; serial_echopair_PGM(const char*, float) &rArr; Print::print(double, int) &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_echopair_PGM(const char*, float)
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(int)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialprintPGM(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::print_heater_states(unsigned char)
</UL>

<P><STRONG><a name="[17e]"></a>__sti___15_temperature_cpp_2f7cf00e</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, temperature.o(i.__sti___15_temperature_cpp_2f7cf00e))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___15_temperature_cpp_2f7cf00e &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temperature.o(.init_array)
</UL>
<P><STRONG><a name="[509]"></a>const T1 [local to temperature_cpp]::ABS&lang;float&rang;(T1)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, temperature.o(t._ZN37_INTERNAL_15_temperature_cpp_2f7cf00e3ABSIfEEKT_S1_))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_hotend(unsigned char, bool)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::wait_for_bed(bool)
</UL>

<P><STRONG><a name="[515]"></a>decltype(((const param#1+const param#2))) [local to temperature_cpp]::_MIN&lang;short, int&rang;(T1, T2)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, temperature.o(t._ZN37_INTERNAL_15_temperature_cpp_2f7cf00e4_MINIsiEEDTplfpK_fpK0_ET_T0_))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temperature::disable_all_heaters()
</UL>

<P><STRONG><a name="[17f]"></a>__sti___12_trinamic_cpp_stepperX</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, trinamic.o(i.__sti___12_trinamic_cpp_stepperX))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __sti___12_trinamic_cpp_stepperX &rArr; TMC2208Stepper::TMC2208Stepper(unsigned short, unsigned short, float) &rArr; TMC2208Stepper::TMC2208Stepper(unsigned short, unsigned short, float, unsigned char) &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMC2208Stepper::TMC2208Stepper(unsigned short, unsigned short, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trinamic.o(.init_array)
</UL>
<P><STRONG><a name="[129]"></a>&lang;Func69&rang;</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cardreader.o(i.<Func69>))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = &lang;Func69&rang; &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(i.__sti___14_cardreader_cpp_29701c05)
</UL>
<P><STRONG><a name="[3e9]"></a>CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, cardreader.o(i._ZZN10CardReader14getAbsFilenameEPcENKUlR6SdFileE_clES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = CardReader::getAbsFilename(char*)::[lambda(SdFile&) (instance 1)]::operator ()(SdFile&) const &rArr; SdBaseFile::getDosName(char*) &rArr; SdBaseFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, bool) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlock(unsigned, const unsigned char*) &rArr; SDIO_WriteBlockDMA &rArr; sdio_write(unsigned, const unsigned char*) &rArr; SDCARD_WriteBlocks &rArr; [local to sd_card_c]::SdCardCheckReayForData(stc_sd_handle*, unsigned) &rArr; SDMMC_Cmd13_SendStatus &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCmdResp1(M4_SDIOC_TypeDef*, unsigned*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_WaitResponse(M4_SDIOC_TypeDef*, unsigned) &rArr; [local to sdmmc_cmd_c]::SDMMC_GetCardDetection(M4_SDIOC_TypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::getDosName(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardReader::getAbsFilename(char*)
</UL>

<P><STRONG><a name="[180]"></a>__sti___14_cardreader_cpp_29701c05</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, cardreader.o(i.__sti___14_cardreader_cpp_29701c05))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sti___14_cardreader_cpp_29701c05 &rArr; __aeabi_atexit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cardreader.o(.init_array)
</UL>
<P><STRONG><a name="[4dc]"></a>[local to SdBaseFile_cpp]::DIR_IS_FILE(const directoryEntry*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN36_INTERNAL_14_SdBaseFile_cpp_9a4d697f11DIR_IS_FILEEPK14directoryEntry))
<BR><BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4dd]"></a>[local to SdBaseFile_cpp]::DIR_IS_SUBDIR(const directoryEntry*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN36_INTERNAL_14_SdBaseFile_cpp_9a4d697f13DIR_IS_SUBDIREPK14directoryEntry))
<BR><BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::openCachedEntry(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4ed]"></a>[local to SdBaseFile_cpp]::DIR_IS_FILE_OR_SUBDIR(const directoryEntry*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdbasefile.o(i._ZN36_INTERNAL_14_SdBaseFile_cpp_9a4d697f21DIR_IS_FILE_OR_SUBDIREPK14directoryEntry))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdBaseFile::readDir(directoryEntry*, char*)
</UL>

<P><STRONG><a name="[658]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[643]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[65a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[659]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[127]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[126]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[654]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1a9]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[ab]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[1b6]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
